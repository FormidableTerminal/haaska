!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
_ALGOBASE_H	stl/stl_algobase.h	63;"	d
_ALGO_H	stl/stl_algo.h	63;"	d
_Alloc_value_type	stl/stl_deque.h	/^      typedef typename _Alloc::value_type        _Alloc_value_type;$/;"	t	class:std::deque	access:private
_Alloc_value_type	stl/stl_list.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	t	class:std::list	access:private
_Alloc_value_type	stl/stl_map.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::map	access:private
_Alloc_value_type	stl/stl_multimap.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::multimap	access:private
_Alloc_value_type	stl/stl_multiset.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::multiset	access:private
_Alloc_value_type	stl/stl_set.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::set	access:private
_Alloc_value_type	stl/stl_vector.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	t	class:std::vector	access:private
_BVECTOR_H	stl/stl_bvector.h	63;"	d
_Base	stl/stl_bvector.h	/^    typedef _Bvector_base<_Alloc>			 _Base;$/;"	t	class:std::vector	access:private
_Base	stl/stl_deque.h	/^      typedef _Deque_base<_Tp, _Alloc>           _Base;$/;"	t	class:std::deque	access:private
_Base	stl/stl_list.h	/^      typedef _List_base<_Tp, _Alloc>                    _Base;$/;"	t	class:std::list	access:private
_Base	stl/stl_vector.h	/^      typedef _Vector_base<_Tp, _Alloc>			 _Base;$/;"	t	class:std::vector	access:private
_Base_ptr	stl/stl_tree.h	/^      typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
_Base_ptr	stl/stl_tree.h	/^      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Base_ptr	stl/stl_tree.h	/^      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
_Base_ptr	stl/stl_tree.h	/^    typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
_Bit_alloc_type	stl/stl_bvector.h	/^        _Bit_alloc_type;$/;"	t	struct:std::_Bvector_base	access:public
_Bit_const_iterator	stl/stl_bvector.h	/^    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator	stl/stl_bvector.h	/^    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(_Bit_type * __x, unsigned int __y)
_Bit_const_iterator	stl/stl_bvector.h	/^    _Bit_const_iterator(const _Bit_iterator& __x)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(const _Bit_iterator& __x)
_Bit_const_iterator	stl/stl_bvector.h	/^  struct _Bit_const_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
_Bit_iterator	stl/stl_bvector.h	/^    _Bit_iterator() : _Bit_iterator_base(0, 0) { }$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
_Bit_iterator	stl/stl_bvector.h	/^    _Bit_iterator(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(_Bit_type * __x, unsigned int __y)
_Bit_iterator	stl/stl_bvector.h	/^  struct _Bit_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
_Bit_iterator_base	stl/stl_bvector.h	/^    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(_Bit_type * __x, unsigned int __y)
_Bit_iterator_base	stl/stl_bvector.h	/^  struct _Bit_iterator_base$/;"	s	namespace:std	inherits:std::iterator
_Bit_reference	stl/stl_bvector.h	/^    _Bit_reference() : _M_p(0), _M_mask(0) { }$/;"	f	struct:std::_Bit_reference	access:public	signature:()
_Bit_reference	stl/stl_bvector.h	/^    _Bit_reference(_Bit_type * __x, _Bit_type __y)$/;"	f	struct:std::_Bit_reference	access:public	signature:(_Bit_type * __x, _Bit_type __y)
_Bit_reference	stl/stl_bvector.h	/^  struct _Bit_reference$/;"	s	namespace:std
_Bit_type	stl/stl_bvector.h	/^  typedef unsigned long _Bit_type;$/;"	t	namespace:std
_Bvector_base	stl/stl_bvector.h	/^      _Bvector_base(const allocator_type& __a) : _M_impl(__a) { }$/;"	f	struct:std::_Bvector_base	access:public	signature:(const allocator_type& __a)
_Bvector_base	stl/stl_bvector.h	/^    struct _Bvector_base$/;"	s	namespace:std
_Bvector_impl	stl/stl_bvector.h	/^	_Bvector_impl(const _Bit_alloc_type& __a)$/;"	f	struct:std::_Bvector_base::_Bvector_impl	access:public	signature:(const _Bit_alloc_type& __a)
_Bvector_impl	stl/stl_bvector.h	/^      struct _Bvector_impl$/;"	s	struct:std::_Bvector_base	inherits:_Bit_alloc_type	access:public
_Const_Base_ptr	stl/stl_tree.h	/^      typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
_Const_Base_ptr	stl/stl_tree.h	/^    typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
_Const_Link_type	stl/stl_tree.h	/^      typedef const _Rb_tree_node* _Const_Link_type;$/;"	t	class:std::_Rb_tree	access:public
_Construct	stl/stl_construct.h	/^    _Construct(_T1* __p)$/;"	f	namespace:std	signature:(_T1* __p)
_Construct	stl/stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	f	namespace:std	signature:(_T1* __p, const _T2& __value)
_DEQUE_H	stl/stl_deque.h	63;"	d
_Deque_base	stl/stl_deque.h	/^      _Deque_base(const allocator_type& __a)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a)
_Deque_base	stl/stl_deque.h	/^      _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a, size_t __num_elements)
_Deque_base	stl/stl_deque.h	/^    class _Deque_base$/;"	c	namespace:std
_Deque_impl	stl/stl_deque.h	/^	_Deque_impl(const _Tp_alloc_type& __a)$/;"	f	struct:std::_Deque_base::_Deque_impl	access:public	signature:(const _Tp_alloc_type& __a)
_Deque_impl	stl/stl_deque.h	/^      struct _Deque_impl$/;"	s	class:std::_Deque_base	inherits:_Tp_alloc_type	access:protected
_Deque_iterator	stl/stl_deque.h	/^      _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
_Deque_iterator	stl/stl_deque.h	/^      _Deque_iterator(_Tp* __x, _Map_pointer __y)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Tp* __x, _Map_pointer __y)
_Deque_iterator	stl/stl_deque.h	/^      _Deque_iterator(const iterator& __x)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const iterator& __x)
_Deque_iterator	stl/stl_deque.h	/^    struct _Deque_iterator$/;"	s	namespace:std
_Destroy	stl/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Destroy	stl/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Allocator __alloc)
_Destroy	stl/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp>)
_Destroy	stl/stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	f	namespace:std	signature:(_Tp* __pointer)
_FUNCTION_H	stl/stl_function.h	62;"	d
_ITERATOR_BASE_FUNCS_H	stl/stl_iterator_base_funcs.h	66;"	d
_ITERATOR_BASE_TYPES_H	stl/stl_iterator_base_types.h	65;"	d
_ITERATOR_H	stl/stl_iterator.h	67;"	d
_Identity	stl/stl_function.h	/^    struct _Identity : public unary_function<_Tp,_Tp>$/;"	s	namespace:std	inherits:unary_function
_Key_alloc_type	stl/stl_multiset.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	t	class:std::multiset	access:private
_Key_alloc_type	stl/stl_set.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	t	class:std::set	access:private
_LIST_H	stl/stl_list.h	63;"	d
_Link_type	stl/stl_tree.h	/^      typedef _Rb_tree_node* _Link_type;$/;"	t	class:std::_Rb_tree	access:public
_Link_type	stl/stl_tree.h	/^      typedef _Rb_tree_node<_Tp>*           _Link_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Link_type	stl/stl_tree.h	/^      typedef _Rb_tree_node<_Val>* _Link_type;$/;"	t	struct:std::_Rb_tree_node	access:public
_Link_type	stl/stl_tree.h	/^      typedef const _Rb_tree_node<_Tp>*           _Link_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
_List_base	stl/stl_list.h	/^      _List_base(const allocator_type& __a)$/;"	f	class:std::_List_base	access:public	signature:(const allocator_type& __a)
_List_base	stl/stl_list.h	/^    class _List_base$/;"	c	namespace:std
_List_const_iterator	stl/stl_list.h	/^      _List_const_iterator()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
_List_const_iterator	stl/stl_list.h	/^      _List_const_iterator(const _List_node_base* __x)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _List_node_base* __x)
_List_const_iterator	stl/stl_list.h	/^      _List_const_iterator(const iterator& __x)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const iterator& __x)
_List_const_iterator	stl/stl_list.h	/^    struct _List_const_iterator$/;"	s	namespace:std
_List_impl	stl/stl_list.h	/^	_List_impl(const _Node_alloc_type& __a)$/;"	f	struct:std::_List_base::_List_impl	access:public	signature:(const _Node_alloc_type& __a)
_List_impl	stl/stl_list.h	/^      struct _List_impl $/;"	s	class:std::_List_base	inherits:_Node_alloc_type	access:protected
_List_iterator	stl/stl_list.h	/^      _List_iterator()$/;"	f	struct:std::_List_iterator	access:public	signature:()
_List_iterator	stl/stl_list.h	/^      _List_iterator(_List_node_base* __x)$/;"	f	struct:std::_List_iterator	access:public	signature:(_List_node_base* __x)
_List_iterator	stl/stl_list.h	/^    struct _List_iterator$/;"	s	namespace:std
_List_node	stl/stl_list.h	/^    struct _List_node : public _List_node_base$/;"	s	namespace:std	inherits:_List_node_base
_List_node_base	stl/stl_list.h	/^  struct _List_node_base$/;"	s	namespace:std
_MAP_H	stl/stl_map.h	63;"	d
_MULTIMAP_H	stl/stl_multimap.h	62;"	d
_MULTISET_H	stl/stl_multiset.h	62;"	d
_M_allocate	stl/stl_bvector.h	/^      _M_allocate(size_t __n)$/;"	f	struct:std::_Bvector_base	access:protected	signature:(size_t __n)
_M_allocate	stl/stl_vector.h	/^      _M_allocate(size_t __n)$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n)
_M_allocate_and_copy	stl/stl_vector.h	/^        _M_allocate_and_copy(size_type __n,$/;"	f	class:std::vector	access:protected	signature:(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
_M_allocate_map	stl/stl_deque.h	/^      _M_allocate_map(size_t __n)$/;"	f	class:std::_Deque_base	access:protected	signature:(size_t __n)
_M_allocate_node	stl/stl_deque.h	/^      _M_allocate_node()$/;"	f	class:std::_Deque_base	access:protected	signature:()
_M_assign_aux	stl/stl_bvector.h	/^      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_assign_aux	stl/stl_bvector.h	/^      _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_assign_aux	stl/stl_deque.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_assign_aux	stl/stl_deque.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_assign_aux	stl/stl_vector.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_assign_aux	stl/stl_vector.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_assign_dispatch	stl/stl_bvector.h	/^      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	stl/stl_bvector.h	/^      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	stl/stl_deque.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	stl/stl_deque.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::deque	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	stl/stl_list.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::list	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	stl/stl_list.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::list	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	stl/stl_vector.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	stl/stl_vector.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
_M_begin	stl/stl_tree.h	/^      _M_begin() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_begin	stl/stl_tree.h	/^      _M_begin()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_buffer	stl/stl_tempbuf.h	/^      pointer    _M_buffer;$/;"	m	class:std::_Temporary_buffer	access:protected
_M_bump_down	stl/stl_bvector.h	/^    _M_bump_down()$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
_M_bump_up	stl/stl_bvector.h	/^    _M_bump_up()$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
_M_check_equal_allocators	stl/stl_list.h	/^      _M_check_equal_allocators(list& __x)$/;"	f	class:std::list	access:protected	signature:(list& __x)
_M_clear	stl/stl_list.h	/^      _M_clear();$/;"	p	class:std::_List_base	access:public	signature:()
_M_clone_node	stl/stl_tree.h	/^      _M_clone_node(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
_M_color	stl/stl_tree.h	/^    _Rb_tree_color	_M_color;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_copy	stl/stl_tree.h	/^      _M_copy(_Const_Link_type __x, _Link_type __p);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Const_Link_type __x, _Link_type __p)
_M_copy	stl/stl_tree.h	/^    _M_copy(_Const_Link_type __x, _Link_type __p)$/;"	f	class:std::_Rb_tree	signature:(_Const_Link_type __x, _Link_type __p)
_M_copy_aligned	stl/stl_bvector.h	/^    _M_copy_aligned(const_iterator __first, const_iterator __last,$/;"	f	class:std::vector	access:protected	signature:(const_iterator __first, const_iterator __last, iterator __result)
_M_create_node	stl/stl_list.h	/^      _M_create_node(const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(const value_type& __x)
_M_create_node	stl/stl_tree.h	/^      _M_create_node(const value_type& __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(const value_type& __x)
_M_create_nodes	stl/stl_deque.h	/^      void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_create_nodes	stl/stl_deque.h	/^    _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_cur	stl/stl_deque.h	/^      _Tp* _M_cur;$/;"	m	struct:std::_Deque_iterator	access:public
_M_current	stl/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:__normal_iterator	access:protected
_M_data	stl/stl_list.h	/^      _Tp _M_data;                \/\/\/< User's data.$/;"	m	struct:std::_List_node	access:public
_M_deallocate	stl/stl_bvector.h	/^      _M_deallocate()$/;"	f	struct:std::_Bvector_base	access:protected	signature:()
_M_deallocate	stl/stl_vector.h	/^      _M_deallocate(_Tp* __p, size_t __n)$/;"	f	struct:std::_Vector_base	access:public	signature:(_Tp* __p, size_t __n)
_M_deallocate_map	stl/stl_deque.h	/^      _M_deallocate_map(_Tp** __p, size_t __n)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp** __p, size_t __n)
_M_deallocate_node	stl/stl_deque.h	/^      _M_deallocate_node(_Tp* __p)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp* __p)
_M_destroy_data	stl/stl_deque.h	/^        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, const _Alloc1&)
_M_destroy_data	stl/stl_deque.h	/^      _M_destroy_data(iterator __first, iterator __last,$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, const std::allocator<_Tp>&)
_M_destroy_data_aux	stl/stl_deque.h	/^      _M_destroy_data_aux(iterator __first, iterator __last);$/;"	p	class:std::deque	access:protected	signature:(iterator __first, iterator __last)
_M_destroy_data_dispatch	stl/stl_deque.h	/^      _M_destroy_data_dispatch(iterator __first, iterator __last, __false_type)$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, __false_type)
_M_destroy_data_dispatch	stl/stl_deque.h	/^      _M_destroy_data_dispatch(iterator, iterator, __true_type) { }$/;"	f	class:std::deque	access:protected	signature:(iterator, iterator, __true_type)
_M_destroy_node	stl/stl_tree.h	/^      _M_destroy_node(_Link_type __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __p)
_M_destroy_nodes	stl/stl_deque.h	/^      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_destroy_nodes	stl/stl_deque.h	/^    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_end	stl/stl_tree.h	/^      _M_end() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_end	stl/stl_tree.h	/^      _M_end()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_end_of_storage	stl/stl_bvector.h	/^	_Bit_type* 	_M_end_of_storage;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
_M_end_of_storage	stl/stl_vector.h	/^	_Tp*           _M_end_of_storage;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
_M_erase	stl/stl_list.h	/^      _M_erase(iterator __position)$/;"	f	class:std::list	access:protected	signature:(iterator __position)
_M_erase	stl/stl_tree.h	/^      _M_erase(_Link_type __x);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Link_type __x)
_M_erase	stl/stl_tree.h	/^    _M_erase(_Link_type __x)$/;"	f	class:std::_Rb_tree	signature:(_Link_type __x)
_M_erase_at_begin	stl/stl_deque.h	/^      _M_erase_at_begin(iterator __pos)$/;"	f	class:std::deque	access:protected	signature:(iterator __pos)
_M_erase_at_end	stl/stl_bvector.h	/^    _M_erase_at_end(iterator __pos)$/;"	f	class:std::vector	access:protected	signature:(iterator __pos)
_M_erase_at_end	stl/stl_deque.h	/^      _M_erase_at_end(iterator __pos)$/;"	f	class:std::deque	access:protected	signature:(iterator __pos)
_M_erase_at_end	stl/stl_vector.h	/^      _M_erase_at_end(pointer __pos)$/;"	f	class:std::vector	access:protected	signature:(pointer __pos)
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	access:private
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	access:private
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	access:private
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	access:private
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	access:private
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	access:private
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	access:private
_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	access:private
_M_fill_assign	stl/stl_bvector.h	/^    _M_fill_assign(size_t __n, bool __x)$/;"	f	class:std::vector	access:protected	signature:(size_t __n, bool __x)
_M_fill_assign	stl/stl_deque.h	/^      _M_fill_assign(size_type __n, const value_type& __val)$/;"	f	class:std::deque	access:protected	signature:(size_type __n, const value_type& __val)
_M_fill_assign	stl/stl_list.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	p	class:std::list	access:protected	signature:(size_type __n, const value_type& __val)
_M_fill_assign	stl/stl_vector.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	p	class:std::vector	access:protected	signature:(size_type __n, const value_type& __val)
_M_fill_initialize	stl/stl_deque.h	/^      _M_fill_initialize(const value_type& __value);$/;"	p	class:std::deque	access:protected	signature:(const value_type& __value)
_M_fill_initialize	stl/stl_list.h	/^      _M_fill_initialize(size_type __n, const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(size_type __n, const value_type& __x)
_M_fill_insert	stl/stl_bvector.h	/^    _M_fill_insert(iterator __position, size_type __n, bool __x)$/;"	f	class:std::vector	access:protected	signature:(iterator __position, size_type __n, bool __x)
_M_fill_insert	stl/stl_deque.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_fill_insert	stl/stl_vector.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_finish	stl/stl_bvector.h	/^	_Bit_iterator 	_M_finish;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
_M_finish	stl/stl_deque.h	/^	iterator _M_finish;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_M_finish	stl/stl_vector.h	/^	_Tp*           _M_finish;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
_M_first	stl/stl_deque.h	/^      _Tp* _M_first;$/;"	m	struct:std::_Deque_iterator	access:public
_M_get_Bit_allocator	stl/stl_bvector.h	/^      _M_get_Bit_allocator() const$/;"	f	struct:std::_Bvector_base	access:public	signature:() const
_M_get_Bit_allocator	stl/stl_bvector.h	/^      _M_get_Bit_allocator()$/;"	f	struct:std::_Bvector_base	access:public	signature:()
_M_get_Node_allocator	stl/stl_list.h	/^      _M_get_Node_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
_M_get_Node_allocator	stl/stl_list.h	/^      _M_get_Node_allocator()$/;"	f	class:std::_List_base	access:public	signature:()
_M_get_Node_allocator	stl/stl_tree.h	/^      _M_get_Node_allocator() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
_M_get_Node_allocator	stl/stl_tree.h	/^      _M_get_Node_allocator()$/;"	f	class:std::_Rb_tree	access:public	signature:()
_M_get_Tp_allocator	stl/stl_deque.h	/^      _M_get_Tp_allocator() const$/;"	f	class:std::_Deque_base	access:protected	signature:() const
_M_get_Tp_allocator	stl/stl_deque.h	/^      _M_get_Tp_allocator()$/;"	f	class:std::_Deque_base	access:protected	signature:()
_M_get_Tp_allocator	stl/stl_list.h	/^      _M_get_Tp_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
_M_get_Tp_allocator	stl/stl_vector.h	/^      _M_get_Tp_allocator() const$/;"	f	struct:std::_Vector_base	access:public	signature:() const
_M_get_Tp_allocator	stl/stl_vector.h	/^      _M_get_Tp_allocator()$/;"	f	struct:std::_Vector_base	access:public	signature:()
_M_get_map_allocator	stl/stl_deque.h	/^      _M_get_map_allocator() const$/;"	f	class:std::_Deque_base	access:protected	signature:() const
_M_get_node	stl/stl_list.h	/^      _M_get_node()$/;"	f	class:std::_List_base	access:protected	signature:()
_M_get_node	stl/stl_tree.h	/^      _M_get_node()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_header	stl/stl_tree.h	/^	  _Rb_tree_node_base 	_M_header;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_impl	stl/stl_bvector.h	/^      _Bvector_impl _M_impl;$/;"	m	struct:std::_Bvector_base	access:protected
_M_impl	stl/stl_deque.h	/^      _Deque_impl _M_impl;$/;"	m	class:std::_Deque_base	access:protected
_M_impl	stl/stl_list.h	/^      _List_impl _M_impl;$/;"	m	class:std::_List_base	access:protected
_M_impl	stl/stl_tree.h	/^      _Rb_tree_impl<_Compare> _M_impl;$/;"	m	class:std::_Rb_tree	access:protected
_M_impl	stl/stl_vector.h	/^      _Vector_impl _M_impl;$/;"	m	struct:std::_Vector_base	access:public
_M_incr	stl/stl_bvector.h	/^    _M_incr(ptrdiff_t __i)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(ptrdiff_t __i)
_M_init	stl/stl_list.h	/^      _M_init()$/;"	f	class:std::_List_base	access:public	signature:()
_M_initialize	stl/stl_bvector.h	/^    _M_initialize(size_type __n)$/;"	f	class:std::vector	access:protected	signature:(size_type __n)
_M_initialize_buffer	stl/stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp& __val, __false_type)$/;"	f	class:std::_Temporary_buffer	access:protected	signature:(const _Tp& __val, __false_type)
_M_initialize_buffer	stl/stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp&, __true_type) { }$/;"	f	class:std::_Temporary_buffer	access:protected	signature:(const _Tp&, __true_type)
_M_initialize_dispatch	stl/stl_bvector.h	/^      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_dispatch	stl/stl_bvector.h	/^      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	stl/stl_deque.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_dispatch	stl/stl_deque.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::deque	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	stl/stl_list.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_dispatch	stl/stl_list.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::list	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	stl/stl_vector.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_dispatch	stl/stl_vector.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __value, __true_type)
_M_initialize_map	stl/stl_deque.h	/^      void _M_initialize_map(size_t);$/;"	p	class:std::_Deque_base	access:protected	signature:(size_t)
_M_initialize_map	stl/stl_deque.h	/^    _M_initialize_map(size_t __num_elements)$/;"	f	class:std::_Deque_base	signature:(size_t __num_elements)
_M_initialize_range	stl/stl_bvector.h	/^      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_initialize_range	stl/stl_bvector.h	/^      _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_insert	stl/stl_list.h	/^      _M_insert(iterator __position, const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(iterator __position, const value_type& __x)
_M_insert	stl/stl_tree.h	/^      _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
_M_insert	stl/stl_tree.h	/^      _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __y,$/;"	p	class:std::_Rb_tree	access:private	signature:(_Const_Base_ptr __x, _Const_Base_ptr __y, const value_type& __v)
_M_insert	stl/stl_tree.h	/^    _M_insert(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
_M_insert	stl/stl_tree.h	/^    _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)
_M_insert_aux	stl/stl_bvector.h	/^    _M_insert_aux(iterator __position, bool __x)$/;"	f	class:std::vector	access:protected	signature:(iterator __position, bool __x)
_M_insert_aux	stl/stl_deque.h	/^        _M_insert_aux(iterator __pos,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
_M_insert_aux	stl/stl_deque.h	/^      _M_insert_aux(iterator __pos, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const value_type& __x)
_M_insert_aux	stl/stl_deque.h	/^      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	stl/stl_vector.h	/^      _M_insert_aux(iterator __position, const value_type& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __position, const value_type& __x)
_M_insert_dispatch	stl/stl_bvector.h	/^      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	stl/stl_bvector.h	/^      _M_insert_dispatch(iterator __pos,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	stl/stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	stl/stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:protected	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	stl/stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _InputIterator __first,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	stl/stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _Integer __n, _Integer __val, __true_type)
_M_insert_equal	stl/stl_tree.h	/^        _M_insert_equal(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(const_iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position, const value_type& __x)
_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
_M_insert_equal	stl/stl_tree.h	/^    _M_insert_equal(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
_M_insert_equal	stl/stl_tree.h	/^    _M_insert_equal(const_iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position, const _Val& __v)
_M_insert_equal	stl/stl_tree.h	/^    _M_insert_equal(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
_M_insert_equal_lower	stl/stl_tree.h	/^      _M_insert_equal_lower(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
_M_insert_equal_lower	stl/stl_tree.h	/^    _M_insert_equal_lower(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
_M_insert_lower	stl/stl_tree.h	/^      _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
_M_insert_lower	stl/stl_tree.h	/^    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
_M_insert_range	stl/stl_bvector.h	/^      _M_insert_range(iterator __pos, _InputIterator __first, $/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_insert_range	stl/stl_bvector.h	/^      _M_insert_range(iterator __position, _ForwardIterator __first, $/;"	f	class:std::vector	access:protected	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_insert_unique	stl/stl_tree.h	/^        _M_insert_unique(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(const_iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position, const value_type& __x)
_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
_M_insert_unique	stl/stl_tree.h	/^    _M_insert_unique(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
_M_insert_unique	stl/stl_tree.h	/^    _M_insert_unique(const_iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position, const _Val& __v)
_M_insert_unique	stl/stl_tree.h	/^    _M_insert_unique(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
_M_iter	stl/stl_raw_storage_iter.h	/^      _ForwardIterator _M_iter;$/;"	m	class:std::raw_storage_iterator	access:protected
_M_key_compare	stl/stl_tree.h	/^	  _Key_compare		_M_key_compare;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_key_compare	stl/stl_tree.h	/^	  _Key_compare 		_M_key_compare;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_last	stl/stl_deque.h	/^      _Tp* _M_last;$/;"	m	struct:std::_Deque_iterator	access:public
_M_left	stl/stl_tree.h	/^    _Base_ptr		_M_left;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_leftmost	stl/stl_tree.h	/^      _M_leftmost() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_leftmost	stl/stl_tree.h	/^      _M_leftmost()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_len	stl/stl_tempbuf.h	/^      size_type  _M_len;$/;"	m	class:std::_Temporary_buffer	access:protected
_M_map	stl/stl_deque.h	/^	_Tp** _M_map;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_M_map_size	stl/stl_deque.h	/^	size_t _M_map_size;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_M_mask	stl/stl_bvector.h	/^    _Bit_type _M_mask;$/;"	m	struct:std::_Bit_reference	access:public
_M_new_elements_at_back	stl/stl_deque.h	/^      _M_new_elements_at_back(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
_M_new_elements_at_front	stl/stl_deque.h	/^      _M_new_elements_at_front(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
_M_next	stl/stl_list.h	/^    _List_node_base* _M_next;   \/\/\/< Self-explanatory$/;"	m	struct:std::_List_node_base	access:public
_M_node	stl/stl_deque.h	/^      _Map_pointer _M_node;$/;"	m	struct:std::_Deque_iterator	access:public
_M_node	stl/stl_list.h	/^	_List_node_base _M_node;$/;"	m	struct:std::_List_base::_List_impl	access:public
_M_node	stl/stl_list.h	/^      _List_node_base* _M_node;$/;"	m	struct:std::_List_iterator	access:public
_M_node	stl/stl_list.h	/^      const _List_node_base* _M_node;$/;"	m	struct:std::_List_const_iterator	access:public
_M_node	stl/stl_tree.h	/^      _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_const_iterator	access:public
_M_node	stl/stl_tree.h	/^      _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_iterator	access:public
_M_node_count	stl/stl_tree.h	/^	  size_type 		_M_node_count; \/\/ Keeps track of size of tree.$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
_M_offset	stl/stl_bvector.h	/^    unsigned int _M_offset;$/;"	m	struct:std::_Bit_iterator_base	access:public
_M_original_len	stl/stl_tempbuf.h	/^      size_type  _M_original_len;$/;"	m	class:std::_Temporary_buffer	access:protected
_M_p	stl/stl_bvector.h	/^    _Bit_type * _M_p;$/;"	m	struct:std::_Bit_iterator_base	access:public
_M_p	stl/stl_bvector.h	/^    _Bit_type * _M_p;$/;"	m	struct:std::_Bit_reference	access:public
_M_parent	stl/stl_tree.h	/^    _Base_ptr		_M_parent;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_pop_back_aux	stl/stl_deque.h	/^      void _M_pop_back_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_pop_front_aux	stl/stl_deque.h	/^      void _M_pop_front_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_pred	stl/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	access:protected
_M_pred	stl/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	access:protected
_M_prev	stl/stl_list.h	/^    _List_node_base* _M_prev;   \/\/\/< Self-explanatory$/;"	m	struct:std::_List_node_base	access:public
_M_ptr	stl/stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	access:protected
_M_ptr	stl/stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	access:protected
_M_push_back_aux	stl/stl_deque.h	/^      void _M_push_back_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
_M_push_front_aux	stl/stl_deque.h	/^      void _M_push_front_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
_M_put_node	stl/stl_list.h	/^      _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:std::_List_base	access:protected	signature:(_List_node<_Tp>* __p)
_M_put_node	stl/stl_tree.h	/^      _M_put_node(_Rb_tree_node* __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Rb_tree_node* __p)
_M_range_check	stl/stl_bvector.h	/^    _M_range_check(size_type __n) const$/;"	f	class:std::vector	access:protected	signature:(size_type __n) const
_M_range_check	stl/stl_deque.h	/^      _M_range_check(size_type __n) const$/;"	f	class:std::deque	access:protected	signature:(size_type __n) const
_M_range_check	stl/stl_vector.h	/^      _M_range_check(size_type __n) const$/;"	f	class:std::vector	access:protected	signature:(size_type __n) const
_M_range_initialize	stl/stl_deque.h	/^        _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_range_initialize	stl/stl_deque.h	/^        _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_range_initialize	stl/stl_vector.h	/^        _M_range_initialize(_ForwardIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_range_initialize	stl/stl_vector.h	/^        _M_range_initialize(_InputIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_range_insert	stl/stl_vector.h	/^        _M_range_insert(iterator __pos, _ForwardIterator __first,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_range_insert	stl/stl_vector.h	/^        _M_range_insert(iterator __pos, _InputIterator __first,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_range_insert_aux	stl/stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _ForwardIterator __first,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
_M_range_insert_aux	stl/stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _InputIterator __first,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
_M_reallocate_map	stl/stl_deque.h	/^      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	p	class:std::deque	access:protected	signature:(size_type __nodes_to_add, bool __add_at_front)
_M_reserve_elements_at_back	stl/stl_deque.h	/^      _M_reserve_elements_at_back(size_type __n)$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
_M_reserve_elements_at_front	stl/stl_deque.h	/^      _M_reserve_elements_at_front(size_type __n)$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
_M_reserve_map_at_back	stl/stl_deque.h	/^      _M_reserve_map_at_back(size_type __nodes_to_add = 1)$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_reserve_map_at_front	stl/stl_deque.h	/^      _M_reserve_map_at_front(size_type __nodes_to_add = 1)$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_right	stl/stl_tree.h	/^    _Base_ptr		_M_right;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_rightmost	stl/stl_tree.h	/^      _M_rightmost() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_rightmost	stl/stl_tree.h	/^      _M_rightmost()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_root	stl/stl_tree.h	/^      _M_root() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_root	stl/stl_tree.h	/^      _M_root()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
_M_set_node	stl/stl_deque.h	/^      _M_set_node(_Map_pointer __new_node)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Map_pointer __new_node)
_M_start	stl/stl_bvector.h	/^	_Bit_iterator 	_M_start;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
_M_start	stl/stl_deque.h	/^	iterator _M_start;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
_M_start	stl/stl_vector.h	/^	_Tp*           _M_start;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
_M_t	stl/stl_map.h	/^      _Rep_type _M_t;$/;"	m	class:std::map	access:private
_M_t	stl/stl_multimap.h	/^      _Rep_type _M_t;$/;"	m	class:std::multimap	access:private
_M_t	stl/stl_multiset.h	/^      _Rep_type _M_t;$/;"	m	class:std::multiset	access:private
_M_t	stl/stl_set.h	/^      _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:std::set	access:private
_M_transfer	stl/stl_list.h	/^      _M_transfer(iterator __position, iterator __first, iterator __last)$/;"	f	class:std::list	access:protected	signature:(iterator __position, iterator __first, iterator __last)
_M_value_field	stl/stl_tree.h	/^      _Val _M_value_field;$/;"	m	struct:std::_Rb_tree_node	access:public
_Map_alloc_type	stl/stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
_Map_pointer	stl/stl_deque.h	/^      typedef _Tp**                           _Map_pointer;$/;"	t	struct:std::_Deque_iterator	access:public
_Map_pointer	stl/stl_deque.h	/^      typedef pointer*                           _Map_pointer;$/;"	t	class:std::deque	access:protected
_Node	stl/stl_list.h	/^      typedef _List_node<_Tp>				 _Node;$/;"	t	class:std::list	access:protected
_Node	stl/stl_list.h	/^      typedef _List_node<_Tp>                    _Node;$/;"	t	struct:std::_List_iterator	access:public
_Node	stl/stl_list.h	/^      typedef const _List_node<_Tp>              _Node;$/;"	t	struct:std::_List_const_iterator	access:public
_Node_alloc_type	stl/stl_list.h	/^        _Node_alloc_type;$/;"	t	class:std::_List_base	access:protected
_Node_allocator	stl/stl_tree.h	/^              _Node_allocator;$/;"	t	class:std::_Rb_tree	access:private
_PAIR_H	stl/stl_pair.h	62;"	d
_Pair_alloc_type	stl/stl_map.h	/^        _Pair_alloc_type;$/;"	t	class:std::map	access:private
_Pair_alloc_type	stl/stl_multimap.h	/^        _Pair_alloc_type;$/;"	t	class:std::multimap	access:private
_QUEUE_H	stl/stl_queue.h	63;"	d
_Rb_tree	stl/stl_tree.h	/^      _Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
_Rb_tree	stl/stl_tree.h	/^      _Rb_tree(const _Compare& __comp)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp)
_Rb_tree	stl/stl_tree.h	/^      _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp, const allocator_type& __a)
_Rb_tree	stl/stl_tree.h	/^      _Rb_tree(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
_Rb_tree	stl/stl_tree.h	/^    class _Rb_tree$/;"	c	namespace:std
_Rb_tree_black_count	stl/stl_tree.h	/^  _Rb_tree_black_count(const _Rb_tree_node_base* __node,$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __node, const _Rb_tree_node_base* __root)
_Rb_tree_color	stl/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	g	namespace:std
_Rb_tree_const_iterator	stl/stl_tree.h	/^      _Rb_tree_const_iterator()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
_Rb_tree_const_iterator	stl/stl_tree.h	/^      _Rb_tree_const_iterator(_Link_type __x)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_const_iterator	stl/stl_tree.h	/^      _Rb_tree_const_iterator(const iterator& __it)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const iterator& __it)
_Rb_tree_const_iterator	stl/stl_tree.h	/^    struct _Rb_tree_const_iterator$/;"	s	namespace:std
_Rb_tree_decrement	stl/stl_tree.h	/^  _Rb_tree_decrement(_Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(_Rb_tree_node_base* __x)
_Rb_tree_decrement	stl/stl_tree.h	/^  _Rb_tree_decrement(const _Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __x)
_Rb_tree_impl	stl/stl_tree.h	/^	  _Rb_tree_impl(const _Node_allocator& __a = _Node_allocator(),$/;"	f	struct:std::_Rb_tree::_Rb_tree_impl	access:public	signature:(const _Node_allocator& __a = _Node_allocator(), const _Key_compare& __comp = _Key_compare())
_Rb_tree_impl	stl/stl_tree.h	/^        struct _Rb_tree_impl : public _Node_allocator$/;"	s	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
_Rb_tree_impl	stl/stl_tree.h	/^        struct _Rb_tree_impl<_Key_compare, true> : public _Node_allocator $/;"	s	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
_Rb_tree_increment	stl/stl_tree.h	/^  _Rb_tree_increment(_Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(_Rb_tree_node_base* __x)
_Rb_tree_increment	stl/stl_tree.h	/^  _Rb_tree_increment(const _Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __x)
_Rb_tree_insert_and_rebalance	stl/stl_tree.h	/^  _Rb_tree_insert_and_rebalance(const bool __insert_left,$/;"	p	namespace:std	signature:(const bool __insert_left, _Rb_tree_node_base* __x, _Rb_tree_node_base* __p, _Rb_tree_node_base& __header)
_Rb_tree_iterator	stl/stl_tree.h	/^      _Rb_tree_iterator()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator	stl/stl_tree.h	/^      _Rb_tree_iterator(_Link_type __x)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_iterator	stl/stl_tree.h	/^    struct _Rb_tree_iterator$/;"	s	namespace:std
_Rb_tree_node	stl/stl_tree.h	/^      typedef _Rb_tree_node<_Val> _Rb_tree_node;$/;"	t	class:std::_Rb_tree	access:protected
_Rb_tree_node	stl/stl_tree.h	/^    struct _Rb_tree_node : public _Rb_tree_node_base$/;"	s	namespace:std	inherits:_Rb_tree_node_base
_Rb_tree_node_base	stl/stl_tree.h	/^  struct _Rb_tree_node_base$/;"	s	namespace:std
_Rb_tree_rebalance_for_erase	stl/stl_tree.h	/^  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __z, _Rb_tree_node_base& __header)
_Rb_tree_rotate_left	stl/stl_tree.h	/^  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)
_Rb_tree_rotate_right	stl/stl_tree.h	/^  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)
_Rep_type	stl/stl_map.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	t	class:std::map	access:private
_Rep_type	stl/stl_multimap.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	t	class:std::multimap	access:private
_Rep_type	stl/stl_multiset.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	t	class:std::multiset	access:private
_Rep_type	stl/stl_set.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	t	class:std::set	access:private
_Ret	stl/stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_SET_H	stl/stl_set.h	62;"	d
_STACK_H	stl/stl_stack.h	63;"	d
_STL_CONSTRUCT_H	stl/stl_construct.h	62;"	d
_STL_HEAP_H	stl/stl_heap.h	61;"	d
_STL_NUMERIC_H	stl/stl_numeric.h	62;"	d
_STL_RAW_STORAGE_ITERATOR_H	stl/stl_raw_storage_iter.h	62;"	d
_STL_RELOPS_H	stl/stl_relops.h	72;"	d
_STL_UNINITIALIZED_H	stl/stl_uninitialized.h	63;"	d
_S_black	stl/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	e	enum:std::_Rb_tree_color
_S_buffer_size	stl/stl_deque.h	/^      static size_t _S_buffer_size()$/;"	f	class:std::deque	access:protected	signature:()
_S_buffer_size	stl/stl_deque.h	/^      static size_t _S_buffer_size()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
_S_chunk_size	stl/stl_algo.h	/^  enum { _S_chunk_size = 7 };$/;"	e	enum:std::__anon3
_S_initial_map_size	stl/stl_deque.h	/^      enum { _S_initial_map_size = 8 };$/;"	e	enum:std::_Deque_base::__anon1
_S_key	stl/stl_tree.h	/^      _S_key(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_key	stl/stl_tree.h	/^      _S_key(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
_S_left	stl/stl_tree.h	/^      _S_left(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_left	stl/stl_tree.h	/^      _S_left(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_maximum	stl/stl_tree.h	/^      _S_maximum(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_maximum	stl/stl_tree.h	/^      _S_maximum(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_maximum	stl/stl_tree.h	/^    _S_maximum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_maximum	stl/stl_tree.h	/^    _S_maximum(_Const_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Const_Base_ptr __x)
_S_minimum	stl/stl_tree.h	/^      _S_minimum(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_minimum	stl/stl_tree.h	/^      _S_minimum(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_minimum	stl/stl_tree.h	/^    _S_minimum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_minimum	stl/stl_tree.h	/^    _S_minimum(_Const_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Const_Base_ptr __x)
_S_red	stl/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	e	enum:std::_Rb_tree_color
_S_right	stl/stl_tree.h	/^      _S_right(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_right	stl/stl_tree.h	/^      _S_right(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_threshold	stl/stl_algo.h	/^  enum { _S_threshold = 16 };$/;"	e	enum:std::__anon2
_S_value	stl/stl_tree.h	/^      _S_value(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
_S_value	stl/stl_tree.h	/^      _S_value(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
_S_word_bit	stl/stl_bvector.h	/^  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };$/;"	e	enum:std::__anon4
_Select1st	stl/stl_function.h	/^    struct _Select1st : public unary_function<_Pair,$/;"	s	namespace:std	inherits:unary_function
_Select2nd	stl/stl_function.h	/^    struct _Select2nd : public unary_function<_Pair,$/;"	s	namespace:std	inherits:unary_function
_Self	stl/stl_deque.h	/^      typedef _Deque_iterator                 _Self;$/;"	t	struct:std::_Deque_iterator	access:public
_Self	stl/stl_list.h	/^      typedef _List_const_iterator<_Tp>          _Self;$/;"	t	struct:std::_List_const_iterator	access:public
_Self	stl/stl_list.h	/^      typedef _List_iterator<_Tp>                _Self;$/;"	t	struct:std::_List_iterator	access:public
_Self	stl/stl_tree.h	/^      typedef _Rb_tree_const_iterator<_Tp>        _Self;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
_Self	stl/stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp>        _Self;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Sequence_value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::priority_queue	access:private
_Sequence_value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::queue	access:private
_Sequence_value_type	stl/stl_stack.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::stack	access:private
_TEMPBUF_H	stl/stl_tempbuf.h	63;"	d
_TREE_H	stl/stl_tree.h	65;"	d
_Temporary_buffer	stl/stl_tempbuf.h	/^      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);$/;"	p	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Temporary_buffer	stl/stl_tempbuf.h	/^      _Temporary_buffer(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
_Temporary_buffer	stl/stl_tempbuf.h	/^    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	class:std::_Temporary_buffer	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Temporary_buffer	stl/stl_tempbuf.h	/^    class _Temporary_buffer$/;"	c	namespace:std
_Tp_alloc_type	stl/stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp>::other  _Tp_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
_Tp_alloc_type	stl/stl_deque.h	/^      typedef typename _Base::_Tp_alloc_type	 _Tp_alloc_type;$/;"	t	class:std::deque	access:private
_Tp_alloc_type	stl/stl_list.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	t	class:std::_List_base	access:protected
_Tp_alloc_type	stl/stl_list.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	t	class:std::list	access:private
_Tp_alloc_type	stl/stl_vector.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	t	struct:std::_Vector_base	access:public
_Tp_alloc_type	stl/stl_vector.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	t	class:std::vector	access:private
_VECTOR_H	stl/stl_vector.h	63;"	d
_Vector_base	stl/stl_vector.h	/^      _Vector_base(const allocator_type& __a)$/;"	f	struct:std::_Vector_base	access:public	signature:(const allocator_type& __a)
_Vector_base	stl/stl_vector.h	/^      _Vector_base(size_t __n, const allocator_type& __a)$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n, const allocator_type& __a)
_Vector_base	stl/stl_vector.h	/^    struct _Vector_base$/;"	s	namespace:std
_Vector_impl	stl/stl_vector.h	/^	_Vector_impl(_Tp_alloc_type const& __a)$/;"	f	struct:std::_Vector_base::_Vector_impl	access:public	signature:(_Tp_alloc_type const& __a)
_Vector_impl	stl/stl_vector.h	/^      struct _Vector_impl $/;"	s	struct:std::_Vector_base	inherits:_Tp_alloc_type	access:public
__adjust_heap	stl/stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)
__adjust_heap	stl/stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)
__advance	stl/stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std	signature:(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)
__advance	stl/stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n, input_iterator_tag)
__advance	stl/stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std	signature:(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)
__chunk_insertion_sort	stl/stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size)
__chunk_insertion_sort	stl/stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size, _Compare __comp)
__copy	stl/stl_algobase.h	/^    struct __copy$/;"	s	namespace:std
__copy	stl/stl_algobase.h	/^    struct __copy<_BoolType, random_access_iterator_tag>$/;"	s	namespace:std
__copy	stl/stl_algobase.h	/^    struct __copy<true, random_access_iterator_tag>$/;"	s	namespace:std
__copy_aux	stl/stl_algobase.h	/^    __copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>);$/;"	p	namespace:std	signature:(_CharT*, _CharT*, ostreambuf_iterator<_CharT>)
__copy_aux	stl/stl_algobase.h	/^    __copy_aux(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	signature:(_II __first, _II __last, _OI __result)
__copy_aux	stl/stl_algobase.h	/^    __copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>);$/;"	p	namespace:std	signature:(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>)
__copy_aux	stl/stl_algobase.h	/^    __copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT*)
__copy_b	stl/stl_algobase.h	/^        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_b	stl/stl_algobase.h	/^        __copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_backward	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
__copy_b_n	stl/stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward_normal	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward	stl/stl_algobase.h	/^    struct __copy_backward$/;"	s	namespace:std
__copy_backward	stl/stl_algobase.h	/^    struct __copy_backward<_BoolType, random_access_iterator_tag>$/;"	s	namespace:std
__copy_backward	stl/stl_algobase.h	/^    struct __copy_backward<true, random_access_iterator_tag>$/;"	s	namespace:std
__copy_backward_aux	stl/stl_algobase.h	/^    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal$/;"	s	namespace:std
__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal<false, true>$/;"	s	namespace:std
__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal<true, false>$/;"	s	namespace:std
__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal<true, true>$/;"	s	namespace:std
__copy_n	stl/stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_normal	access:public	signature:(_II __first, _II __last, _OI __result)
__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal$/;"	s	namespace:std
__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal<false, true>$/;"	s	namespace:std
__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal<true, false>$/;"	s	namespace:std
__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal<true, true>$/;"	s	namespace:std
__deque_buf_size	stl/stl_deque.h	/^  __deque_buf_size(size_t __size)$/;"	f	namespace:std	signature:(size_t __size)
__destroy_aux	stl/stl_construct.h	/^    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, __false_type)
__destroy_aux	stl/stl_construct.h	/^    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)$/;"	f	namespace:std	signature:(_ForwardIterator, _ForwardIterator, __true_type)
__distance	stl/stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
__distance	stl/stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
__fill	stl/stl_algobase.h	/^    struct __fill$/;"	s	namespace:std
__fill	stl/stl_algobase.h	/^    struct __fill<true>$/;"	s	namespace:std
__fill_bvector	stl/stl_bvector.h	/^  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)$/;"	f	namespace:std	signature:(_Bit_iterator __first, _Bit_iterator __last, bool __x)
__fill_n	stl/stl_algobase.h	/^    struct __fill_n$/;"	s	namespace:std
__fill_n	stl/stl_algobase.h	/^    struct __fill_n<true>$/;"	s	namespace:std
__final_insertion_sort	stl/stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__final_insertion_sort	stl/stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__find	stl/stl_algo.h	/^    __find(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __val, input_iterator_tag)
__find	stl/stl_algo.h	/^    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __val, random_access_iterator_tag)
__find_end	stl/stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag)
__find_end	stl/stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate __comp)
__find_end	stl/stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag)
__find_end	stl/stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate __comp)
__find_if	stl/stl_algo.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred, input_iterator_tag)
__find_if	stl/stl_algo.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate __pred, random_access_iterator_tag)
__gcd	stl/stl_algo.h	/^    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)$/;"	f	namespace:std	signature:(_EuclideanRingElement __m, _EuclideanRingElement __n)
__heap_select	stl/stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)
__heap_select	stl/stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
__inplace_stable_partition	stl/stl_algo.h	/^    __inplace_stable_partition(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len)
__inplace_stable_sort	stl/stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__inplace_stable_sort	stl/stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__insertion_sort	stl/stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__insertion_sort	stl/stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__introselect	stl/stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit)
__introselect	stl/stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)
__introsort_loop	stl/stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit)
__introsort_loop	stl/stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)
__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _Distance __n)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __n)
__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _StrictWeakOrdering __comp)
__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _StrictWeakOrdering __comp, _Distance __n)
__iter_swap	stl/stl_algobase.h	/^    struct __iter_swap$/;"	s	namespace:std
__iter_swap	stl/stl_algobase.h	/^    struct __iter_swap<true>$/;"	s	namespace:std
__iterator_category	stl/stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
__lg	stl/stl_algo.h	/^    __lg(_Size __n)$/;"	f	namespace:std	signature:(_Size __n)
__median	stl/stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c)
__median	stl/stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
__merge_adaptive	stl/stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)
__merge_adaptive	stl/stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
__merge_backward	stl/stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result)
__merge_backward	stl/stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result, _Compare __comp)
__merge_sort_loop	stl/stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size)
__merge_sort_loop	stl/stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size, _Compare __comp)
__merge_sort_with_buffer	stl/stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer)
__merge_sort_with_buffer	stl/stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Compare __comp)
__merge_without_buffer	stl/stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2)
__merge_without_buffer	stl/stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Compare __comp)
__normal_iterator	stl/stl_iterator.h	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	f	class:__normal_iterator	access:public	signature:(const __normal_iterator<_Iter, typename __enable_if< (std::__are_same<_Iter, typename _Container::pointer>::__value), _Container>::__type>& __i)
__normal_iterator	stl/stl_iterator.h	/^      __normal_iterator() : _M_current(_Iterator()) { }$/;"	f	class:__normal_iterator	access:public	signature:()
__normal_iterator	stl/stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }$/;"	f	class:__normal_iterator	access:public	signature:(const _Iterator& __i)
__normal_iterator	stl/stl_iterator.h	/^    class __normal_iterator$/;"	c
__normal_iterator::_M_current	stl/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:__normal_iterator	access:protected
__normal_iterator::__normal_iterator	stl/stl_iterator.h	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	f	class:__normal_iterator	access:public	signature:(const __normal_iterator<_Iter, typename __enable_if< (std::__are_same<_Iter, typename _Container::pointer>::__value), _Container>::__type>& __i)
__normal_iterator::__normal_iterator	stl/stl_iterator.h	/^      __normal_iterator() : _M_current(_Iterator()) { }$/;"	f	class:__normal_iterator	access:public	signature:()
__normal_iterator::__normal_iterator	stl/stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }$/;"	f	class:__normal_iterator	access:public	signature:(const _Iterator& __i)
__normal_iterator::base	stl/stl_iterator.h	/^      base() const$/;"	f	class:__normal_iterator	access:public	signature:() const
__normal_iterator::difference_type	stl/stl_iterator.h	/^                                                             difference_type;$/;"	t	class:__normal_iterator	access:public
__normal_iterator::iterator_category	stl/stl_iterator.h	/^                                                             iterator_category;$/;"	t	class:__normal_iterator	access:public
__normal_iterator::operator *	stl/stl_iterator.h	/^      operator*() const$/;"	f	class:__normal_iterator	access:public	signature:() const
__normal_iterator::operator +	stl/stl_iterator.h	/^      operator+(const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
__normal_iterator::operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:__normal_iterator	access:public	signature:()
__normal_iterator::operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:__normal_iterator	access:public	signature:(int)
__normal_iterator::operator +=	stl/stl_iterator.h	/^      operator+=(const difference_type& __n)$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n)
__normal_iterator::operator -	stl/stl_iterator.h	/^      operator-(const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
__normal_iterator::operator --	stl/stl_iterator.h	/^      operator--()$/;"	f	class:__normal_iterator	access:public	signature:()
__normal_iterator::operator --	stl/stl_iterator.h	/^      operator--(int)$/;"	f	class:__normal_iterator	access:public	signature:(int)
__normal_iterator::operator -=	stl/stl_iterator.h	/^      operator-=(const difference_type& __n)$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n)
__normal_iterator::operator ->	stl/stl_iterator.h	/^      operator->() const$/;"	f	class:__normal_iterator	access:public	signature:() const
__normal_iterator::operator []	stl/stl_iterator.h	/^      operator[](const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
__normal_iterator::pointer	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer   pointer;$/;"	t	class:__normal_iterator	access:public
__normal_iterator::reference	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference reference;$/;"	t	class:__normal_iterator	access:public
__normal_iterator::value_type	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::value_type  value_type;$/;"	t	class:__normal_iterator	access:public
__partition	stl/stl_algo.h	/^    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag)
__partition	stl/stl_algo.h	/^    __partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag)
__pop_heap	stl/stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value)
__pop_heap	stl/stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp)
__push_heap	stl/stl_heap.h	/^    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)
__push_heap	stl/stl_heap.h	/^    __push_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)
__rb_verify	stl/stl_tree.h	/^      __rb_verify() const;$/;"	p	class:std::_Rb_tree	access:public	signature:() const
__rb_verify	stl/stl_tree.h	/^    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:std::_Rb_tree	signature:() const
__reverse	stl/stl_algo.h	/^    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)
__reverse	stl/stl_algo.h	/^    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
__rotate	stl/stl_algo.h	/^    __rotate(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, bidirectional_iterator_tag)
__rotate	stl/stl_algo.h	/^    __rotate(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, forward_iterator_tag)
__rotate	stl/stl_algo.h	/^    __rotate(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, random_access_iterator_tag)
__rotate_adaptive	stl/stl_algo.h	/^    __rotate_adaptive(_BidirectionalIterator1 __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first, _BidirectionalIterator1 __middle, _BidirectionalIterator1 __last, _Distance __len1, _Distance __len2, _BidirectionalIterator2 __buffer, _Distance __buffer_size)
__search_n	stl/stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred, std::forward_iterator_tag)
__search_n	stl/stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, std::forward_iterator_tag)
__search_n	stl/stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
__search_n	stl/stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp& __val, std::random_access_iterator_tag)
__stable_partition_adaptive	stl/stl_algo.h	/^    __stable_partition_adaptive(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)
__stable_sort_adaptive	stl/stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size)
__stable_sort_adaptive	stl/stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
__unguarded_insertion_sort	stl/stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
__unguarded_insertion_sort	stl/stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
__unguarded_linear_insert	stl/stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)$/;"	f	namespace:std	signature:(_RandomAccessIterator __last, _Tp __val)
__unguarded_linear_insert	stl/stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,$/;"	f	namespace:std	signature:(_RandomAccessIterator __last, _Tp __val, _Compare __comp)
__unguarded_partition	stl/stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot)
__unguarded_partition	stl/stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot, _Compare __comp)
__uninitialized_copy_a	stl/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator __alloc)
__uninitialized_copy_a	stl/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator<_Tp>)
__uninitialized_copy_aux	stl/stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, __false_type)
__uninitialized_copy_aux	stl/stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, __true_type)
__uninitialized_copy_copy	stl/stl_uninitialized.h	/^    __uninitialized_copy_copy(_InputIterator1 __first1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator __alloc)
__uninitialized_copy_fill	stl/stl_uninitialized.h	/^    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp& __x, _Allocator __alloc)
__uninitialized_fill_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, _Allocator __alloc)
__uninitialized_fill_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, allocator<_Tp2>)
__uninitialized_fill_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, __false_type)
__uninitialized_fill_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, __true_type)
__uninitialized_fill_copy	stl/stl_uninitialized.h	/^    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,$/;"	f	namespace:std	signature:(_ForwardIterator __result, _ForwardIterator __mid, const _Tp& __x, _InputIterator __first, _InputIterator __last, _Allocator __alloc)
__uninitialized_fill_n_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, _Allocator __alloc)
__uninitialized_fill_n_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, allocator<_Tp2>)
__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, __false_type)
__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, __true_type)
__unique_copy	stl/stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag)
__unique_copy	stl/stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, forward_iterator_tag, output_iterator_tag)
__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag)
__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, input_iterator_tag, forward_iterator_tag)
__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag)
__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, input_iterator_tag, output_iterator_tag)
accumulate	stl/stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init)
accumulate	stl/stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)
adjacent_difference	stl/stl_numeric.h	/^    adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
adjacent_difference	stl/stl_numeric.h	/^    adjacent_difference(_InputIterator __first,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
adjacent_find	stl/stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
adjacent_find	stl/stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
advance	stl/stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n)
allocator_type	stl/stl_bvector.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::_Bvector_base	access:public
allocator_type	stl/stl_bvector.h	/^    typedef _Alloc                        		 allocator_type;$/;"	t	class:std::vector	access:public
allocator_type	stl/stl_deque.h	/^      typedef _Alloc                             allocator_type;$/;"	t	class:std::deque	access:public
allocator_type	stl/stl_deque.h	/^      typedef _Alloc                  allocator_type;$/;"	t	class:std::_Deque_base	access:public
allocator_type	stl/stl_list.h	/^      typedef _Alloc                                     allocator_type;$/;"	t	class:std::list	access:public
allocator_type	stl/stl_list.h	/^      typedef _Alloc allocator_type;$/;"	t	class:std::_List_base	access:public
allocator_type	stl/stl_map.h	/^      typedef _Alloc                                        allocator_type;$/;"	t	class:std::map	access:public
allocator_type	stl/stl_multimap.h	/^      typedef _Alloc                                        allocator_type;$/;"	t	class:std::multimap	access:public
allocator_type	stl/stl_multiset.h	/^      typedef _Alloc   allocator_type;$/;"	t	class:std::multiset	access:public
allocator_type	stl/stl_set.h	/^      typedef _Alloc   allocator_type;$/;"	t	class:std::set	access:public
allocator_type	stl/stl_tree.h	/^      typedef _Alloc allocator_type;$/;"	t	class:std::_Rb_tree	access:public
allocator_type	stl/stl_vector.h	/^      typedef _Alloc                        		 allocator_type;$/;"	t	class:std::vector	access:public
allocator_type	stl/stl_vector.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::_Vector_base	access:public
argument_type	stl/stl_function.h	/^      typedef _Arg argument_type;   \/\/\/< @c argument_type is the type of the$/;"	t	struct:std::unary_function	access:public
assign	stl/stl_bvector.h	/^      assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_bvector.h	/^    assign(size_type __n, const bool& __x)$/;"	f	class:std::vector	access:public	signature:(size_type __n, const bool& __x)
assign	stl/stl_deque.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_deque.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __val)
assign	stl/stl_list.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_list.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::list	access:public	signature:(size_type __n, const value_type& __val)
assign	stl/stl_vector.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_vector.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::vector	access:public	signature:(size_type __n, const value_type& __val)
at	stl/stl_bvector.h	/^    at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
at	stl/stl_bvector.h	/^    at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
at	stl/stl_deque.h	/^      at(size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
at	stl/stl_deque.h	/^      at(size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
at	stl/stl_map.h	/^      at(const key_type& __k) const$/;"	f	class:std::map	access:public	signature:(const key_type& __k) const
at	stl/stl_map.h	/^      at(const key_type& __k)$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
at	stl/stl_vector.h	/^      at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
at	stl/stl_vector.h	/^      at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
back	stl/stl_bvector.h	/^    back() const$/;"	f	class:std::vector	access:public	signature:() const
back	stl/stl_bvector.h	/^    back()$/;"	f	class:std::vector	access:public	signature:()
back	stl/stl_deque.h	/^      back() const$/;"	f	class:std::deque	access:public	signature:() const
back	stl/stl_deque.h	/^      back()$/;"	f	class:std::deque	access:public	signature:()
back	stl/stl_list.h	/^      back() const$/;"	f	class:std::list	access:public	signature:() const
back	stl/stl_list.h	/^      back()$/;"	f	class:std::list	access:public	signature:()
back	stl/stl_queue.h	/^      back() const$/;"	f	class:std::queue	access:public	signature:() const
back	stl/stl_queue.h	/^      back()$/;"	f	class:std::queue	access:public	signature:()
back	stl/stl_vector.h	/^      back() const$/;"	f	class:std::vector	access:public	signature:() const
back	stl/stl_vector.h	/^      back()$/;"	f	class:std::vector	access:public	signature:()
back_insert_iterator	stl/stl_iterator.h	/^      back_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::back_insert_iterator	access:public	signature:(_Container& __x)
back_insert_iterator	stl/stl_iterator.h	/^    class back_insert_iterator$/;"	c	namespace:std	inherits:iterator
back_inserter	stl/stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	f	namespace:std	signature:(_Container& __x)
base	stl/stl_iterator.h	/^      base() const$/;"	f	class:__normal_iterator	access:public	signature:() const
base	stl/stl_iterator.h	/^      base() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
begin	stl/stl_bvector.h	/^    begin() const$/;"	f	class:std::vector	access:public	signature:() const
begin	stl/stl_bvector.h	/^    begin()$/;"	f	class:std::vector	access:public	signature:()
begin	stl/stl_deque.h	/^      begin() const$/;"	f	class:std::deque	access:public	signature:() const
begin	stl/stl_deque.h	/^      begin()$/;"	f	class:std::deque	access:public	signature:()
begin	stl/stl_list.h	/^      begin() const$/;"	f	class:std::list	access:public	signature:() const
begin	stl/stl_list.h	/^      begin()$/;"	f	class:std::list	access:public	signature:()
begin	stl/stl_map.h	/^      begin() const$/;"	f	class:std::map	access:public	signature:() const
begin	stl/stl_map.h	/^      begin()$/;"	f	class:std::map	access:public	signature:()
begin	stl/stl_multimap.h	/^      begin() const$/;"	f	class:std::multimap	access:public	signature:() const
begin	stl/stl_multimap.h	/^      begin()$/;"	f	class:std::multimap	access:public	signature:()
begin	stl/stl_multiset.h	/^      begin() const$/;"	f	class:std::multiset	access:public	signature:() const
begin	stl/stl_set.h	/^      begin() const$/;"	f	class:std::set	access:public	signature:() const
begin	stl/stl_tempbuf.h	/^      begin()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
begin	stl/stl_tree.h	/^      begin() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
begin	stl/stl_tree.h	/^      begin()$/;"	f	class:std::_Rb_tree	access:public	signature:()
begin	stl/stl_vector.h	/^      begin() const$/;"	f	class:std::vector	access:public	signature:() const
begin	stl/stl_vector.h	/^      begin()$/;"	f	class:std::vector	access:public	signature:()
bidirectional_iterator_tag	stl/stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	s	namespace:std	inherits:forward_iterator_tag
binary_function	stl/stl_function.h	/^    struct binary_function$/;"	s	namespace:std
binary_negate	stl/stl_function.h	/^      binary_negate(const _Predicate& __x)$/;"	f	class:std::binary_negate	access:public	signature:(const _Predicate& __x)
binary_negate	stl/stl_function.h	/^    class binary_negate$/;"	c	namespace:std	inherits:binary_function
binary_search	stl/stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
binary_search	stl/stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
bind1st	stl/stl_function.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
bind2nd	stl/stl_function.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
binder1st	stl/stl_function.h	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation& __x, const typename _Operation::first_argument_type& __y)
binder1st	stl/stl_function.h	/^    class binder1st$/;"	c	namespace:std	inherits:unary_function
binder2nd	stl/stl_function.h	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation& __x, const typename _Operation::second_argument_type& __y)
binder2nd	stl/stl_function.h	/^    class binder2nd$/;"	c	namespace:std	inherits:unary_function
c	stl/stl_queue.h	/^      _Sequence  c;$/;"	m	class:std::priority_queue	access:protected
c	stl/stl_queue.h	/^      _Sequence c;$/;"	m	class:std::queue	access:protected
c	stl/stl_stack.h	/^      _Sequence c;$/;"	m	class:std::stack	access:protected
capacity	stl/stl_bvector.h	/^    capacity() const$/;"	f	class:std::vector	access:public	signature:() const
capacity	stl/stl_vector.h	/^      capacity() const$/;"	f	class:std::vector	access:public	signature:() const
clear	stl/stl_bvector.h	/^    clear()$/;"	f	class:std::vector	access:public	signature:()
clear	stl/stl_deque.h	/^      clear()$/;"	f	class:std::deque	access:public	signature:()
clear	stl/stl_list.h	/^      clear()$/;"	f	class:std::list	access:public	signature:()
clear	stl/stl_map.h	/^      clear()$/;"	f	class:std::map	access:public	signature:()
clear	stl/stl_multimap.h	/^      clear()$/;"	f	class:std::multimap	access:public	signature:()
clear	stl/stl_multiset.h	/^      clear()$/;"	f	class:std::multiset	access:public	signature:()
clear	stl/stl_set.h	/^      clear()$/;"	f	class:std::set	access:public	signature:()
clear	stl/stl_tree.h	/^      clear()$/;"	f	class:std::_Rb_tree	access:public	signature:()
clear	stl/stl_vector.h	/^      clear()$/;"	f	class:std::vector	access:public	signature:()
comp	stl/stl_map.h	/^	_Compare comp;$/;"	m	class:std::map::value_compare	access:protected
comp	stl/stl_multimap.h	/^	_Compare comp;$/;"	m	class:std::multimap::value_compare	access:protected
comp	stl/stl_queue.h	/^      _Compare   comp;$/;"	m	class:std::priority_queue	access:protected
const_iterator	stl/stl_bvector.h	/^    typedef _Bit_const_iterator                          const_iterator;$/;"	t	class:std::vector	access:public
const_iterator	stl/stl_bvector.h	/^    typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:std::_Bit_const_iterator	access:public
const_iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:std::_Deque_base	access:public
const_iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:std::_Deque_iterator	access:public
const_iterator	stl/stl_deque.h	/^      typedef typename _Base::const_iterator             const_iterator;$/;"	t	class:std::deque	access:public
const_iterator	stl/stl_list.h	/^      typedef _List_const_iterator<_Tp>                  const_iterator;$/;"	t	class:std::list	access:public
const_iterator	stl/stl_map.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	t	class:std::map	access:public
const_iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	t	class:std::multimap	access:public
const_iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	t	class:std::multiset	access:public
const_iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	t	class:std::set	access:public
const_iterator	stl/stl_tree.h	/^      typedef _Rb_tree_const_iterator<value_type> const_iterator;$/;"	t	class:std::_Rb_tree	access:public
const_iterator	stl/stl_vector.h	/^      const_iterator;$/;"	t	class:std::vector	access:public
const_mem_fun1_ref_t	stl/stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
const_mem_fun1_t	stl/stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
const_mem_fun_ref_t	stl/stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function
const_mem_fun_t	stl/stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function
const_pointer	stl/stl_bvector.h	/^    typedef const bool*                                  const_pointer;$/;"	t	class:std::vector	access:public
const_pointer	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::deque	access:public
const_pointer	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::list	access:public
const_pointer	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	t	class:std::map	access:public
const_pointer	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	t	class:std::multimap	access:public
const_pointer	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	t	class:std::multiset	access:public
const_pointer	stl/stl_set.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	t	class:std::set	access:public
const_pointer	stl/stl_tree.h	/^      typedef const value_type* const_pointer;$/;"	t	class:std::_Rb_tree	access:public
const_pointer	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::vector	access:public
const_reference	stl/stl_bvector.h	/^    typedef bool                                         const_reference;$/;"	t	class:std::vector	access:public
const_reference	stl/stl_bvector.h	/^    typedef bool                 const_reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
const_reference	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::deque	access:public
const_reference	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::list	access:public
const_reference	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	t	class:std::map	access:public
const_reference	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	t	class:std::multimap	access:public
const_reference	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	t	class:std::multiset	access:public
const_reference	stl/stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::priority_queue	access:public
const_reference	stl/stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::queue	access:public
const_reference	stl/stl_set.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	t	class:std::set	access:public
const_reference	stl/stl_stack.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::stack	access:public
const_reference	stl/stl_tree.h	/^      typedef const value_type& const_reference;$/;"	t	class:std::_Rb_tree	access:public
const_reference	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::vector	access:public
const_reverse_iterator	stl/stl_bvector.h	/^    typedef std::reverse_iterator<const_iterator>        const_reverse_iterator;$/;"	t	class:std::vector	access:public
const_reverse_iterator	stl/stl_deque.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:std::deque	access:public
const_reverse_iterator	stl/stl_list.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:std::list	access:public
const_reverse_iterator	stl/stl_map.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::map	access:public
const_reverse_iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::multimap	access:public
const_reverse_iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	t	class:std::multiset	access:public
const_reverse_iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	t	class:std::set	access:public
const_reverse_iterator	stl/stl_tree.h	/^      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
const_reverse_iterator	stl/stl_vector.h	/^      typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:std::vector	access:public
container	stl/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	access:protected
container	stl/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	access:protected
container	stl/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::insert_iterator	access:protected
container_type	stl/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	access:public
container_type	stl/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	access:public
container_type	stl/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
container_type	stl/stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::priority_queue	access:public
container_type	stl/stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::queue	access:public
container_type	stl/stl_stack.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::stack	access:public
copy	stl/stl_algobase.h	/^        copy(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy	access:public	signature:(_II __first, _II __last, _OI __result)
copy	stl/stl_algobase.h	/^        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
copy	stl/stl_algobase.h	/^    copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
copy	stl/stl_algobase.h	/^    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>)
copy_backward	stl/stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
count	stl/stl_algo.h	/^    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __value)
count	stl/stl_map.h	/^      count(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
count	stl/stl_multimap.h	/^      count(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
count	stl/stl_multiset.h	/^      count(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
count	stl/stl_set.h	/^      count(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
count	stl/stl_tree.h	/^      count(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
count	stl/stl_tree.h	/^    count(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
count_if	stl/stl_algo.h	/^    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred)
current	stl/stl_iterator.h	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	access:protected
data	stl/stl_bvector.h	/^    data() { }$/;"	f	class:std::vector	access:public	signature:()
data	stl/stl_vector.h	/^      data() const$/;"	f	class:std::vector	access:public	signature:() const
data	stl/stl_vector.h	/^      data()$/;"	f	class:std::vector	access:public	signature:()
deque	stl/stl_deque.h	/^        deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^      deque(const allocator_type& __a = allocator_type())$/;"	f	class:std::deque	access:public	signature:(const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^      deque(const deque& __x)$/;"	f	class:std::deque	access:public	signature:(const deque& __x)
deque	stl/stl_deque.h	/^      deque(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^    class deque : protected _Deque_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_Deque_base
difference_type	stl/stl_bvector.h	/^    typedef ptrdiff_t                                    difference_type;$/;"	t	class:std::vector	access:public
difference_type	stl/stl_deque.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	class:std::deque	access:public
difference_type	stl/stl_deque.h	/^      typedef ptrdiff_t                       difference_type;$/;"	t	struct:std::_Deque_iterator	access:public
difference_type	stl/stl_iterator.h	/^							       difference_type;$/;"	t	class:std::reverse_iterator	access:public
difference_type	stl/stl_iterator.h	/^                                                             difference_type;$/;"	t	class:__normal_iterator	access:public
difference_type	stl/stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	t	struct:std::iterator	access:public
difference_type	stl/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	access:public
difference_type	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	access:public
difference_type	stl/stl_list.h	/^      typedef ptrdiff_t                                  difference_type;$/;"	t	class:std::list	access:public
difference_type	stl/stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	struct:std::_List_const_iterator	access:public
difference_type	stl/stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	struct:std::_List_iterator	access:public
difference_type	stl/stl_map.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	t	class:std::map	access:public
difference_type	stl/stl_multimap.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	t	class:std::multimap	access:public
difference_type	stl/stl_multiset.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	t	class:std::multiset	access:public
difference_type	stl/stl_set.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	t	class:std::set	access:public
difference_type	stl/stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
difference_type	stl/stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
difference_type	stl/stl_tree.h	/^      typedef ptrdiff_t difference_type;$/;"	t	class:std::_Rb_tree	access:public
difference_type	stl/stl_vector.h	/^      typedef ptrdiff_t					 difference_type;$/;"	t	class:std::vector	access:public
distance	stl/stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last)
divides	stl/stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
empty	stl/stl_bvector.h	/^    empty() const$/;"	f	class:std::vector	access:public	signature:() const
empty	stl/stl_deque.h	/^      empty() const$/;"	f	class:std::deque	access:public	signature:() const
empty	stl/stl_list.h	/^      empty() const$/;"	f	class:std::list	access:public	signature:() const
empty	stl/stl_map.h	/^      empty() const$/;"	f	class:std::map	access:public	signature:() const
empty	stl/stl_multimap.h	/^      empty() const$/;"	f	class:std::multimap	access:public	signature:() const
empty	stl/stl_multiset.h	/^      empty() const$/;"	f	class:std::multiset	access:public	signature:() const
empty	stl/stl_queue.h	/^      empty() const$/;"	f	class:std::priority_queue	access:public	signature:() const
empty	stl/stl_queue.h	/^      empty() const$/;"	f	class:std::queue	access:public	signature:() const
empty	stl/stl_set.h	/^      empty() const$/;"	f	class:std::set	access:public	signature:() const
empty	stl/stl_stack.h	/^      empty() const$/;"	f	class:std::stack	access:public	signature:() const
empty	stl/stl_tree.h	/^      empty() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
empty	stl/stl_vector.h	/^      empty() const$/;"	f	class:std::vector	access:public	signature:() const
end	stl/stl_bvector.h	/^    end() const$/;"	f	class:std::vector	access:public	signature:() const
end	stl/stl_bvector.h	/^    end()$/;"	f	class:std::vector	access:public	signature:()
end	stl/stl_deque.h	/^      end() const$/;"	f	class:std::deque	access:public	signature:() const
end	stl/stl_deque.h	/^      end()$/;"	f	class:std::deque	access:public	signature:()
end	stl/stl_list.h	/^      end() const$/;"	f	class:std::list	access:public	signature:() const
end	stl/stl_list.h	/^      end()$/;"	f	class:std::list	access:public	signature:()
end	stl/stl_map.h	/^      end() const$/;"	f	class:std::map	access:public	signature:() const
end	stl/stl_map.h	/^      end()$/;"	f	class:std::map	access:public	signature:()
end	stl/stl_multimap.h	/^      end() const$/;"	f	class:std::multimap	access:public	signature:() const
end	stl/stl_multimap.h	/^      end()$/;"	f	class:std::multimap	access:public	signature:()
end	stl/stl_multiset.h	/^      end() const$/;"	f	class:std::multiset	access:public	signature:() const
end	stl/stl_set.h	/^      end() const$/;"	f	class:std::set	access:public	signature:() const
end	stl/stl_tempbuf.h	/^      end()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
end	stl/stl_tree.h	/^      end() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
end	stl/stl_tree.h	/^      end()$/;"	f	class:std::_Rb_tree	access:public	signature:()
end	stl/stl_vector.h	/^      end() const$/;"	f	class:std::vector	access:public	signature:() const
end	stl/stl_vector.h	/^      end()$/;"	f	class:std::vector	access:public	signature:()
equal	stl/stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
equal	stl/stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
equal_range	stl/stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
equal_range	stl/stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
equal_range	stl/stl_map.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_map.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
equal_range	stl/stl_multimap.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_multimap.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
equal_range	stl/stl_multiset.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_multiset.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
equal_range	stl/stl_set.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_set.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
equal_range	stl/stl_tree.h	/^      equal_range(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_tree.h	/^      equal_range(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
equal_range	stl/stl_tree.h	/^    equal_range(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
equal_range	stl/stl_tree.h	/^    equal_range(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
equal_to	stl/stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
erase	stl/stl_bvector.h	/^    erase(iterator __first, iterator __last)$/;"	f	class:std::vector	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_bvector.h	/^    erase(iterator __position)$/;"	f	class:std::vector	access:public	signature:(iterator __position)
erase	stl/stl_deque.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::deque	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_deque.h	/^      erase(iterator __position);$/;"	p	class:std::deque	access:public	signature:(iterator __position)
erase	stl/stl_list.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::list	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_list.h	/^      erase(iterator __position);$/;"	p	class:std::list	access:public	signature:(iterator __position)
erase	stl/stl_map.h	/^      erase(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
erase	stl/stl_map.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::map	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_map.h	/^      erase(iterator __position)$/;"	f	class:std::map	access:public	signature:(iterator __position)
erase	stl/stl_multimap.h	/^      erase(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
erase	stl/stl_multimap.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::multimap	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_multimap.h	/^      erase(iterator __position)$/;"	f	class:std::multimap	access:public	signature:(iterator __position)
erase	stl/stl_multiset.h	/^      erase(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
erase	stl/stl_multiset.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::multiset	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_multiset.h	/^      erase(iterator __position)$/;"	f	class:std::multiset	access:public	signature:(iterator __position)
erase	stl/stl_set.h	/^      erase(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
erase	stl/stl_set.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::set	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_set.h	/^      erase(iterator __position)$/;"	f	class:std::set	access:public	signature:(iterator __position)
erase	stl/stl_tree.h	/^      erase(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
erase	stl/stl_tree.h	/^      erase(const key_type* __first, const key_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type* __first, const key_type* __last)
erase	stl/stl_tree.h	/^      erase(const_iterator __first, const_iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
erase	stl/stl_tree.h	/^      erase(const_iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position)
erase	stl/stl_tree.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_tree.h	/^      erase(iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position)
erase	stl/stl_tree.h	/^    erase(const _Key& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __x)
erase	stl/stl_tree.h	/^    erase(const _Key* __first, const _Key* __last)$/;"	f	class:std::_Rb_tree	signature:(const _Key* __first, const _Key* __last)
erase	stl/stl_tree.h	/^    erase(const_iterator __first, const_iterator __last)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __first, const_iterator __last)
erase	stl/stl_tree.h	/^    erase(const_iterator __position)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position)
erase	stl/stl_tree.h	/^    erase(iterator __first, iterator __last)$/;"	f	class:std::_Rb_tree	signature:(iterator __first, iterator __last)
erase	stl/stl_tree.h	/^    erase(iterator __position)$/;"	f	class:std::_Rb_tree	signature:(iterator __position)
erase	stl/stl_vector.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::vector	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_vector.h	/^      erase(iterator __position);$/;"	p	class:std::vector	access:public	signature:(iterator __position)
fill	stl/stl_algobase.h	/^        fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	struct:std::__fill	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
fill	stl/stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
fill	stl/stl_algobase.h	/^  fill(char* __first, char* __last, const char& __c)$/;"	f	namespace:std	signature:(char* __first, char* __last, const char& __c)
fill	stl/stl_algobase.h	/^  fill(signed char* __first, signed char* __last, const signed char& __c)$/;"	f	namespace:std	signature:(signed char* __first, signed char* __last, const signed char& __c)
fill	stl/stl_algobase.h	/^  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)$/;"	f	namespace:std	signature:(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
fill	stl/stl_bvector.h	/^  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)$/;"	f	namespace:std	signature:(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
fill	stl/stl_deque.h	/^    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,$/;"	p	namespace:std	signature:(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first, const _Deque_iterator<_Tp, _Tp&, _Tp*>& __last, const _Tp& __value)
fill_n	stl/stl_algobase.h	/^        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	struct:std::__fill_n	access:public	signature:(_OutputIterator __first, _Size __n, const _Tp& __value)
fill_n	stl/stl_algobase.h	/^    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	signature:(_OutputIterator __first, _Size __n, const _Tp& __value)
fill_n	stl/stl_algobase.h	/^    fill_n(char* __first, _Size __n, const char& __c)$/;"	f	namespace:std	signature:(char* __first, _Size __n, const char& __c)
fill_n	stl/stl_algobase.h	/^    fill_n(signed char* __first, _Size __n, const signed char& __c)$/;"	f	namespace:std	signature:(signed char* __first, _Size __n, const signed char& __c)
fill_n	stl/stl_algobase.h	/^    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)$/;"	f	namespace:std	signature:(unsigned char* __first, _Size __n, const unsigned char& __c)
find	stl/stl_algo.h	/^    find(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __val)
find	stl/stl_algo.h	/^    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, const _CharT&)
find	stl/stl_map.h	/^      find(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
find	stl/stl_map.h	/^      find(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
find	stl/stl_multimap.h	/^      find(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
find	stl/stl_multimap.h	/^      find(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
find	stl/stl_multiset.h	/^      find(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
find	stl/stl_multiset.h	/^      find(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
find	stl/stl_set.h	/^      find(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
find	stl/stl_set.h	/^      find(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
find	stl/stl_tree.h	/^      find(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
find	stl/stl_tree.h	/^      find(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
find	stl/stl_tree.h	/^    find(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
find	stl/stl_tree.h	/^    find(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
find_end	stl/stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
find_end	stl/stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)
find_first_of	stl/stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)
find_first_of	stl/stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)
find_if	stl/stl_algo.h	/^    find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred)
first	stl/stl_pair.h	/^      _T1 first;                 \/\/\/< @c first is a copy of the first object$/;"	m	struct:std::pair	access:public
first_argument_type	stl/stl_function.h	/^      typedef _Arg1 first_argument_type;   \/\/\/< the type of the first argument$/;"	t	struct:std::binary_function	access:public
first_type	stl/stl_pair.h	/^      typedef _T1 first_type;    \/\/\/<  @c first_type is the first bound type$/;"	t	struct:std::pair	access:public
flip	stl/stl_bvector.h	/^    flip()$/;"	f	class:std::vector	access:public	signature:()
flip	stl/stl_bvector.h	/^    flip()$/;"	f	struct:std::_Bit_reference	access:public	signature:()
for_each	stl/stl_algo.h	/^    for_each(_InputIterator __first, _InputIterator __last, _Function __f)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Function __f)
forward_iterator_tag	stl/stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag {};$/;"	s	namespace:std	inherits:input_iterator_tag
front	stl/stl_bvector.h	/^    front() const$/;"	f	class:std::vector	access:public	signature:() const
front	stl/stl_bvector.h	/^    front()$/;"	f	class:std::vector	access:public	signature:()
front	stl/stl_deque.h	/^      front() const$/;"	f	class:std::deque	access:public	signature:() const
front	stl/stl_deque.h	/^      front()$/;"	f	class:std::deque	access:public	signature:()
front	stl/stl_list.h	/^      front() const$/;"	f	class:std::list	access:public	signature:() const
front	stl/stl_list.h	/^      front()$/;"	f	class:std::list	access:public	signature:()
front	stl/stl_queue.h	/^      front() const$/;"	f	class:std::queue	access:public	signature:() const
front	stl/stl_queue.h	/^      front()$/;"	f	class:std::queue	access:public	signature:()
front	stl/stl_vector.h	/^      front() const$/;"	f	class:std::vector	access:public	signature:() const
front	stl/stl_vector.h	/^      front()$/;"	f	class:std::vector	access:public	signature:()
front_insert_iterator	stl/stl_iterator.h	/^      explicit front_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::front_insert_iterator	access:public	signature:(_Container& __x)
front_insert_iterator	stl/stl_iterator.h	/^    class front_insert_iterator$/;"	c	namespace:std	inherits:iterator
front_inserter	stl/stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	f	namespace:std	signature:(_Container& __x)
generate	stl/stl_algo.h	/^    generate(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)
generate_n	stl/stl_algo.h	/^    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)$/;"	f	namespace:std	signature:(_OutputIterator __first, _Size __n, _Generator __gen)
get_allocator	stl/stl_bvector.h	/^      get_allocator() const$/;"	f	struct:std::_Bvector_base	access:public	signature:() const
get_allocator	stl/stl_bvector.h	/^    allocator_type get_allocator() const$/;"	f	class:std::vector	access:public	signature:() const
get_allocator	stl/stl_deque.h	/^      get_allocator() const$/;"	f	class:std::_Deque_base	access:public	signature:() const
get_allocator	stl/stl_deque.h	/^      get_allocator() const$/;"	f	class:std::deque	access:public	signature:() const
get_allocator	stl/stl_list.h	/^      get_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
get_allocator	stl/stl_list.h	/^      get_allocator() const$/;"	f	class:std::list	access:public	signature:() const
get_allocator	stl/stl_map.h	/^      get_allocator() const$/;"	f	class:std::map	access:public	signature:() const
get_allocator	stl/stl_multimap.h	/^      get_allocator() const$/;"	f	class:std::multimap	access:public	signature:() const
get_allocator	stl/stl_multiset.h	/^      get_allocator() const$/;"	f	class:std::multiset	access:public	signature:() const
get_allocator	stl/stl_set.h	/^      get_allocator() const$/;"	f	class:std::set	access:public	signature:() const
get_allocator	stl/stl_tree.h	/^      get_allocator() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
get_allocator	stl/stl_vector.h	/^      get_allocator() const$/;"	f	struct:std::_Vector_base	access:public	signature:() const
greater	stl/stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
greater_equal	stl/stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
hook	stl/stl_list.h	/^    hook(_List_node_base * const __position);$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base * const __position)
includes	stl/stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
includes	stl/stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)
inner_product	stl/stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)
inner_product	stl/stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)
inplace_merge	stl/stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)
inplace_merge	stl/stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)
input_iterator_tag	stl/stl_iterator_base_types.h	/^  struct input_iterator_tag {};$/;"	s	namespace:std
insert	stl/stl_bvector.h	/^      insert(iterator __position,$/;"	f	class:std::vector	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
insert	stl/stl_bvector.h	/^    insert(iterator __position, const bool& __x = bool())$/;"	f	class:std::vector	access:public	signature:(iterator __position, const bool& __x = bool())
insert	stl/stl_bvector.h	/^    insert(iterator __position, size_type __n, const bool& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __position, size_type __n, const bool& __x)
insert	stl/stl_deque.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::deque	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
insert	stl/stl_deque.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::deque	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_deque.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
insert	stl/stl_list.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::list	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
insert	stl/stl_list.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::list	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_list.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::list	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
insert	stl/stl_map.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_map.h	/^      insert(const value_type& __x)$/;"	f	class:std::map	access:public	signature:(const value_type& __x)
insert	stl/stl_map.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::map	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_multimap.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_multimap.h	/^      insert(const value_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const value_type& __x)
insert	stl/stl_multimap.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::multimap	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_multiset.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_multiset.h	/^      insert(const value_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const value_type& __x)
insert	stl/stl_multiset.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::multiset	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_set.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_set.h	/^      insert(const value_type& __x)$/;"	f	class:std::set	access:public	signature:(const value_type& __x)
insert	stl/stl_set.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::set	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_vector.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::vector	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
insert	stl/stl_vector.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::vector	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_vector.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
insert_iterator	stl/stl_iterator.h	/^      insert_iterator(_Container& __x, typename _Container::iterator __i)$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
insert_iterator	stl/stl_iterator.h	/^    class insert_iterator$/;"	c	namespace:std	inherits:iterator
inserter	stl/stl_iterator.h	/^    inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std	signature:(_Container& __x, _Iterator __i)
iter	stl/stl_iterator.h	/^      typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
iter_swap	stl/stl_algobase.h	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	access:public	signature:(_ForwardIterator1 __a, _ForwardIterator2 __b)
iter_swap	stl/stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std	signature:(_ForwardIterator1 __a, _ForwardIterator2 __b)
iterator	stl/stl_bvector.h	/^    typedef _Bit_iterator                                iterator;$/;"	t	class:std::vector	access:public
iterator	stl/stl_bvector.h	/^    typedef _Bit_iterator   iterator;$/;"	t	struct:std::_Bit_iterator	access:public
iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:std::_Deque_base	access:public
iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:std::_Deque_iterator	access:public
iterator	stl/stl_deque.h	/^      typedef typename _Base::iterator                   iterator;$/;"	t	class:std::deque	access:public
iterator	stl/stl_iterator_base_types.h	/^    struct iterator$/;"	s	namespace:std
iterator	stl/stl_list.h	/^      typedef _List_iterator<_Tp>                        iterator;$/;"	t	class:std::list	access:public
iterator	stl/stl_list.h	/^      typedef _List_iterator<_Tp>                iterator;$/;"	t	struct:std::_List_const_iterator	access:public
iterator	stl/stl_map.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	t	class:std::map	access:public
iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	t	class:std::multimap	access:public
iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	t	class:std::multiset	access:public
iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	t	class:std::set	access:public
iterator	stl/stl_tempbuf.h	/^      typedef pointer     iterator;$/;"	t	class:std::_Temporary_buffer	access:public
iterator	stl/stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp> iterator;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
iterator	stl/stl_tree.h	/^      typedef _Rb_tree_iterator<value_type>       iterator;$/;"	t	class:std::_Rb_tree	access:public
iterator	stl/stl_vector.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;$/;"	t	class:std::vector	access:public
iterator_category	stl/stl_deque.h	/^      typedef std::random_access_iterator_tag iterator_category;$/;"	t	struct:std::_Deque_iterator	access:public
iterator_category	stl/stl_iterator.h	/^                                                             iterator_category;$/;"	t	class:__normal_iterator	access:public
iterator_category	stl/stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	t	struct:std::iterator	access:public
iterator_category	stl/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	access:public
iterator_category	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	access:public
iterator_category	stl/stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	t	struct:std::_List_const_iterator	access:public
iterator_category	stl/stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	t	struct:std::_List_iterator	access:public
iterator_category	stl/stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
iterator_category	stl/stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_iterator	access:public
iterator_traits	stl/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std
iterator_traits	stl/stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std
iterator_traits	stl/stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std
iterator_type	stl/stl_iterator.h	/^      typedef _Iterator					       iterator_type;$/;"	t	class:std::reverse_iterator	access:public
key_comp	stl/stl_map.h	/^      key_comp() const$/;"	f	class:std::map	access:public	signature:() const
key_comp	stl/stl_multimap.h	/^      key_comp() const$/;"	f	class:std::multimap	access:public	signature:() const
key_comp	stl/stl_multiset.h	/^      key_comp() const$/;"	f	class:std::multiset	access:public	signature:() const
key_comp	stl/stl_set.h	/^      key_comp() const$/;"	f	class:std::set	access:public	signature:() const
key_comp	stl/stl_tree.h	/^      key_comp() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
key_compare	stl/stl_map.h	/^      typedef _Compare                                      key_compare;$/;"	t	class:std::map	access:public
key_compare	stl/stl_multimap.h	/^      typedef _Compare                                      key_compare;$/;"	t	class:std::multimap	access:public
key_compare	stl/stl_multiset.h	/^      typedef _Compare key_compare;$/;"	t	class:std::multiset	access:public
key_compare	stl/stl_set.h	/^      typedef _Compare key_compare;$/;"	t	class:std::set	access:public
key_type	stl/stl_map.h	/^      typedef _Key                                          key_type;$/;"	t	class:std::map	access:public
key_type	stl/stl_multimap.h	/^      typedef _Key                                          key_type;$/;"	t	class:std::multimap	access:public
key_type	stl/stl_multiset.h	/^      typedef _Key     key_type;$/;"	t	class:std::multiset	access:public
key_type	stl/stl_set.h	/^      typedef _Key     key_type;$/;"	t	class:std::set	access:public
key_type	stl/stl_tree.h	/^      typedef _Key key_type;$/;"	t	class:std::_Rb_tree	access:public
less	stl/stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
less_equal	stl/stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
lexicographical_compare	stl/stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
lexicographical_compare	stl/stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)
lexicographical_compare	stl/stl_algobase.h	/^  lexicographical_compare(const char* __first1, const char* __last1,$/;"	f	namespace:std	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
lexicographical_compare	stl/stl_algobase.h	/^  lexicographical_compare(const unsigned char* __first1,$/;"	f	namespace:std	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
list	stl/stl_list.h	/^        list(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^      list(const allocator_type& __a = allocator_type())$/;"	f	class:std::list	access:public	signature:(const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^      list(const list& __x)$/;"	f	class:std::list	access:public	signature:(const list& __x)
list	stl/stl_list.h	/^      list(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::list	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^    class list : protected _List_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_List_base
logical_and	stl/stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
logical_not	stl/stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	inherits:unary_function
logical_or	stl/stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
lower_bound	stl/stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
lower_bound	stl/stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
lower_bound	stl/stl_map.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_map.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
lower_bound	stl/stl_multimap.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_multimap.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
lower_bound	stl/stl_multiset.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_multiset.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
lower_bound	stl/stl_set.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_set.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
lower_bound	stl/stl_tree.h	/^      lower_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_tree.h	/^      lower_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
lower_bound	stl/stl_tree.h	/^    lower_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
lower_bound	stl/stl_tree.h	/^    lower_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
make_heap	stl/stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
make_heap	stl/stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
make_pair	stl/stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std	signature:(_T1 __x, _T2 __y)
map	stl/stl_map.h	/^        map(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
map	stl/stl_map.h	/^        map(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map	stl/stl_map.h	/^      map()$/;"	f	class:std::map	access:public	signature:()
map	stl/stl_map.h	/^      map(const _Compare& __comp, const allocator_type& __a = allocator_type())$/;"	f	class:std::map	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
map	stl/stl_map.h	/^      map(const map& __x)$/;"	f	class:std::map	access:public	signature:(const map& __x)
map	stl/stl_map.h	/^    class map$/;"	c	namespace:std
mapped_type	stl/stl_map.h	/^      typedef _Tp                                           mapped_type;$/;"	t	class:std::map	access:public
mapped_type	stl/stl_multimap.h	/^      typedef _Tp                                           mapped_type;$/;"	t	class:std::multimap	access:public
max	stl/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
max	stl/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
max_element	stl/stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
max_element	stl/stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
max_size	stl/stl_bvector.h	/^    max_size() const$/;"	f	class:std::vector	access:public	signature:() const
max_size	stl/stl_deque.h	/^      max_size() const$/;"	f	class:std::deque	access:public	signature:() const
max_size	stl/stl_list.h	/^      max_size() const$/;"	f	class:std::list	access:public	signature:() const
max_size	stl/stl_map.h	/^      max_size() const$/;"	f	class:std::map	access:public	signature:() const
max_size	stl/stl_multimap.h	/^      max_size() const$/;"	f	class:std::multimap	access:public	signature:() const
max_size	stl/stl_multiset.h	/^      max_size() const$/;"	f	class:std::multiset	access:public	signature:() const
max_size	stl/stl_set.h	/^      max_size() const$/;"	f	class:std::set	access:public	signature:() const
max_size	stl/stl_tree.h	/^      max_size() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
max_size	stl/stl_vector.h	/^      max_size() const$/;"	f	class:std::vector	access:public	signature:() const
mem_fun1_ref_t	stl/stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
mem_fun1_t	stl/stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
mem_fun_ref_t	stl/stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function
mem_fun_t	stl/stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function
merge	stl/stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
merge	stl/stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
merge	stl/stl_list.h	/^        merge(list&, _StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(list&, _StrictWeakOrdering)
merge	stl/stl_list.h	/^      merge(list& __x);$/;"	p	class:std::list	access:public	signature:(list& __x)
min	stl/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
min	stl/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
min_element	stl/stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
min_element	stl/stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
minus	stl/stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
mismatch	stl/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
mismatch	stl/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
modulus	stl/stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
multimap	stl/stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
multimap	stl/stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	stl/stl_multimap.h	/^      multimap()$/;"	f	class:std::multimap	access:public	signature:()
multimap	stl/stl_multimap.h	/^      multimap(const _Compare& __comp,$/;"	f	class:std::multimap	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	stl/stl_multimap.h	/^      multimap(const multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(const multimap& __x)
multimap	stl/stl_multimap.h	/^    class multimap$/;"	c	namespace:std
multiplies	stl/stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
multiset	stl/stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
multiset	stl/stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	stl/stl_multiset.h	/^      multiset()$/;"	f	class:std::multiset	access:public	signature:()
multiset	stl/stl_multiset.h	/^      multiset(const _Compare& __comp,$/;"	f	class:std::multiset	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	stl/stl_multiset.h	/^      multiset(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
multiset	stl/stl_multiset.h	/^    class multiset$/;"	c	namespace:std
negate	stl/stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function
next_permutation	stl/stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
next_permutation	stl/stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
not1	stl/stl_function.h	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
not2	stl/stl_function.h	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
not_equal_to	stl/stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
nth_element	stl/stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)
nth_element	stl/stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)
op	stl/stl_function.h	/^      _Operation op;$/;"	m	class:std::binder1st	access:protected
op	stl/stl_function.h	/^      _Operation op;$/;"	m	class:std::binder2nd	access:protected
operator !=	stl/stl_bvector.h	/^    operator!=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator !=	stl/stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator !=	stl/stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator !=	stl/stl_deque.h	/^    operator!=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator !=	stl/stl_iterator.h	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator !=	stl/stl_iterator.h	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator !=	stl/stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator !=	stl/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator !=	stl/stl_list.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _Self& __x) const
operator !=	stl/stl_list.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_List_iterator	access:public	signature:(const _Self& __x) const
operator !=	stl/stl_list.h	/^    operator!=(const _List_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _List_iterator<_Val>& __x, const _List_const_iterator<_Val>& __y)
operator !=	stl/stl_list.h	/^    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator !=	stl/stl_map.h	/^    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator !=	stl/stl_multimap.h	/^    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator !=	stl/stl_multiset.h	/^    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator !=	stl/stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator !=	stl/stl_queue.h	/^    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator !=	stl/stl_relops.h	/^      operator!=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
operator !=	stl/stl_set.h	/^    operator!=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator !=	stl/stl_stack.h	/^    operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator !=	stl/stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const _Self& __x) const
operator !=	stl/stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const _Self& __x) const
operator !=	stl/stl_tree.h	/^    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator !=	stl/stl_tree.h	/^    operator!=(const _Rb_tree_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Val>& __x, const _Rb_tree_const_iterator<_Val>& __y)
operator !=	stl/stl_vector.h	/^    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator ()	stl/stl_function.h	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Arg __x) const
operator ()	stl/stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Arg1 __x, _Arg2 __y) const
operator ()	stl/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st	access:public	signature:(_Pair& __x) const
operator ()	stl/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd	access:public	signature:(_Pair& __x) const
operator ()	stl/stl_function.h	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp& __r) const
operator ()	stl/stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
operator ()	stl/stl_function.h	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity	access:public	signature:(_Tp& __x) const
operator ()	stl/stl_function.h	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp* __p) const
operator ()	stl/stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
operator ()	stl/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st	access:public	signature:(const _Pair& __x) const
operator ()	stl/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd	access:public	signature:(const _Pair& __x) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity	access:public	signature:(const _Tp& __x) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not	access:public	signature:(const _Tp& __x) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate	access:public	signature:(const _Tp& __x) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t	access:public	signature:(const _Tp* __p) const
operator ()	stl/stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
operator ()	stl/stl_function.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	access:public	signature:(const typename _Operation::first_argument_type& __x) const
operator ()	stl/stl_function.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	access:public	signature:(const typename _Operation::second_argument_type& __x) const
operator ()	stl/stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate	access:public	signature:(const typename _Predicate::argument_type& __x) const
operator ()	stl/stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate	access:public	signature:(const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const
operator ()	stl/stl_function.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	access:public	signature:(typename _Operation::first_argument_type& __x) const
operator ()	stl/stl_function.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	access:public	signature:(typename _Operation::second_argument_type& __x) const
operator ()	stl/stl_map.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	f	class:std::map::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
operator ()	stl/stl_multimap.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	f	class:std::multimap::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
operator *	stl/stl_bvector.h	/^    operator*() const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:() const
operator *	stl/stl_bvector.h	/^    operator*() const$/;"	f	struct:std::_Bit_iterator	access:public	signature:() const
operator *	stl/stl_deque.h	/^      operator*() const$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^      operator*() const$/;"	f	class:__normal_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^      operator*() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^      operator*()$/;"	f	class:std::back_insert_iterator	access:public	signature:()
operator *	stl/stl_iterator.h	/^      operator*()$/;"	f	class:std::front_insert_iterator	access:public	signature:()
operator *	stl/stl_iterator.h	/^      operator*()$/;"	f	class:std::insert_iterator	access:public	signature:()
operator *	stl/stl_list.h	/^      operator*() const$/;"	f	struct:std::_List_const_iterator	access:public	signature:() const
operator *	stl/stl_list.h	/^      operator*() const$/;"	f	struct:std::_List_iterator	access:public	signature:() const
operator *	stl/stl_raw_storage_iter.h	/^      operator*() { return *this; }$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
operator *	stl/stl_tree.h	/^      operator*() const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:() const
operator *	stl/stl_tree.h	/^      operator*() const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
operator +	stl/stl_bvector.h	/^    operator+(difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator +	stl/stl_bvector.h	/^    operator+(difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator +	stl/stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_const_iterator& __x)
operator +	stl/stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_iterator& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_iterator& __x)
operator +	stl/stl_deque.h	/^      operator+(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator +	stl/stl_deque.h	/^    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
operator +	stl/stl_iterator.h	/^      operator+(const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
operator +	stl/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator +	stl/stl_iterator.h	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	signature:(typename __normal_iterator<_Iterator, _Container>::difference_type __n, const __normal_iterator<_Iterator, _Container>& __i)
operator +	stl/stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	signature:(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator>& __x)
operator ++	stl/stl_bvector.h	/^    operator++()$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
operator ++	stl/stl_bvector.h	/^    operator++()$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
operator ++	stl/stl_bvector.h	/^    operator++(int)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
operator ++	stl/stl_bvector.h	/^    operator++(int)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
operator ++	stl/stl_deque.h	/^      operator++()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
operator ++	stl/stl_deque.h	/^      operator++(int)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:__normal_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::back_insert_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::front_insert_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::reverse_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:__normal_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::back_insert_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::front_insert_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::insert_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
operator ++	stl/stl_list.h	/^      operator++()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
operator ++	stl/stl_list.h	/^      operator++()$/;"	f	struct:std::_List_iterator	access:public	signature:()
operator ++	stl/stl_list.h	/^      operator++(int)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(int)
operator ++	stl/stl_list.h	/^      operator++(int)$/;"	f	struct:std::_List_iterator	access:public	signature:(int)
operator ++	stl/stl_raw_storage_iter.h	/^      operator++()$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
operator ++	stl/stl_raw_storage_iter.h	/^      operator++(int)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(int)
operator ++	stl/stl_tree.h	/^      operator++()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
operator ++	stl/stl_tree.h	/^      operator++()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
operator ++	stl/stl_tree.h	/^      operator++(int)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(int)
operator ++	stl/stl_tree.h	/^      operator++(int)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
operator +=	stl/stl_bvector.h	/^    operator+=(difference_type __i)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
operator +=	stl/stl_bvector.h	/^    operator+=(difference_type __i)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
operator +=	stl/stl_deque.h	/^      operator+=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
operator +=	stl/stl_iterator.h	/^      operator+=(const difference_type& __n)$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n)
operator +=	stl/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
operator -	stl/stl_bvector.h	/^    operator-(difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator -	stl/stl_bvector.h	/^    operator-(difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator -	stl/stl_bvector.h	/^  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)$/;"	f	namespace:std	signature:(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
operator -	stl/stl_deque.h	/^      operator-(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator -	stl/stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator -	stl/stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator -	stl/stl_iterator.h	/^      operator-(const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
operator -	stl/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator -	stl/stl_iterator.h	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator -	stl/stl_iterator.h	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator -	stl/stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator -	stl/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator --	stl/stl_bvector.h	/^    operator--()$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
operator --	stl/stl_bvector.h	/^    operator--()$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
operator --	stl/stl_bvector.h	/^    operator--(int)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
operator --	stl/stl_bvector.h	/^    operator--(int)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
operator --	stl/stl_deque.h	/^      operator--()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
operator --	stl/stl_deque.h	/^      operator--(int)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
operator --	stl/stl_iterator.h	/^      operator--()$/;"	f	class:__normal_iterator	access:public	signature:()
operator --	stl/stl_iterator.h	/^      operator--()$/;"	f	class:std::reverse_iterator	access:public	signature:()
operator --	stl/stl_iterator.h	/^      operator--(int)$/;"	f	class:__normal_iterator	access:public	signature:(int)
operator --	stl/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
operator --	stl/stl_list.h	/^      operator--()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
operator --	stl/stl_list.h	/^      operator--()$/;"	f	struct:std::_List_iterator	access:public	signature:()
operator --	stl/stl_list.h	/^      operator--(int)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(int)
operator --	stl/stl_list.h	/^      operator--(int)$/;"	f	struct:std::_List_iterator	access:public	signature:(int)
operator --	stl/stl_tree.h	/^      operator--()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
operator --	stl/stl_tree.h	/^      operator--()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
operator --	stl/stl_tree.h	/^      operator--(int)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(int)
operator --	stl/stl_tree.h	/^      operator--(int)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
operator -=	stl/stl_bvector.h	/^    operator-=(difference_type __i)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
operator -=	stl/stl_bvector.h	/^    operator-=(difference_type __i)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
operator -=	stl/stl_deque.h	/^      operator-=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
operator -=	stl/stl_iterator.h	/^      operator-=(const difference_type& __n)$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n)
operator -=	stl/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
operator ->	stl/stl_deque.h	/^      operator->() const$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
operator ->	stl/stl_iterator.h	/^      operator->() const$/;"	f	class:__normal_iterator	access:public	signature:() const
operator ->	stl/stl_iterator.h	/^      operator->() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator ->	stl/stl_list.h	/^      operator->() const$/;"	f	struct:std::_List_const_iterator	access:public	signature:() const
operator ->	stl/stl_list.h	/^      operator->() const$/;"	f	struct:std::_List_iterator	access:public	signature:() const
operator ->	stl/stl_tree.h	/^      operator->() const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:() const
operator ->	stl/stl_tree.h	/^      operator->() const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
operator <	stl/stl_bvector.h	/^    operator<(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <	stl/stl_bvector.h	/^    operator<(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
operator <	stl/stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator <	stl/stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator <	stl/stl_deque.h	/^    operator<(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <	stl/stl_iterator.h	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator <	stl/stl_iterator.h	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator <	stl/stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <	stl/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator <	stl/stl_list.h	/^    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator <	stl/stl_map.h	/^        operator< (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator <	stl/stl_map.h	/^    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator <	stl/stl_multimap.h	/^        operator< (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator <	stl/stl_multimap.h	/^    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator <	stl/stl_multiset.h	/^        operator< (const multiset<_K1, _C1, _A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1, _C1, _A1>&, const multiset<_K1, _C1, _A1>&)
operator <	stl/stl_multiset.h	/^    operator<(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator <	stl/stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <	stl/stl_queue.h	/^        operator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
operator <	stl/stl_queue.h	/^    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator <	stl/stl_set.h	/^        operator< (const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&)
operator <	stl/stl_set.h	/^    operator<(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator <	stl/stl_stack.h	/^        operator<(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
operator <	stl/stl_stack.h	/^    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator <	stl/stl_tree.h	/^    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator <	stl/stl_vector.h	/^    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator <=	stl/stl_bvector.h	/^    operator<=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <=	stl/stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator <=	stl/stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator <=	stl/stl_deque.h	/^    operator<=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <=	stl/stl_iterator.h	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator <=	stl/stl_iterator.h	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator <=	stl/stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <=	stl/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator <=	stl/stl_list.h	/^    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator <=	stl/stl_map.h	/^    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator <=	stl/stl_multimap.h	/^    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator <=	stl/stl_multiset.h	/^    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator <=	stl/stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <=	stl/stl_queue.h	/^    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator <=	stl/stl_relops.h	/^      operator<=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
operator <=	stl/stl_set.h	/^    operator<=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator <=	stl/stl_stack.h	/^    operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator <=	stl/stl_tree.h	/^    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator <=	stl/stl_vector.h	/^    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator =	stl/stl_bvector.h	/^    operator=(bool __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(bool __x)
operator =	stl/stl_bvector.h	/^    operator=(const _Bit_reference& __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x)
operator =	stl/stl_bvector.h	/^    operator=(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
operator =	stl/stl_deque.h	/^      operator=(const deque& __x);$/;"	p	class:std::deque	access:public	signature:(const deque& __x)
operator =	stl/stl_iterator.h	/^      operator=(const typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::const_reference __value)
operator =	stl/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator	access:public	signature:(typename _Container::const_reference __value)
operator =	stl/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator	access:public	signature:(typename _Container::const_reference __value)
operator =	stl/stl_list.h	/^      operator=(const list& __x);$/;"	p	class:std::list	access:public	signature:(const list& __x)
operator =	stl/stl_map.h	/^      operator=(const map& __x)$/;"	f	class:std::map	access:public	signature:(const map& __x)
operator =	stl/stl_multimap.h	/^      operator=(const multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(const multimap& __x)
operator =	stl/stl_multiset.h	/^      operator=(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
operator =	stl/stl_raw_storage_iter.h	/^      operator=(const _Tp& __element)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(const _Tp& __element)
operator =	stl/stl_set.h	/^      operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key, _Compare, _Alloc>& __x)
operator =	stl/stl_tempbuf.h	/^      operator=(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
operator =	stl/stl_tree.h	/^      operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
operator =	stl/stl_tree.h	/^    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
operator =	stl/stl_vector.h	/^      operator=(const vector& __x);$/;"	p	class:std::vector	access:public	signature:(const vector& __x)
operator ==	stl/stl_bvector.h	/^    operator==(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator ==	stl/stl_bvector.h	/^    operator==(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
operator ==	stl/stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator ==	stl/stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator ==	stl/stl_deque.h	/^    operator==(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator ==	stl/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator ==	stl/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator ==	stl/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator ==	stl/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator ==	stl/stl_list.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _Self& __x) const
operator ==	stl/stl_list.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_List_iterator	access:public	signature:(const _Self& __x) const
operator ==	stl/stl_list.h	/^    operator==(const _List_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _List_iterator<_Val>& __x, const _List_const_iterator<_Val>& __y)
operator ==	stl/stl_list.h	/^    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator ==	stl/stl_map.h	/^        operator== (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator ==	stl/stl_map.h	/^    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator ==	stl/stl_multimap.h	/^        operator== (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator ==	stl/stl_multimap.h	/^    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator ==	stl/stl_multiset.h	/^        operator== (const multiset<_K1, _C1, _A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1, _C1, _A1>&, const multiset<_K1, _C1, _A1>&)
operator ==	stl/stl_multiset.h	/^    operator==(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator ==	stl/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator ==	stl/stl_queue.h	/^        operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
operator ==	stl/stl_queue.h	/^    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator ==	stl/stl_set.h	/^        operator== (const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&)
operator ==	stl/stl_set.h	/^    operator==(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator ==	stl/stl_stack.h	/^        operator==(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
operator ==	stl/stl_stack.h	/^    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator ==	stl/stl_tree.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const _Self& __x) const
operator ==	stl/stl_tree.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const _Self& __x) const
operator ==	stl/stl_tree.h	/^    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator ==	stl/stl_tree.h	/^    operator==(const _Rb_tree_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Val>& __x, const _Rb_tree_const_iterator<_Val>& __y)
operator ==	stl/stl_vector.h	/^    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >	stl/stl_bvector.h	/^    operator>(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >	stl/stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator >	stl/stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator >	stl/stl_deque.h	/^    operator>(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >	stl/stl_iterator.h	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator >	stl/stl_iterator.h	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator >	stl/stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >	stl/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator >	stl/stl_list.h	/^    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator >	stl/stl_map.h	/^    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator >	stl/stl_multimap.h	/^    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator >	stl/stl_multiset.h	/^    operator>(const multiset<_Key,_Compare,_Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator >	stl/stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >	stl/stl_queue.h	/^    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator >	stl/stl_relops.h	/^      operator>(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
operator >	stl/stl_set.h	/^    operator>(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator >	stl/stl_stack.h	/^    operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator >	stl/stl_tree.h	/^    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator >	stl/stl_vector.h	/^    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >=	stl/stl_bvector.h	/^    operator>=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >=	stl/stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
operator >=	stl/stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
operator >=	stl/stl_deque.h	/^    operator>=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >=	stl/stl_iterator.h	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_Iterator, _Container>& __lhs, const __normal_iterator<_Iterator, _Container>& __rhs)
operator >=	stl/stl_iterator.h	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	signature:(const __normal_iterator<_IteratorL, _Container>& __lhs, const __normal_iterator<_IteratorR, _Container>& __rhs)
operator >=	stl/stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >=	stl/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
operator >=	stl/stl_list.h	/^    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
operator >=	stl/stl_map.h	/^    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
operator >=	stl/stl_multimap.h	/^    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
operator >=	stl/stl_multiset.h	/^    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
operator >=	stl/stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >=	stl/stl_queue.h	/^    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
operator >=	stl/stl_relops.h	/^      operator>=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
operator >=	stl/stl_set.h	/^    operator>=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
operator >=	stl/stl_stack.h	/^    operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
operator >=	stl/stl_tree.h	/^    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
operator >=	stl/stl_vector.h	/^    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator []	stl/stl_bvector.h	/^    operator[](difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator []	stl/stl_bvector.h	/^    operator[](difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator []	stl/stl_bvector.h	/^    operator[](size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
operator []	stl/stl_bvector.h	/^    operator[](size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
operator []	stl/stl_deque.h	/^      operator[](difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator []	stl/stl_deque.h	/^      operator[](size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
operator []	stl/stl_deque.h	/^      operator[](size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
operator []	stl/stl_iterator.h	/^      operator[](const difference_type& __n) const$/;"	f	class:__normal_iterator	access:public	signature:(const difference_type& __n) const
operator []	stl/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator []	stl/stl_map.h	/^      operator[](const key_type& __k)$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
operator []	stl/stl_vector.h	/^      operator[](size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
operator []	stl/stl_vector.h	/^      operator[](size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
operator bool	stl/stl_bvector.h	/^    operator bool() const$/;"	f	struct:std::_Bit_reference	access:public	signature:() const
output_iterator_tag	stl/stl_iterator_base_types.h	/^  struct output_iterator_tag {};$/;"	s	namespace:std
pair	stl/stl_pair.h	/^        pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1, _U2>& __p)
pair	stl/stl_pair.h	/^      pair()$/;"	f	struct:std::pair	access:public	signature:()
pair	stl/stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1& __a, const _T2& __b)
pair	stl/stl_pair.h	/^    struct pair$/;"	s	namespace:std
partial_sort	stl/stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)
partial_sort	stl/stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
partial_sort_copy	stl/stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last)
partial_sort_copy	stl/stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)
partial_sum	stl/stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
partial_sum	stl/stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
partition	stl/stl_algo.h	/^    partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
plus	stl/stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
pointer	stl/stl_bvector.h	/^    typedef _Bit_reference*                              pointer;$/;"	t	class:std::vector	access:public
pointer	stl/stl_bvector.h	/^    typedef _Bit_reference* pointer;$/;"	t	struct:std::_Bit_iterator	access:public
pointer	stl/stl_bvector.h	/^    typedef const bool*          pointer;$/;"	t	struct:std::_Bit_const_iterator	access:public
pointer	stl/stl_deque.h	/^      typedef _Ptr                            pointer;$/;"	t	struct:std::_Deque_iterator	access:public
pointer	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::deque	access:public
pointer	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer     pointer;$/;"	t	class:std::reverse_iterator	access:public
pointer	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer   pointer;$/;"	t	class:__normal_iterator	access:public
pointer	stl/stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	t	struct:std::iterator	access:public
pointer	stl/stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	access:public
pointer	stl/stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	access:public
pointer	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	access:public
pointer	stl/stl_list.h	/^      typedef _Tp*                               pointer;$/;"	t	struct:std::_List_iterator	access:public
pointer	stl/stl_list.h	/^      typedef const _Tp*                         pointer;$/;"	t	struct:std::_List_const_iterator	access:public
pointer	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::list	access:public
pointer	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	t	class:std::map	access:public
pointer	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	t	class:std::multimap	access:public
pointer	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	t	class:std::multiset	access:public
pointer	stl/stl_set.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	t	class:std::set	access:public
pointer	stl/stl_tempbuf.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Temporary_buffer	access:public
pointer	stl/stl_tree.h	/^      typedef _Tp* pointer;$/;"	t	struct:std::_Rb_tree_iterator	access:public
pointer	stl/stl_tree.h	/^      typedef const _Tp* pointer;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
pointer	stl/stl_tree.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Rb_tree	access:public
pointer	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::vector	access:public
pointer_to_binary_function	stl/stl_function.h	/^      pointer_to_binary_function() {}$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
pointer_to_binary_function	stl/stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (__x)_Arg1, _Arg2))
pointer_to_binary_function	stl/stl_function.h	/^    class pointer_to_binary_function$/;"	c	namespace:std	inherits:binary_function
pointer_to_unary_function	stl/stl_function.h	/^      pointer_to_unary_function() {}$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
pointer_to_unary_function	stl/stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (__x)_Arg))
pointer_to_unary_function	stl/stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	inherits:unary_function
pop	stl/stl_queue.h	/^      pop()$/;"	f	class:std::priority_queue	access:public	signature:()
pop	stl/stl_queue.h	/^      pop()$/;"	f	class:std::queue	access:public	signature:()
pop	stl/stl_stack.h	/^      pop()$/;"	f	class:std::stack	access:public	signature:()
pop_back	stl/stl_bvector.h	/^    pop_back()$/;"	f	class:std::vector	access:public	signature:()
pop_back	stl/stl_deque.h	/^      pop_back()$/;"	f	class:std::deque	access:public	signature:()
pop_back	stl/stl_list.h	/^      pop_back()$/;"	f	class:std::list	access:public	signature:()
pop_back	stl/stl_vector.h	/^      pop_back()$/;"	f	class:std::vector	access:public	signature:()
pop_front	stl/stl_deque.h	/^      pop_front()$/;"	f	class:std::deque	access:public	signature:()
pop_front	stl/stl_list.h	/^      pop_front()$/;"	f	class:std::list	access:public	signature:()
pop_heap	stl/stl_heap.h	/^    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
pop_heap	stl/stl_heap.h	/^    pop_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
prev_permutation	stl/stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
prev_permutation	stl/stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
priority_queue	stl/stl_queue.h	/^        priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x = _Compare(), const _Sequence& __s = _Sequence())
priority_queue	stl/stl_queue.h	/^      priority_queue(const _Compare& __x = _Compare(),$/;"	f	class:std::priority_queue	access:public	signature:(const _Compare& __x = _Compare(), const _Sequence& __s = _Sequence())
priority_queue	stl/stl_queue.h	/^    class priority_queue$/;"	c	namespace:std
ptr_fun	stl/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	signature:(_Result (__x)_Arg))
ptr_fun	stl/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std	signature:(_Result (__x)_Arg1, _Arg2))
push	stl/stl_queue.h	/^      push(const value_type& __x)$/;"	f	class:std::priority_queue	access:public	signature:(const value_type& __x)
push	stl/stl_queue.h	/^      push(const value_type& __x)$/;"	f	class:std::queue	access:public	signature:(const value_type& __x)
push	stl/stl_stack.h	/^      push(const value_type& __x)$/;"	f	class:std::stack	access:public	signature:(const value_type& __x)
push_back	stl/stl_bvector.h	/^    push_back(bool __x)$/;"	f	class:std::vector	access:public	signature:(bool __x)
push_back	stl/stl_deque.h	/^      push_back(const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(const value_type& __x)
push_back	stl/stl_list.h	/^      push_back(const value_type& __x)$/;"	f	class:std::list	access:public	signature:(const value_type& __x)
push_back	stl/stl_vector.h	/^      push_back(const value_type& __x)$/;"	f	class:std::vector	access:public	signature:(const value_type& __x)
push_front	stl/stl_deque.h	/^      push_front(const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(const value_type& __x)
push_front	stl/stl_list.h	/^      push_front(const value_type& __x)$/;"	f	class:std::list	access:public	signature:(const value_type& __x)
push_heap	stl/stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
push_heap	stl/stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
queue	stl/stl_queue.h	/^      queue(const _Sequence& __c = _Sequence()) : c(__c) {}$/;"	f	class:std::queue	access:public	signature:(const _Sequence& __c = _Sequence())
queue	stl/stl_queue.h	/^    class queue$/;"	c	namespace:std
random_access_iterator_tag	stl/stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
random_shuffle	stl/stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
random_shuffle	stl/stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator& __rand)
raw_storage_iterator	stl/stl_raw_storage_iter.h	/^      raw_storage_iterator(_ForwardIterator __x)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
raw_storage_iterator	stl/stl_raw_storage_iter.h	/^    class raw_storage_iterator$/;"	c	namespace:std	inherits:iterator
rbegin	stl/stl_bvector.h	/^    rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
rbegin	stl/stl_bvector.h	/^    rbegin()$/;"	f	class:std::vector	access:public	signature:()
rbegin	stl/stl_deque.h	/^      rbegin() const$/;"	f	class:std::deque	access:public	signature:() const
rbegin	stl/stl_deque.h	/^      rbegin()$/;"	f	class:std::deque	access:public	signature:()
rbegin	stl/stl_list.h	/^      rbegin() const$/;"	f	class:std::list	access:public	signature:() const
rbegin	stl/stl_list.h	/^      rbegin()$/;"	f	class:std::list	access:public	signature:()
rbegin	stl/stl_map.h	/^      rbegin() const$/;"	f	class:std::map	access:public	signature:() const
rbegin	stl/stl_map.h	/^      rbegin()$/;"	f	class:std::map	access:public	signature:()
rbegin	stl/stl_multimap.h	/^      rbegin() const$/;"	f	class:std::multimap	access:public	signature:() const
rbegin	stl/stl_multimap.h	/^      rbegin()$/;"	f	class:std::multimap	access:public	signature:()
rbegin	stl/stl_multiset.h	/^      rbegin() const$/;"	f	class:std::multiset	access:public	signature:() const
rbegin	stl/stl_set.h	/^      rbegin() const$/;"	f	class:std::set	access:public	signature:() const
rbegin	stl/stl_tree.h	/^      rbegin() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
rbegin	stl/stl_tree.h	/^      rbegin()$/;"	f	class:std::_Rb_tree	access:public	signature:()
rbegin	stl/stl_vector.h	/^      rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
rbegin	stl/stl_vector.h	/^      rbegin()$/;"	f	class:std::vector	access:public	signature:()
reference	stl/stl_bvector.h	/^    typedef _Bit_reference                               reference;$/;"	t	class:std::vector	access:public
reference	stl/stl_bvector.h	/^    typedef _Bit_reference  reference;$/;"	t	struct:std::_Bit_iterator	access:public
reference	stl/stl_bvector.h	/^    typedef bool                 reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
reference	stl/stl_deque.h	/^      typedef _Ref                            reference;$/;"	t	struct:std::_Deque_iterator	access:public
reference	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::deque	access:public
reference	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference   reference;$/;"	t	class:std::reverse_iterator	access:public
reference	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference reference;$/;"	t	class:__normal_iterator	access:public
reference	stl/stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	access:public
reference	stl/stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	access:public
reference	stl/stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	access:public
reference	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	access:public
reference	stl/stl_list.h	/^      typedef _Tp&                               reference;$/;"	t	struct:std::_List_iterator	access:public
reference	stl/stl_list.h	/^      typedef const _Tp&                         reference;$/;"	t	struct:std::_List_const_iterator	access:public
reference	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::list	access:public
reference	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	t	class:std::map	access:public
reference	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	t	class:std::multimap	access:public
reference	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	t	class:std::multiset	access:public
reference	stl/stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::priority_queue	access:public
reference	stl/stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::queue	access:public
reference	stl/stl_set.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	t	class:std::set	access:public
reference	stl/stl_stack.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::stack	access:public
reference	stl/stl_tree.h	/^      typedef _Tp& reference;$/;"	t	struct:std::_Rb_tree_iterator	access:public
reference	stl/stl_tree.h	/^      typedef const _Tp& reference;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
reference	stl/stl_tree.h	/^      typedef value_type& reference;$/;"	t	class:std::_Rb_tree	access:public
reference	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::vector	access:public
rel_ops	stl/stl_relops.h	/^  namespace rel_ops$/;"	n	namespace:std
remove	stl/stl_algo.h	/^    remove(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
remove	stl/stl_list.h	/^      remove(const _Tp& __value);$/;"	p	class:std::list	access:public	signature:(const _Tp& __value)
remove_copy	stl/stl_algo.h	/^    remove_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __value)
remove_copy_if	stl/stl_algo.h	/^    remove_copy_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)
remove_if	stl/stl_algo.h	/^    remove_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
remove_if	stl/stl_list.h	/^        remove_if(_Predicate);$/;"	p	class:std::list	access:public	signature:(_Predicate)
rend	stl/stl_bvector.h	/^    rend() const$/;"	f	class:std::vector	access:public	signature:() const
rend	stl/stl_bvector.h	/^    rend()$/;"	f	class:std::vector	access:public	signature:()
rend	stl/stl_deque.h	/^      rend() const$/;"	f	class:std::deque	access:public	signature:() const
rend	stl/stl_deque.h	/^      rend()$/;"	f	class:std::deque	access:public	signature:()
rend	stl/stl_list.h	/^      rend() const$/;"	f	class:std::list	access:public	signature:() const
rend	stl/stl_list.h	/^      rend()$/;"	f	class:std::list	access:public	signature:()
rend	stl/stl_map.h	/^      rend() const$/;"	f	class:std::map	access:public	signature:() const
rend	stl/stl_map.h	/^      rend()$/;"	f	class:std::map	access:public	signature:()
rend	stl/stl_multimap.h	/^      rend() const$/;"	f	class:std::multimap	access:public	signature:() const
rend	stl/stl_multimap.h	/^      rend()$/;"	f	class:std::multimap	access:public	signature:()
rend	stl/stl_multiset.h	/^      rend() const$/;"	f	class:std::multiset	access:public	signature:() const
rend	stl/stl_set.h	/^      rend() const$/;"	f	class:std::set	access:public	signature:() const
rend	stl/stl_tree.h	/^      rend() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
rend	stl/stl_tree.h	/^      rend()$/;"	f	class:std::_Rb_tree	access:public	signature:()
rend	stl/stl_vector.h	/^      rend() const$/;"	f	class:std::vector	access:public	signature:() const
rend	stl/stl_vector.h	/^      rend()$/;"	f	class:std::vector	access:public	signature:()
replace	stl/stl_algo.h	/^    replace(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value, const _Tp& __new_value)
replace_copy	stl/stl_algo.h	/^    replace_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __old_value, const _Tp& __new_value)
replace_copy_if	stl/stl_algo.h	/^    replace_copy_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp& __new_value)
replace_if	stl/stl_algo.h	/^    replace_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp& __new_value)
requested_size	stl/stl_tempbuf.h	/^      requested_size() const$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
reserve	stl/stl_bvector.h	/^    reserve(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
reserve	stl/stl_vector.h	/^      reserve(size_type __n);$/;"	p	class:std::vector	access:public	signature:(size_type __n)
resize	stl/stl_bvector.h	/^    resize(size_type __new_size, bool __x = bool())$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, bool __x = bool())
resize	stl/stl_deque.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	f	class:std::deque	access:public	signature:(size_type __new_size, value_type __x = value_type())
resize	stl/stl_list.h	/^      resize(size_type __new_size, value_type __x = value_type());$/;"	p	class:std::list	access:public	signature:(size_type __new_size, value_type __x = value_type())
resize	stl/stl_vector.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, value_type __x = value_type())
result_type	stl/stl_function.h	/^      typedef _Result result_type;         \/\/\/< type of the return type$/;"	t	struct:std::binary_function	access:public
result_type	stl/stl_function.h	/^      typedef _Result result_type;  \/\/\/< @c result_type is the return type$/;"	t	struct:std::unary_function	access:public
reverse	stl/stl_algo.h	/^    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
reverse	stl/stl_list.h	/^      reverse()$/;"	f	class:std::list	access:public	signature:()
reverse	stl/stl_list.h	/^    reverse();$/;"	p	struct:std::_List_node_base	access:public	signature:()
reverse_copy	stl/stl_algo.h	/^    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)
reverse_iterator	stl/stl_bvector.h	/^    typedef std::reverse_iterator<iterator>              reverse_iterator;$/;"	t	class:std::vector	access:public
reverse_iterator	stl/stl_deque.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:std::deque	access:public
reverse_iterator	stl/stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator<_Iter>& __x)
reverse_iterator	stl/stl_iterator.h	/^      reverse_iterator() : current() { }$/;"	f	class:std::reverse_iterator	access:public	signature:()
reverse_iterator	stl/stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator& __x)
reverse_iterator	stl/stl_iterator.h	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	f	class:std::reverse_iterator	access:public	signature:(iterator_type __x)
reverse_iterator	stl/stl_iterator.h	/^    class reverse_iterator$/;"	c	namespace:std	inherits:iterator
reverse_iterator	stl/stl_list.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:std::list	access:public
reverse_iterator	stl/stl_map.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	t	class:std::map	access:public
reverse_iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	t	class:std::multimap	access:public
reverse_iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	t	class:std::multiset	access:public
reverse_iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	t	class:std::set	access:public
reverse_iterator	stl/stl_tree.h	/^      typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
reverse_iterator	stl/stl_vector.h	/^      typedef std::reverse_iterator<iterator>		 reverse_iterator;$/;"	t	class:std::vector	access:public
rotate	stl/stl_algo.h	/^    rotate(_ForwardIterator __first, _ForwardIterator __middle,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)
rotate_copy	stl/stl_algo.h	/^    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)
search	stl/stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
search	stl/stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)
search_n	stl/stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val)
search_n	stl/stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred)
second	stl/stl_pair.h	/^      _T2 second;                \/\/\/< @c second is a copy of the second object$/;"	m	struct:std::pair	access:public
second_argument_type	stl/stl_function.h	/^      typedef _Arg2 second_argument_type;  \/\/\/< the type of the second argument$/;"	t	struct:std::binary_function	access:public
second_type	stl/stl_pair.h	/^      typedef _T2 second_type;   \/\/\/<  @c second_type is the second bound type$/;"	t	struct:std::pair	access:public
set	stl/stl_set.h	/^        set(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
set	stl/stl_set.h	/^        set(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	stl/stl_set.h	/^      set()$/;"	f	class:std::set	access:public	signature:()
set	stl/stl_set.h	/^      set(const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
set	stl/stl_set.h	/^      set(const set<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key,_Compare,_Alloc>& __x)
set	stl/stl_set.h	/^    class set$/;"	c	namespace:std
set_difference	stl/stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_difference	stl/stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
set_intersection	stl/stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_intersection	stl/stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
set_symmetric_difference	stl/stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_symmetric_difference	stl/stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
set_union	stl/stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
set_union	stl/stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
size	stl/stl_bvector.h	/^    size() const$/;"	f	class:std::vector	access:public	signature:() const
size	stl/stl_deque.h	/^      size() const$/;"	f	class:std::deque	access:public	signature:() const
size	stl/stl_list.h	/^      size() const$/;"	f	class:std::list	access:public	signature:() const
size	stl/stl_map.h	/^      size() const$/;"	f	class:std::map	access:public	signature:() const
size	stl/stl_multimap.h	/^      size() const$/;"	f	class:std::multimap	access:public	signature:() const
size	stl/stl_multiset.h	/^      size() const$/;"	f	class:std::multiset	access:public	signature:() const
size	stl/stl_queue.h	/^      size() const$/;"	f	class:std::priority_queue	access:public	signature:() const
size	stl/stl_queue.h	/^      size() const$/;"	f	class:std::queue	access:public	signature:() const
size	stl/stl_set.h	/^      size() const$/;"	f	class:std::set	access:public	signature:() const
size	stl/stl_stack.h	/^      size() const$/;"	f	class:std::stack	access:public	signature:() const
size	stl/stl_tempbuf.h	/^      size() const$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
size	stl/stl_tree.h	/^      size() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
size	stl/stl_vector.h	/^      size() const$/;"	f	class:std::vector	access:public	signature:() const
size_type	stl/stl_bvector.h	/^    typedef size_t                                       size_type;$/;"	t	class:std::vector	access:public
size_type	stl/stl_deque.h	/^      typedef size_t                             size_type;$/;"	t	class:std::deque	access:public
size_type	stl/stl_deque.h	/^      typedef size_t                          size_type;$/;"	t	struct:std::_Deque_iterator	access:public
size_type	stl/stl_list.h	/^      typedef size_t                                     size_type;$/;"	t	class:std::list	access:public
size_type	stl/stl_map.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	t	class:std::map	access:public
size_type	stl/stl_multimap.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	t	class:std::multimap	access:public
size_type	stl/stl_multiset.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	t	class:std::multiset	access:public
size_type	stl/stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::priority_queue	access:public
size_type	stl/stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::queue	access:public
size_type	stl/stl_set.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	t	class:std::set	access:public
size_type	stl/stl_stack.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::stack	access:public
size_type	stl/stl_tempbuf.h	/^      typedef ptrdiff_t   size_type;$/;"	t	class:std::_Temporary_buffer	access:public
size_type	stl/stl_tree.h	/^      typedef size_t size_type;$/;"	t	class:std::_Rb_tree	access:public
size_type	stl/stl_vector.h	/^      typedef size_t					 size_type;$/;"	t	class:std::vector	access:public
sort	stl/stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
sort	stl/stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
sort	stl/stl_list.h	/^        sort(_StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(_StrictWeakOrdering)
sort	stl/stl_list.h	/^      sort();$/;"	p	class:std::list	access:public	signature:()
sort_heap	stl/stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
sort_heap	stl/stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
splice	stl/stl_list.h	/^      splice(iterator __position, list& __x)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x)
splice	stl/stl_list.h	/^      splice(iterator __position, list& __x, iterator __first, iterator __last)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x, iterator __first, iterator __last)
splice	stl/stl_list.h	/^      splice(iterator __position, list& __x, iterator __i)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x, iterator __i)
stable_partition	stl/stl_algo.h	/^    stable_partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
stable_sort	stl/stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
stable_sort	stl/stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
stack	stl/stl_stack.h	/^      stack(const _Sequence& __c = _Sequence())$/;"	f	class:std::stack	access:public	signature:(const _Sequence& __c = _Sequence())
stack	stl/stl_stack.h	/^    class stack$/;"	c	namespace:std
std	stl/stl_algo.h	/^namespace std {$/;"	n
std	stl/stl_algobase.h	/^namespace std {$/;"	n
std	stl/stl_bvector.h	/^namespace std {$/;"	n
std	stl/stl_construct.h	/^namespace std {$/;"	n
std	stl/stl_deque.h	/^namespace std {$/;"	n
std	stl/stl_function.h	/^namespace std {$/;"	n
std	stl/stl_heap.h	/^namespace std {$/;"	n
std	stl/stl_iterator.h	/^namespace std {$/;"	n
std	stl/stl_iterator_base_funcs.h	/^namespace std {$/;"	n
std	stl/stl_iterator_base_types.h	/^namespace std {$/;"	n
std	stl/stl_list.h	/^namespace std {$/;"	n
std	stl/stl_map.h	/^namespace std {$/;"	n
std	stl/stl_multimap.h	/^namespace std {$/;"	n
std	stl/stl_multiset.h	/^namespace std {$/;"	n
std	stl/stl_numeric.h	/^namespace std {$/;"	n
std	stl/stl_pair.h	/^namespace std {$/;"	n
std	stl/stl_queue.h	/^namespace std {$/;"	n
std	stl/stl_raw_storage_iter.h	/^namespace std {$/;"	n
std	stl/stl_relops.h	/^namespace std {$/;"	n
std	stl/stl_set.h	/^namespace std {$/;"	n
std	stl/stl_stack.h	/^namespace std {$/;"	n
std	stl/stl_tempbuf.h	/^namespace std {$/;"	n
std	stl/stl_tree.h	/^namespace std {$/;"	n
std	stl/stl_uninitialized.h	/^namespace std {$/;"	n
std	stl/stl_vector.h	/^namespace std {$/;"	n
std::_Bit_const_iterator	stl/stl_bvector.h	/^  struct _Bit_const_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
std::_Bit_const_iterator::_Bit_const_iterator	stl/stl_bvector.h	/^    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
std::_Bit_const_iterator::_Bit_const_iterator	stl/stl_bvector.h	/^    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(_Bit_type * __x, unsigned int __y)
std::_Bit_const_iterator::_Bit_const_iterator	stl/stl_bvector.h	/^    _Bit_const_iterator(const _Bit_iterator& __x)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(const _Bit_iterator& __x)
std::_Bit_const_iterator::const_iterator	stl/stl_bvector.h	/^    typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_const_iterator::const_reference	stl/stl_bvector.h	/^    typedef bool                 const_reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_const_iterator::operator *	stl/stl_bvector.h	/^    operator*() const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:() const
std::_Bit_const_iterator::operator +	stl/stl_bvector.h	/^    operator+(difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::operator ++	stl/stl_bvector.h	/^    operator++()$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
std::_Bit_const_iterator::operator ++	stl/stl_bvector.h	/^    operator++(int)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
std::_Bit_const_iterator::operator +=	stl/stl_bvector.h	/^    operator+=(difference_type __i)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
std::_Bit_const_iterator::operator -	stl/stl_bvector.h	/^    operator-(difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::operator --	stl/stl_bvector.h	/^    operator--()$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
std::_Bit_const_iterator::operator --	stl/stl_bvector.h	/^    operator--(int)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
std::_Bit_const_iterator::operator -=	stl/stl_bvector.h	/^    operator-=(difference_type __i)$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
std::_Bit_const_iterator::operator []	stl/stl_bvector.h	/^    operator[](difference_type __i) const$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::pointer	stl/stl_bvector.h	/^    typedef const bool*          pointer;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_const_iterator::reference	stl/stl_bvector.h	/^    typedef bool                 reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_iterator	stl/stl_bvector.h	/^  struct _Bit_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
std::_Bit_iterator::_Bit_iterator	stl/stl_bvector.h	/^    _Bit_iterator() : _Bit_iterator_base(0, 0) { }$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
std::_Bit_iterator::_Bit_iterator	stl/stl_bvector.h	/^    _Bit_iterator(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(_Bit_type * __x, unsigned int __y)
std::_Bit_iterator::iterator	stl/stl_bvector.h	/^    typedef _Bit_iterator   iterator;$/;"	t	struct:std::_Bit_iterator	access:public
std::_Bit_iterator::operator *	stl/stl_bvector.h	/^    operator*() const$/;"	f	struct:std::_Bit_iterator	access:public	signature:() const
std::_Bit_iterator::operator +	stl/stl_bvector.h	/^    operator+(difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
std::_Bit_iterator::operator ++	stl/stl_bvector.h	/^    operator++()$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
std::_Bit_iterator::operator ++	stl/stl_bvector.h	/^    operator++(int)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
std::_Bit_iterator::operator +=	stl/stl_bvector.h	/^    operator+=(difference_type __i)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
std::_Bit_iterator::operator -	stl/stl_bvector.h	/^    operator-(difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
std::_Bit_iterator::operator --	stl/stl_bvector.h	/^    operator--()$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
std::_Bit_iterator::operator --	stl/stl_bvector.h	/^    operator--(int)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
std::_Bit_iterator::operator -=	stl/stl_bvector.h	/^    operator-=(difference_type __i)$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
std::_Bit_iterator::operator []	stl/stl_bvector.h	/^    operator[](difference_type __i) const$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
std::_Bit_iterator::pointer	stl/stl_bvector.h	/^    typedef _Bit_reference* pointer;$/;"	t	struct:std::_Bit_iterator	access:public
std::_Bit_iterator::reference	stl/stl_bvector.h	/^    typedef _Bit_reference  reference;$/;"	t	struct:std::_Bit_iterator	access:public
std::_Bit_iterator_base	stl/stl_bvector.h	/^  struct _Bit_iterator_base$/;"	s	namespace:std	inherits:std::iterator
std::_Bit_iterator_base::_Bit_iterator_base	stl/stl_bvector.h	/^    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(_Bit_type * __x, unsigned int __y)
std::_Bit_iterator_base::_M_bump_down	stl/stl_bvector.h	/^    _M_bump_down()$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
std::_Bit_iterator_base::_M_bump_up	stl/stl_bvector.h	/^    _M_bump_up()$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
std::_Bit_iterator_base::_M_incr	stl/stl_bvector.h	/^    _M_incr(ptrdiff_t __i)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(ptrdiff_t __i)
std::_Bit_iterator_base::_M_offset	stl/stl_bvector.h	/^    unsigned int _M_offset;$/;"	m	struct:std::_Bit_iterator_base	access:public
std::_Bit_iterator_base::_M_p	stl/stl_bvector.h	/^    _Bit_type * _M_p;$/;"	m	struct:std::_Bit_iterator_base	access:public
std::_Bit_iterator_base::operator !=	stl/stl_bvector.h	/^    operator!=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator <	stl/stl_bvector.h	/^    operator<(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator <=	stl/stl_bvector.h	/^    operator<=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator ==	stl/stl_bvector.h	/^    operator==(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator >	stl/stl_bvector.h	/^    operator>(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator >=	stl/stl_bvector.h	/^    operator>=(const _Bit_iterator_base& __i) const$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_reference	stl/stl_bvector.h	/^  struct _Bit_reference$/;"	s	namespace:std
std::_Bit_reference::_Bit_reference	stl/stl_bvector.h	/^    _Bit_reference() : _M_p(0), _M_mask(0) { }$/;"	f	struct:std::_Bit_reference	access:public	signature:()
std::_Bit_reference::_Bit_reference	stl/stl_bvector.h	/^    _Bit_reference(_Bit_type * __x, _Bit_type __y)$/;"	f	struct:std::_Bit_reference	access:public	signature:(_Bit_type * __x, _Bit_type __y)
std::_Bit_reference::_M_mask	stl/stl_bvector.h	/^    _Bit_type _M_mask;$/;"	m	struct:std::_Bit_reference	access:public
std::_Bit_reference::_M_p	stl/stl_bvector.h	/^    _Bit_type * _M_p;$/;"	m	struct:std::_Bit_reference	access:public
std::_Bit_reference::flip	stl/stl_bvector.h	/^    flip()$/;"	f	struct:std::_Bit_reference	access:public	signature:()
std::_Bit_reference::operator <	stl/stl_bvector.h	/^    operator<(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
std::_Bit_reference::operator =	stl/stl_bvector.h	/^    operator=(bool __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(bool __x)
std::_Bit_reference::operator =	stl/stl_bvector.h	/^    operator=(const _Bit_reference& __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x)
std::_Bit_reference::operator ==	stl/stl_bvector.h	/^    operator==(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
std::_Bit_reference::operator bool	stl/stl_bvector.h	/^    operator bool() const$/;"	f	struct:std::_Bit_reference	access:public	signature:() const
std::_Bit_type	stl/stl_bvector.h	/^  typedef unsigned long _Bit_type;$/;"	t	namespace:std
std::_Bvector_base	stl/stl_bvector.h	/^    struct _Bvector_base$/;"	s	namespace:std
std::_Bvector_base::_Bit_alloc_type	stl/stl_bvector.h	/^        _Bit_alloc_type;$/;"	t	struct:std::_Bvector_base	access:public
std::_Bvector_base::_Bvector_base	stl/stl_bvector.h	/^      _Bvector_base(const allocator_type& __a) : _M_impl(__a) { }$/;"	f	struct:std::_Bvector_base	access:public	signature:(const allocator_type& __a)
std::_Bvector_base::_Bvector_impl	stl/stl_bvector.h	/^      struct _Bvector_impl$/;"	s	struct:std::_Bvector_base	inherits:_Bit_alloc_type	access:public
std::_Bvector_base::_Bvector_impl::_Bvector_impl	stl/stl_bvector.h	/^	_Bvector_impl(const _Bit_alloc_type& __a)$/;"	f	struct:std::_Bvector_base::_Bvector_impl	access:public	signature:(const _Bit_alloc_type& __a)
std::_Bvector_base::_Bvector_impl::_M_end_of_storage	stl/stl_bvector.h	/^	_Bit_type* 	_M_end_of_storage;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
std::_Bvector_base::_Bvector_impl::_M_finish	stl/stl_bvector.h	/^	_Bit_iterator 	_M_finish;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
std::_Bvector_base::_Bvector_impl::_M_start	stl/stl_bvector.h	/^	_Bit_iterator 	_M_start;$/;"	m	struct:std::_Bvector_base::_Bvector_impl	access:public
std::_Bvector_base::_M_allocate	stl/stl_bvector.h	/^      _M_allocate(size_t __n)$/;"	f	struct:std::_Bvector_base	access:protected	signature:(size_t __n)
std::_Bvector_base::_M_deallocate	stl/stl_bvector.h	/^      _M_deallocate()$/;"	f	struct:std::_Bvector_base	access:protected	signature:()
std::_Bvector_base::_M_get_Bit_allocator	stl/stl_bvector.h	/^      _M_get_Bit_allocator() const$/;"	f	struct:std::_Bvector_base	access:public	signature:() const
std::_Bvector_base::_M_get_Bit_allocator	stl/stl_bvector.h	/^      _M_get_Bit_allocator()$/;"	f	struct:std::_Bvector_base	access:public	signature:()
std::_Bvector_base::_M_impl	stl/stl_bvector.h	/^      _Bvector_impl _M_impl;$/;"	m	struct:std::_Bvector_base	access:protected
std::_Bvector_base::allocator_type	stl/stl_bvector.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::_Bvector_base	access:public
std::_Bvector_base::get_allocator	stl/stl_bvector.h	/^      get_allocator() const$/;"	f	struct:std::_Bvector_base	access:public	signature:() const
std::_Bvector_base::~_Bvector_base	stl/stl_bvector.h	/^      ~_Bvector_base()$/;"	f	struct:std::_Bvector_base	access:public	signature:()
std::_Construct	stl/stl_construct.h	/^    _Construct(_T1* __p)$/;"	f	namespace:std	signature:(_T1* __p)
std::_Construct	stl/stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	f	namespace:std	signature:(_T1* __p, const _T2& __value)
std::_Deque_base	stl/stl_deque.h	/^    class _Deque_base$/;"	c	namespace:std
std::_Deque_base::_Deque_base	stl/stl_deque.h	/^      _Deque_base(const allocator_type& __a)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a)
std::_Deque_base::_Deque_base	stl/stl_deque.h	/^      _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a, size_t __num_elements)
std::_Deque_base::_Deque_impl	stl/stl_deque.h	/^      struct _Deque_impl$/;"	s	class:std::_Deque_base	inherits:_Tp_alloc_type	access:protected
std::_Deque_base::_Deque_impl::_Deque_impl	stl/stl_deque.h	/^	_Deque_impl(const _Tp_alloc_type& __a)$/;"	f	struct:std::_Deque_base::_Deque_impl	access:public	signature:(const _Tp_alloc_type& __a)
std::_Deque_base::_Deque_impl::_M_finish	stl/stl_deque.h	/^	iterator _M_finish;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
std::_Deque_base::_Deque_impl::_M_map	stl/stl_deque.h	/^	_Tp** _M_map;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
std::_Deque_base::_Deque_impl::_M_map_size	stl/stl_deque.h	/^	size_t _M_map_size;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
std::_Deque_base::_Deque_impl::_M_start	stl/stl_deque.h	/^	iterator _M_start;$/;"	m	struct:std::_Deque_base::_Deque_impl	access:public
std::_Deque_base::_M_allocate_map	stl/stl_deque.h	/^      _M_allocate_map(size_t __n)$/;"	f	class:std::_Deque_base	access:protected	signature:(size_t __n)
std::_Deque_base::_M_allocate_node	stl/stl_deque.h	/^      _M_allocate_node()$/;"	f	class:std::_Deque_base	access:protected	signature:()
std::_Deque_base::_M_create_nodes	stl/stl_deque.h	/^      void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_create_nodes	stl/stl_deque.h	/^    _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_deallocate_map	stl/stl_deque.h	/^      _M_deallocate_map(_Tp** __p, size_t __n)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp** __p, size_t __n)
std::_Deque_base::_M_deallocate_node	stl/stl_deque.h	/^      _M_deallocate_node(_Tp* __p)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp* __p)
std::_Deque_base::_M_destroy_nodes	stl/stl_deque.h	/^      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_destroy_nodes	stl/stl_deque.h	/^    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_get_Tp_allocator	stl/stl_deque.h	/^      _M_get_Tp_allocator() const$/;"	f	class:std::_Deque_base	access:protected	signature:() const
std::_Deque_base::_M_get_Tp_allocator	stl/stl_deque.h	/^      _M_get_Tp_allocator()$/;"	f	class:std::_Deque_base	access:protected	signature:()
std::_Deque_base::_M_get_map_allocator	stl/stl_deque.h	/^      _M_get_map_allocator() const$/;"	f	class:std::_Deque_base	access:protected	signature:() const
std::_Deque_base::_M_impl	stl/stl_deque.h	/^      _Deque_impl _M_impl;$/;"	m	class:std::_Deque_base	access:protected
std::_Deque_base::_M_initialize_map	stl/stl_deque.h	/^      void _M_initialize_map(size_t);$/;"	p	class:std::_Deque_base	access:protected	signature:(size_t)
std::_Deque_base::_M_initialize_map	stl/stl_deque.h	/^    _M_initialize_map(size_t __num_elements)$/;"	f	class:std::_Deque_base	signature:(size_t __num_elements)
std::_Deque_base::_Map_alloc_type	stl/stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
std::_Deque_base::_S_initial_map_size	stl/stl_deque.h	/^      enum { _S_initial_map_size = 8 };$/;"	e	enum:std::_Deque_base::__anon1
std::_Deque_base::_Tp_alloc_type	stl/stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp>::other  _Tp_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
std::_Deque_base::allocator_type	stl/stl_deque.h	/^      typedef _Alloc                  allocator_type;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::const_iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::get_allocator	stl/stl_deque.h	/^      get_allocator() const$/;"	f	class:std::_Deque_base	access:public	signature:() const
std::_Deque_base::iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::~_Deque_base	stl/stl_deque.h	/^      ~_Deque_base();$/;"	p	class:std::_Deque_base	access:public	signature:()
std::_Deque_base::~_Deque_base	stl/stl_deque.h	/^    ~_Deque_base()$/;"	f	class:std::_Deque_base	signature:()
std::_Deque_iterator	stl/stl_deque.h	/^    struct _Deque_iterator$/;"	s	namespace:std
std::_Deque_iterator::_Deque_iterator	stl/stl_deque.h	/^      _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::_Deque_iterator	stl/stl_deque.h	/^      _Deque_iterator(_Tp* __x, _Map_pointer __y)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Tp* __x, _Map_pointer __y)
std::_Deque_iterator::_Deque_iterator	stl/stl_deque.h	/^      _Deque_iterator(const iterator& __x)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const iterator& __x)
std::_Deque_iterator::_M_cur	stl/stl_deque.h	/^      _Tp* _M_cur;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_first	stl/stl_deque.h	/^      _Tp* _M_first;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_last	stl/stl_deque.h	/^      _Tp* _M_last;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_node	stl/stl_deque.h	/^      _Map_pointer _M_node;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_set_node	stl/stl_deque.h	/^      _M_set_node(_Map_pointer __new_node)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Map_pointer __new_node)
std::_Deque_iterator::_Map_pointer	stl/stl_deque.h	/^      typedef _Tp**                           _Map_pointer;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_S_buffer_size	stl/stl_deque.h	/^      static size_t _S_buffer_size()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::_Self	stl/stl_deque.h	/^      typedef _Deque_iterator                 _Self;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::const_iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::difference_type	stl/stl_deque.h	/^      typedef ptrdiff_t                       difference_type;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::iterator	stl/stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::iterator_category	stl/stl_deque.h	/^      typedef std::random_access_iterator_tag iterator_category;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::operator *	stl/stl_deque.h	/^      operator*() const$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
std::_Deque_iterator::operator +	stl/stl_deque.h	/^      operator+(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
std::_Deque_iterator::operator ++	stl/stl_deque.h	/^      operator++()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::operator ++	stl/stl_deque.h	/^      operator++(int)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
std::_Deque_iterator::operator +=	stl/stl_deque.h	/^      operator+=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
std::_Deque_iterator::operator -	stl/stl_deque.h	/^      operator-(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
std::_Deque_iterator::operator --	stl/stl_deque.h	/^      operator--()$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::operator --	stl/stl_deque.h	/^      operator--(int)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
std::_Deque_iterator::operator -=	stl/stl_deque.h	/^      operator-=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
std::_Deque_iterator::operator ->	stl/stl_deque.h	/^      operator->() const$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
std::_Deque_iterator::operator []	stl/stl_deque.h	/^      operator[](difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
std::_Deque_iterator::pointer	stl/stl_deque.h	/^      typedef _Ptr                            pointer;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::reference	stl/stl_deque.h	/^      typedef _Ref                            reference;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::size_type	stl/stl_deque.h	/^      typedef size_t                          size_type;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::value_type	stl/stl_deque.h	/^      typedef _Tp                             value_type;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Destroy	stl/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::_Destroy	stl/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Allocator __alloc)
std::_Destroy	stl/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp>)
std::_Destroy	stl/stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	f	namespace:std	signature:(_Tp* __pointer)
std::_Identity	stl/stl_function.h	/^    struct _Identity : public unary_function<_Tp,_Tp>$/;"	s	namespace:std	inherits:unary_function
std::_Identity::operator ()	stl/stl_function.h	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity	access:public	signature:(_Tp& __x) const
std::_Identity::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity	access:public	signature:(const _Tp& __x) const
std::_List_base	stl/stl_list.h	/^    class _List_base$/;"	c	namespace:std
std::_List_base::_List_base	stl/stl_list.h	/^      _List_base(const allocator_type& __a)$/;"	f	class:std::_List_base	access:public	signature:(const allocator_type& __a)
std::_List_base::_List_impl	stl/stl_list.h	/^      struct _List_impl $/;"	s	class:std::_List_base	inherits:_Node_alloc_type	access:protected
std::_List_base::_List_impl::_List_impl	stl/stl_list.h	/^	_List_impl(const _Node_alloc_type& __a)$/;"	f	struct:std::_List_base::_List_impl	access:public	signature:(const _Node_alloc_type& __a)
std::_List_base::_List_impl::_M_node	stl/stl_list.h	/^	_List_node_base _M_node;$/;"	m	struct:std::_List_base::_List_impl	access:public
std::_List_base::_M_clear	stl/stl_list.h	/^      _M_clear();$/;"	p	class:std::_List_base	access:public	signature:()
std::_List_base::_M_get_Node_allocator	stl/stl_list.h	/^      _M_get_Node_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
std::_List_base::_M_get_Node_allocator	stl/stl_list.h	/^      _M_get_Node_allocator()$/;"	f	class:std::_List_base	access:public	signature:()
std::_List_base::_M_get_Tp_allocator	stl/stl_list.h	/^      _M_get_Tp_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
std::_List_base::_M_get_node	stl/stl_list.h	/^      _M_get_node()$/;"	f	class:std::_List_base	access:protected	signature:()
std::_List_base::_M_impl	stl/stl_list.h	/^      _List_impl _M_impl;$/;"	m	class:std::_List_base	access:protected
std::_List_base::_M_init	stl/stl_list.h	/^      _M_init()$/;"	f	class:std::_List_base	access:public	signature:()
std::_List_base::_M_put_node	stl/stl_list.h	/^      _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:std::_List_base	access:protected	signature:(_List_node<_Tp>* __p)
std::_List_base::_Node_alloc_type	stl/stl_list.h	/^        _Node_alloc_type;$/;"	t	class:std::_List_base	access:protected
std::_List_base::_Tp_alloc_type	stl/stl_list.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	t	class:std::_List_base	access:protected
std::_List_base::allocator_type	stl/stl_list.h	/^      typedef _Alloc allocator_type;$/;"	t	class:std::_List_base	access:public
std::_List_base::get_allocator	stl/stl_list.h	/^      get_allocator() const$/;"	f	class:std::_List_base	access:public	signature:() const
std::_List_base::~_List_base	stl/stl_list.h	/^      ~_List_base()$/;"	f	class:std::_List_base	access:public	signature:()
std::_List_const_iterator	stl/stl_list.h	/^    struct _List_const_iterator$/;"	s	namespace:std
std::_List_const_iterator::_List_const_iterator	stl/stl_list.h	/^      _List_const_iterator()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
std::_List_const_iterator::_List_const_iterator	stl/stl_list.h	/^      _List_const_iterator(const _List_node_base* __x)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _List_node_base* __x)
std::_List_const_iterator::_List_const_iterator	stl/stl_list.h	/^      _List_const_iterator(const iterator& __x)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const iterator& __x)
std::_List_const_iterator::_M_node	stl/stl_list.h	/^      const _List_node_base* _M_node;$/;"	m	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::_Node	stl/stl_list.h	/^      typedef const _List_node<_Tp>              _Node;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::_Self	stl/stl_list.h	/^      typedef _List_const_iterator<_Tp>          _Self;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::difference_type	stl/stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::iterator	stl/stl_list.h	/^      typedef _List_iterator<_Tp>                iterator;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::iterator_category	stl/stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::operator !=	stl/stl_list.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _Self& __x) const
std::_List_const_iterator::operator *	stl/stl_list.h	/^      operator*() const$/;"	f	struct:std::_List_const_iterator	access:public	signature:() const
std::_List_const_iterator::operator ++	stl/stl_list.h	/^      operator++()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
std::_List_const_iterator::operator ++	stl/stl_list.h	/^      operator++(int)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(int)
std::_List_const_iterator::operator --	stl/stl_list.h	/^      operator--()$/;"	f	struct:std::_List_const_iterator	access:public	signature:()
std::_List_const_iterator::operator --	stl/stl_list.h	/^      operator--(int)$/;"	f	struct:std::_List_const_iterator	access:public	signature:(int)
std::_List_const_iterator::operator ->	stl/stl_list.h	/^      operator->() const$/;"	f	struct:std::_List_const_iterator	access:public	signature:() const
std::_List_const_iterator::operator ==	stl/stl_list.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_List_const_iterator	access:public	signature:(const _Self& __x) const
std::_List_const_iterator::pointer	stl/stl_list.h	/^      typedef const _Tp*                         pointer;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::reference	stl/stl_list.h	/^      typedef const _Tp&                         reference;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_const_iterator::value_type	stl/stl_list.h	/^      typedef _Tp                                value_type;$/;"	t	struct:std::_List_const_iterator	access:public
std::_List_iterator	stl/stl_list.h	/^    struct _List_iterator$/;"	s	namespace:std
std::_List_iterator::_List_iterator	stl/stl_list.h	/^      _List_iterator()$/;"	f	struct:std::_List_iterator	access:public	signature:()
std::_List_iterator::_List_iterator	stl/stl_list.h	/^      _List_iterator(_List_node_base* __x)$/;"	f	struct:std::_List_iterator	access:public	signature:(_List_node_base* __x)
std::_List_iterator::_M_node	stl/stl_list.h	/^      _List_node_base* _M_node;$/;"	m	struct:std::_List_iterator	access:public
std::_List_iterator::_Node	stl/stl_list.h	/^      typedef _List_node<_Tp>                    _Node;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::_Self	stl/stl_list.h	/^      typedef _List_iterator<_Tp>                _Self;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::difference_type	stl/stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::iterator_category	stl/stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::operator !=	stl/stl_list.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_List_iterator	access:public	signature:(const _Self& __x) const
std::_List_iterator::operator *	stl/stl_list.h	/^      operator*() const$/;"	f	struct:std::_List_iterator	access:public	signature:() const
std::_List_iterator::operator ++	stl/stl_list.h	/^      operator++()$/;"	f	struct:std::_List_iterator	access:public	signature:()
std::_List_iterator::operator ++	stl/stl_list.h	/^      operator++(int)$/;"	f	struct:std::_List_iterator	access:public	signature:(int)
std::_List_iterator::operator --	stl/stl_list.h	/^      operator--()$/;"	f	struct:std::_List_iterator	access:public	signature:()
std::_List_iterator::operator --	stl/stl_list.h	/^      operator--(int)$/;"	f	struct:std::_List_iterator	access:public	signature:(int)
std::_List_iterator::operator ->	stl/stl_list.h	/^      operator->() const$/;"	f	struct:std::_List_iterator	access:public	signature:() const
std::_List_iterator::operator ==	stl/stl_list.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_List_iterator	access:public	signature:(const _Self& __x) const
std::_List_iterator::pointer	stl/stl_list.h	/^      typedef _Tp*                               pointer;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::reference	stl/stl_list.h	/^      typedef _Tp&                               reference;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::value_type	stl/stl_list.h	/^      typedef _Tp                                value_type;$/;"	t	struct:std::_List_iterator	access:public
std::_List_node	stl/stl_list.h	/^    struct _List_node : public _List_node_base$/;"	s	namespace:std	inherits:_List_node_base
std::_List_node::_M_data	stl/stl_list.h	/^      _Tp _M_data;                \/\/\/< User's data.$/;"	m	struct:std::_List_node	access:public
std::_List_node_base	stl/stl_list.h	/^  struct _List_node_base$/;"	s	namespace:std
std::_List_node_base::_M_next	stl/stl_list.h	/^    _List_node_base* _M_next;   \/\/\/< Self-explanatory$/;"	m	struct:std::_List_node_base	access:public
std::_List_node_base::_M_prev	stl/stl_list.h	/^    _List_node_base* _M_prev;   \/\/\/< Self-explanatory$/;"	m	struct:std::_List_node_base	access:public
std::_List_node_base::hook	stl/stl_list.h	/^    hook(_List_node_base * const __position);$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base * const __position)
std::_List_node_base::reverse	stl/stl_list.h	/^    reverse();$/;"	p	struct:std::_List_node_base	access:public	signature:()
std::_List_node_base::swap	stl/stl_list.h	/^    swap(_List_node_base& __x, _List_node_base& __y);$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base& __x, _List_node_base& __y)
std::_List_node_base::transfer	stl/stl_list.h	/^    transfer(_List_node_base * const __first,$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base * const __first, _List_node_base * const __last)
std::_List_node_base::unhook	stl/stl_list.h	/^    unhook();$/;"	p	struct:std::_List_node_base	access:public	signature:()
std::_Rb_tree	stl/stl_tree.h	/^    class _Rb_tree$/;"	c	namespace:std
std::_Rb_tree::_Base_ptr	stl/stl_tree.h	/^      typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
std::_Rb_tree::_Const_Base_ptr	stl/stl_tree.h	/^      typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
std::_Rb_tree::_Const_Link_type	stl/stl_tree.h	/^      typedef const _Rb_tree_node* _Const_Link_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::_Link_type	stl/stl_tree.h	/^      typedef _Rb_tree_node* _Link_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::_M_begin	stl/stl_tree.h	/^      _M_begin() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_M_begin	stl/stl_tree.h	/^      _M_begin()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
std::_Rb_tree::_M_clone_node	stl/stl_tree.h	/^      _M_clone_node(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
std::_Rb_tree::_M_copy	stl/stl_tree.h	/^      _M_copy(_Const_Link_type __x, _Link_type __p);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Const_Link_type __x, _Link_type __p)
std::_Rb_tree::_M_copy	stl/stl_tree.h	/^    _M_copy(_Const_Link_type __x, _Link_type __p)$/;"	f	class:std::_Rb_tree	signature:(_Const_Link_type __x, _Link_type __p)
std::_Rb_tree::_M_create_node	stl/stl_tree.h	/^      _M_create_node(const value_type& __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(const value_type& __x)
std::_Rb_tree::_M_destroy_node	stl/stl_tree.h	/^      _M_destroy_node(_Link_type __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __p)
std::_Rb_tree::_M_end	stl/stl_tree.h	/^      _M_end() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_M_end	stl/stl_tree.h	/^      _M_end()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
std::_Rb_tree::_M_erase	stl/stl_tree.h	/^      _M_erase(_Link_type __x);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Link_type __x)
std::_Rb_tree::_M_erase	stl/stl_tree.h	/^    _M_erase(_Link_type __x)$/;"	f	class:std::_Rb_tree	signature:(_Link_type __x)
std::_Rb_tree::_M_get_Node_allocator	stl/stl_tree.h	/^      _M_get_Node_allocator() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::_M_get_Node_allocator	stl/stl_tree.h	/^      _M_get_Node_allocator()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::_M_get_node	stl/stl_tree.h	/^      _M_get_node()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
std::_Rb_tree::_M_impl	stl/stl_tree.h	/^      _Rb_tree_impl<_Compare> _M_impl;$/;"	m	class:std::_Rb_tree	access:protected
std::_Rb_tree::_M_insert	stl/stl_tree.h	/^      _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
std::_Rb_tree::_M_insert	stl/stl_tree.h	/^      _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __y,$/;"	p	class:std::_Rb_tree	access:private	signature:(_Const_Base_ptr __x, _Const_Base_ptr __y, const value_type& __v)
std::_Rb_tree::_M_insert	stl/stl_tree.h	/^    _M_insert(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
std::_Rb_tree::_M_insert	stl/stl_tree.h	/^    _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^        _M_insert_equal(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(const_iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position, const value_type& __x)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^      _M_insert_equal(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^    _M_insert_equal(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^    _M_insert_equal(const_iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position, const _Val& __v)
std::_Rb_tree::_M_insert_equal	stl/stl_tree.h	/^    _M_insert_equal(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
std::_Rb_tree::_M_insert_equal_lower	stl/stl_tree.h	/^      _M_insert_equal_lower(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
std::_Rb_tree::_M_insert_equal_lower	stl/stl_tree.h	/^    _M_insert_equal_lower(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
std::_Rb_tree::_M_insert_lower	stl/stl_tree.h	/^      _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
std::_Rb_tree::_M_insert_lower	stl/stl_tree.h	/^    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^        _M_insert_unique(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(const_iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position, const value_type& __x)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^      _M_insert_unique(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^    _M_insert_unique(const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Val& __v)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^    _M_insert_unique(const_iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position, const _Val& __v)
std::_Rb_tree::_M_insert_unique	stl/stl_tree.h	/^    _M_insert_unique(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
std::_Rb_tree::_M_leftmost	stl/stl_tree.h	/^      _M_leftmost() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_M_leftmost	stl/stl_tree.h	/^      _M_leftmost()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
std::_Rb_tree::_M_put_node	stl/stl_tree.h	/^      _M_put_node(_Rb_tree_node* __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Rb_tree_node* __p)
std::_Rb_tree::_M_rightmost	stl/stl_tree.h	/^      _M_rightmost() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_M_rightmost	stl/stl_tree.h	/^      _M_rightmost()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
std::_Rb_tree::_M_root	stl/stl_tree.h	/^      _M_root() const$/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_M_root	stl/stl_tree.h	/^      _M_root()$/;"	f	class:std::_Rb_tree	access:protected	signature:()
std::_Rb_tree::_Node_allocator	stl/stl_tree.h	/^              _Node_allocator;$/;"	t	class:std::_Rb_tree	access:private
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^      _Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^      _Rb_tree(const _Compare& __comp)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp)
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^      _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp, const allocator_type& __a)
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^      _Rb_tree(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
std::_Rb_tree::_Rb_tree_impl	stl/stl_tree.h	/^        struct _Rb_tree_impl : public _Node_allocator$/;"	s	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
std::_Rb_tree::_Rb_tree_impl	stl/stl_tree.h	/^        struct _Rb_tree_impl<_Key_compare, true> : public _Node_allocator $/;"	s	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
std::_Rb_tree::_Rb_tree_impl::_M_header	stl/stl_tree.h	/^	  _Rb_tree_node_base 	_M_header;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
std::_Rb_tree::_Rb_tree_impl::_M_key_compare	stl/stl_tree.h	/^	  _Key_compare		_M_key_compare;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
std::_Rb_tree::_Rb_tree_impl::_M_key_compare	stl/stl_tree.h	/^	  _Key_compare 		_M_key_compare;$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
std::_Rb_tree::_Rb_tree_impl::_M_node_count	stl/stl_tree.h	/^	  size_type 		_M_node_count; \/\/ Keeps track of size of tree.$/;"	m	struct:std::_Rb_tree::_Rb_tree_impl	access:public
std::_Rb_tree::_Rb_tree_impl::_Rb_tree_impl	stl/stl_tree.h	/^	  _Rb_tree_impl(const _Node_allocator& __a = _Node_allocator(),$/;"	f	struct:std::_Rb_tree::_Rb_tree_impl	access:public	signature:(const _Node_allocator& __a = _Node_allocator(), const _Key_compare& __comp = _Key_compare())
std::_Rb_tree::_Rb_tree_node	stl/stl_tree.h	/^      typedef _Rb_tree_node<_Val> _Rb_tree_node;$/;"	t	class:std::_Rb_tree	access:protected
std::_Rb_tree::_S_key	stl/stl_tree.h	/^      _S_key(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_key	stl/stl_tree.h	/^      _S_key(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
std::_Rb_tree::_S_left	stl/stl_tree.h	/^      _S_left(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_left	stl/stl_tree.h	/^      _S_left(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_maximum	stl/stl_tree.h	/^      _S_maximum(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_maximum	stl/stl_tree.h	/^      _S_maximum(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_minimum	stl/stl_tree.h	/^      _S_minimum(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_minimum	stl/stl_tree.h	/^      _S_minimum(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_right	stl/stl_tree.h	/^      _S_right(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_right	stl/stl_tree.h	/^      _S_right(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_value	stl/stl_tree.h	/^      _S_value(_Const_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_value	stl/stl_tree.h	/^      _S_value(_Const_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Const_Link_type __x)
std::_Rb_tree::__rb_verify	stl/stl_tree.h	/^      __rb_verify() const;$/;"	p	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::__rb_verify	stl/stl_tree.h	/^    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:std::_Rb_tree	signature:() const
std::_Rb_tree::allocator_type	stl/stl_tree.h	/^      typedef _Alloc allocator_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::begin	stl/stl_tree.h	/^      begin() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::begin	stl/stl_tree.h	/^      begin()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::clear	stl/stl_tree.h	/^      clear()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::const_iterator	stl/stl_tree.h	/^      typedef _Rb_tree_const_iterator<value_type> const_iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::const_pointer	stl/stl_tree.h	/^      typedef const value_type* const_pointer;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::const_reference	stl/stl_tree.h	/^      typedef const value_type& const_reference;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::const_reverse_iterator	stl/stl_tree.h	/^      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::count	stl/stl_tree.h	/^      count(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::count	stl/stl_tree.h	/^    count(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::difference_type	stl/stl_tree.h	/^      typedef ptrdiff_t difference_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::empty	stl/stl_tree.h	/^      empty() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::end	stl/stl_tree.h	/^      end() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::end	stl/stl_tree.h	/^      end()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::equal_range	stl/stl_tree.h	/^      equal_range(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::equal_range	stl/stl_tree.h	/^      equal_range(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::equal_range	stl/stl_tree.h	/^    equal_range(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::equal_range	stl/stl_tree.h	/^    equal_range(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::erase	stl/stl_tree.h	/^      erase(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::erase	stl/stl_tree.h	/^      erase(const key_type* __first, const key_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type* __first, const key_type* __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^      erase(const_iterator __first, const_iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^      erase(const_iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __position)
std::_Rb_tree::erase	stl/stl_tree.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __first, iterator __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^      erase(iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position)
std::_Rb_tree::erase	stl/stl_tree.h	/^    erase(const _Key& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __x)
std::_Rb_tree::erase	stl/stl_tree.h	/^    erase(const _Key* __first, const _Key* __last)$/;"	f	class:std::_Rb_tree	signature:(const _Key* __first, const _Key* __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^    erase(const_iterator __first, const_iterator __last)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __first, const_iterator __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^    erase(const_iterator __position)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __position)
std::_Rb_tree::erase	stl/stl_tree.h	/^    erase(iterator __first, iterator __last)$/;"	f	class:std::_Rb_tree	signature:(iterator __first, iterator __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^    erase(iterator __position)$/;"	f	class:std::_Rb_tree	signature:(iterator __position)
std::_Rb_tree::find	stl/stl_tree.h	/^      find(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::find	stl/stl_tree.h	/^      find(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::find	stl/stl_tree.h	/^    find(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::find	stl/stl_tree.h	/^    find(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::get_allocator	stl/stl_tree.h	/^      get_allocator() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::iterator	stl/stl_tree.h	/^      typedef _Rb_tree_iterator<value_type>       iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::key_comp	stl/stl_tree.h	/^      key_comp() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::key_type	stl/stl_tree.h	/^      typedef _Key key_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^      lower_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^      lower_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^    lower_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^    lower_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::max_size	stl/stl_tree.h	/^      max_size() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::operator =	stl/stl_tree.h	/^      operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
std::_Rb_tree::operator =	stl/stl_tree.h	/^    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
std::_Rb_tree::pointer	stl/stl_tree.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::rbegin	stl/stl_tree.h	/^      rbegin() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::rbegin	stl/stl_tree.h	/^      rbegin()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::reference	stl/stl_tree.h	/^      typedef value_type& reference;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::rend	stl/stl_tree.h	/^      rend() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::rend	stl/stl_tree.h	/^      rend()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::reverse_iterator	stl/stl_tree.h	/^      typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::size	stl/stl_tree.h	/^      size() const$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::size_type	stl/stl_tree.h	/^      typedef size_t size_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::swap	stl/stl_tree.h	/^      swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);$/;"	p	class:std::_Rb_tree	access:public	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
std::_Rb_tree::swap	stl/stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)$/;"	f	class:std::_Rb_tree	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^      upper_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^      upper_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^    upper_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^    upper_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::value_type	stl/stl_tree.h	/^      typedef _Val value_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::~_Rb_tree	stl/stl_tree.h	/^      ~_Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree_black_count	stl/stl_tree.h	/^  _Rb_tree_black_count(const _Rb_tree_node_base* __node,$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __node, const _Rb_tree_node_base* __root)
std::_Rb_tree_color	stl/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	g	namespace:std
std::_Rb_tree_const_iterator	stl/stl_tree.h	/^    struct _Rb_tree_const_iterator$/;"	s	namespace:std
std::_Rb_tree_const_iterator::_Base_ptr	stl/stl_tree.h	/^      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::_Link_type	stl/stl_tree.h	/^      typedef const _Rb_tree_node<_Tp>*           _Link_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::_M_node	stl/stl_tree.h	/^      _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::_Rb_tree_const_iterator	stl/stl_tree.h	/^      _Rb_tree_const_iterator()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
std::_Rb_tree_const_iterator::_Rb_tree_const_iterator	stl/stl_tree.h	/^      _Rb_tree_const_iterator(_Link_type __x)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(_Link_type __x)
std::_Rb_tree_const_iterator::_Rb_tree_const_iterator	stl/stl_tree.h	/^      _Rb_tree_const_iterator(const iterator& __it)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const iterator& __it)
std::_Rb_tree_const_iterator::_Self	stl/stl_tree.h	/^      typedef _Rb_tree_const_iterator<_Tp>        _Self;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::difference_type	stl/stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::iterator	stl/stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp> iterator;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::iterator_category	stl/stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::operator !=	stl/stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const _Self& __x) const
std::_Rb_tree_const_iterator::operator *	stl/stl_tree.h	/^      operator*() const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:() const
std::_Rb_tree_const_iterator::operator ++	stl/stl_tree.h	/^      operator++()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
std::_Rb_tree_const_iterator::operator ++	stl/stl_tree.h	/^      operator++(int)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(int)
std::_Rb_tree_const_iterator::operator --	stl/stl_tree.h	/^      operator--()$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:()
std::_Rb_tree_const_iterator::operator --	stl/stl_tree.h	/^      operator--(int)$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(int)
std::_Rb_tree_const_iterator::operator ->	stl/stl_tree.h	/^      operator->() const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:() const
std::_Rb_tree_const_iterator::operator ==	stl/stl_tree.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_const_iterator	access:public	signature:(const _Self& __x) const
std::_Rb_tree_const_iterator::pointer	stl/stl_tree.h	/^      typedef const _Tp* pointer;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::reference	stl/stl_tree.h	/^      typedef const _Tp& reference;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_const_iterator::value_type	stl/stl_tree.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
std::_Rb_tree_decrement	stl/stl_tree.h	/^  _Rb_tree_decrement(_Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(_Rb_tree_node_base* __x)
std::_Rb_tree_decrement	stl/stl_tree.h	/^  _Rb_tree_decrement(const _Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __x)
std::_Rb_tree_increment	stl/stl_tree.h	/^  _Rb_tree_increment(_Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(_Rb_tree_node_base* __x)
std::_Rb_tree_increment	stl/stl_tree.h	/^  _Rb_tree_increment(const _Rb_tree_node_base* __x);$/;"	p	namespace:std	signature:(const _Rb_tree_node_base* __x)
std::_Rb_tree_insert_and_rebalance	stl/stl_tree.h	/^  _Rb_tree_insert_and_rebalance(const bool __insert_left,$/;"	p	namespace:std	signature:(const bool __insert_left, _Rb_tree_node_base* __x, _Rb_tree_node_base* __p, _Rb_tree_node_base& __header)
std::_Rb_tree_iterator	stl/stl_tree.h	/^    struct _Rb_tree_iterator$/;"	s	namespace:std
std::_Rb_tree_iterator::_Base_ptr	stl/stl_tree.h	/^      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::_Link_type	stl/stl_tree.h	/^      typedef _Rb_tree_node<_Tp>*           _Link_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::_M_node	stl/stl_tree.h	/^      _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::_Rb_tree_iterator	stl/stl_tree.h	/^      _Rb_tree_iterator()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
std::_Rb_tree_iterator::_Rb_tree_iterator	stl/stl_tree.h	/^      _Rb_tree_iterator(_Link_type __x)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(_Link_type __x)
std::_Rb_tree_iterator::_Self	stl/stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp>        _Self;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::difference_type	stl/stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::iterator_category	stl/stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::operator !=	stl/stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const _Self& __x) const
std::_Rb_tree_iterator::operator *	stl/stl_tree.h	/^      operator*() const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
std::_Rb_tree_iterator::operator ++	stl/stl_tree.h	/^      operator++()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
std::_Rb_tree_iterator::operator ++	stl/stl_tree.h	/^      operator++(int)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
std::_Rb_tree_iterator::operator --	stl/stl_tree.h	/^      operator--()$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
std::_Rb_tree_iterator::operator --	stl/stl_tree.h	/^      operator--(int)$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
std::_Rb_tree_iterator::operator ->	stl/stl_tree.h	/^      operator->() const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
std::_Rb_tree_iterator::operator ==	stl/stl_tree.h	/^      operator==(const _Self& __x) const$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const _Self& __x) const
std::_Rb_tree_iterator::pointer	stl/stl_tree.h	/^      typedef _Tp* pointer;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::reference	stl/stl_tree.h	/^      typedef _Tp& reference;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::value_type	stl/stl_tree.h	/^      typedef _Tp  value_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_node	stl/stl_tree.h	/^    struct _Rb_tree_node : public _Rb_tree_node_base$/;"	s	namespace:std	inherits:_Rb_tree_node_base
std::_Rb_tree_node::_Link_type	stl/stl_tree.h	/^      typedef _Rb_tree_node<_Val>* _Link_type;$/;"	t	struct:std::_Rb_tree_node	access:public
std::_Rb_tree_node::_M_value_field	stl/stl_tree.h	/^      _Val _M_value_field;$/;"	m	struct:std::_Rb_tree_node	access:public
std::_Rb_tree_node_base	stl/stl_tree.h	/^  struct _Rb_tree_node_base$/;"	s	namespace:std
std::_Rb_tree_node_base::_Base_ptr	stl/stl_tree.h	/^    typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_Const_Base_ptr	stl/stl_tree.h	/^    typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_color	stl/stl_tree.h	/^    _Rb_tree_color	_M_color;$/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_left	stl/stl_tree.h	/^    _Base_ptr		_M_left;$/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_parent	stl/stl_tree.h	/^    _Base_ptr		_M_parent;$/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_right	stl/stl_tree.h	/^    _Base_ptr		_M_right;$/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_S_maximum	stl/stl_tree.h	/^    _S_maximum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
std::_Rb_tree_node_base::_S_maximum	stl/stl_tree.h	/^    _S_maximum(_Const_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Const_Base_ptr __x)
std::_Rb_tree_node_base::_S_minimum	stl/stl_tree.h	/^    _S_minimum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
std::_Rb_tree_node_base::_S_minimum	stl/stl_tree.h	/^    _S_minimum(_Const_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Const_Base_ptr __x)
std::_Rb_tree_rebalance_for_erase	stl/stl_tree.h	/^  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __z, _Rb_tree_node_base& __header)
std::_Rb_tree_rotate_left	stl/stl_tree.h	/^  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)
std::_Rb_tree_rotate_right	stl/stl_tree.h	/^  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x,$/;"	p	namespace:std	signature:(_Rb_tree_node_base* const __x, _Rb_tree_node_base*& __root)
std::_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_S_black	stl/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	e	enum:std::_Rb_tree_color
std::_S_chunk_size	stl/stl_algo.h	/^  enum { _S_chunk_size = 7 };$/;"	e	enum:std::__anon3
std::_S_red	stl/stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	e	enum:std::_Rb_tree_color
std::_S_threshold	stl/stl_algo.h	/^  enum { _S_threshold = 16 };$/;"	e	enum:std::__anon2
std::_S_word_bit	stl/stl_bvector.h	/^  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };$/;"	e	enum:std::__anon4
std::_Select1st	stl/stl_function.h	/^    struct _Select1st : public unary_function<_Pair,$/;"	s	namespace:std	inherits:unary_function
std::_Select1st::operator ()	stl/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st	access:public	signature:(_Pair& __x) const
std::_Select1st::operator ()	stl/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st	access:public	signature:(const _Pair& __x) const
std::_Select2nd	stl/stl_function.h	/^    struct _Select2nd : public unary_function<_Pair,$/;"	s	namespace:std	inherits:unary_function
std::_Select2nd::operator ()	stl/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd	access:public	signature:(_Pair& __x) const
std::_Select2nd::operator ()	stl/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd	access:public	signature:(const _Pair& __x) const
std::_Temporary_buffer	stl/stl_tempbuf.h	/^    class _Temporary_buffer$/;"	c	namespace:std
std::_Temporary_buffer::_M_buffer	stl/stl_tempbuf.h	/^      pointer    _M_buffer;$/;"	m	class:std::_Temporary_buffer	access:protected
std::_Temporary_buffer::_M_initialize_buffer	stl/stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp& __val, __false_type)$/;"	f	class:std::_Temporary_buffer	access:protected	signature:(const _Tp& __val, __false_type)
std::_Temporary_buffer::_M_initialize_buffer	stl/stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp&, __true_type) { }$/;"	f	class:std::_Temporary_buffer	access:protected	signature:(const _Tp&, __true_type)
std::_Temporary_buffer::_M_len	stl/stl_tempbuf.h	/^      size_type  _M_len;$/;"	m	class:std::_Temporary_buffer	access:protected
std::_Temporary_buffer::_M_original_len	stl/stl_tempbuf.h	/^      size_type  _M_original_len;$/;"	m	class:std::_Temporary_buffer	access:protected
std::_Temporary_buffer::_Temporary_buffer	stl/stl_tempbuf.h	/^      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);$/;"	p	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::_Temporary_buffer::_Temporary_buffer	stl/stl_tempbuf.h	/^      _Temporary_buffer(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
std::_Temporary_buffer::_Temporary_buffer	stl/stl_tempbuf.h	/^    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	class:std::_Temporary_buffer	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::_Temporary_buffer::begin	stl/stl_tempbuf.h	/^      begin()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
std::_Temporary_buffer::end	stl/stl_tempbuf.h	/^      end()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
std::_Temporary_buffer::iterator	stl/stl_tempbuf.h	/^      typedef pointer     iterator;$/;"	t	class:std::_Temporary_buffer	access:public
std::_Temporary_buffer::operator =	stl/stl_tempbuf.h	/^      operator=(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
std::_Temporary_buffer::pointer	stl/stl_tempbuf.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Temporary_buffer	access:public
std::_Temporary_buffer::requested_size	stl/stl_tempbuf.h	/^      requested_size() const$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
std::_Temporary_buffer::size	stl/stl_tempbuf.h	/^      size() const$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
std::_Temporary_buffer::size_type	stl/stl_tempbuf.h	/^      typedef ptrdiff_t   size_type;$/;"	t	class:std::_Temporary_buffer	access:public
std::_Temporary_buffer::value_type	stl/stl_tempbuf.h	/^      typedef _Tp         value_type;$/;"	t	class:std::_Temporary_buffer	access:public
std::_Temporary_buffer::~_Temporary_buffer	stl/stl_tempbuf.h	/^      ~_Temporary_buffer()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
std::_Vector_base	stl/stl_vector.h	/^    struct _Vector_base$/;"	s	namespace:std
std::_Vector_base::_M_allocate	stl/stl_vector.h	/^      _M_allocate(size_t __n)$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n)
std::_Vector_base::_M_deallocate	stl/stl_vector.h	/^      _M_deallocate(_Tp* __p, size_t __n)$/;"	f	struct:std::_Vector_base	access:public	signature:(_Tp* __p, size_t __n)
std::_Vector_base::_M_get_Tp_allocator	stl/stl_vector.h	/^      _M_get_Tp_allocator() const$/;"	f	struct:std::_Vector_base	access:public	signature:() const
std::_Vector_base::_M_get_Tp_allocator	stl/stl_vector.h	/^      _M_get_Tp_allocator()$/;"	f	struct:std::_Vector_base	access:public	signature:()
std::_Vector_base::_M_impl	stl/stl_vector.h	/^      _Vector_impl _M_impl;$/;"	m	struct:std::_Vector_base	access:public
std::_Vector_base::_Tp_alloc_type	stl/stl_vector.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	t	struct:std::_Vector_base	access:public
std::_Vector_base::_Vector_base	stl/stl_vector.h	/^      _Vector_base(const allocator_type& __a)$/;"	f	struct:std::_Vector_base	access:public	signature:(const allocator_type& __a)
std::_Vector_base::_Vector_base	stl/stl_vector.h	/^      _Vector_base(size_t __n, const allocator_type& __a)$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n, const allocator_type& __a)
std::_Vector_base::_Vector_impl	stl/stl_vector.h	/^      struct _Vector_impl $/;"	s	struct:std::_Vector_base	inherits:_Tp_alloc_type	access:public
std::_Vector_base::_Vector_impl::_M_end_of_storage	stl/stl_vector.h	/^	_Tp*           _M_end_of_storage;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
std::_Vector_base::_Vector_impl::_M_finish	stl/stl_vector.h	/^	_Tp*           _M_finish;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
std::_Vector_base::_Vector_impl::_M_start	stl/stl_vector.h	/^	_Tp*           _M_start;$/;"	m	struct:std::_Vector_base::_Vector_impl	access:public
std::_Vector_base::_Vector_impl::_Vector_impl	stl/stl_vector.h	/^	_Vector_impl(_Tp_alloc_type const& __a)$/;"	f	struct:std::_Vector_base::_Vector_impl	access:public	signature:(_Tp_alloc_type const& __a)
std::_Vector_base::allocator_type	stl/stl_vector.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::_Vector_base	access:public
std::_Vector_base::get_allocator	stl/stl_vector.h	/^      get_allocator() const$/;"	f	struct:std::_Vector_base	access:public	signature:() const
std::_Vector_base::~_Vector_base	stl/stl_vector.h	/^      ~_Vector_base()$/;"	f	struct:std::_Vector_base	access:public	signature:()
std::__adjust_heap	stl/stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)
std::__adjust_heap	stl/stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)
std::__advance	stl/stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std	signature:(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)
std::__advance	stl/stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n, input_iterator_tag)
std::__advance	stl/stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std	signature:(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)
std::__chunk_insertion_sort	stl/stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size)
std::__chunk_insertion_sort	stl/stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size, _Compare __comp)
std::__copy	stl/stl_algobase.h	/^    struct __copy$/;"	s	namespace:std
std::__copy	stl/stl_algobase.h	/^    struct __copy<_BoolType, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy	stl/stl_algobase.h	/^    struct __copy<true, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy::copy	stl/stl_algobase.h	/^        copy(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy	access:public	signature:(_II __first, _II __last, _OI __result)
std::__copy::copy	stl/stl_algobase.h	/^        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
std::__copy_aux	stl/stl_algobase.h	/^    __copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>);$/;"	p	namespace:std	signature:(_CharT*, _CharT*, ostreambuf_iterator<_CharT>)
std::__copy_aux	stl/stl_algobase.h	/^    __copy_aux(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	signature:(_II __first, _II __last, _OI __result)
std::__copy_aux	stl/stl_algobase.h	/^    __copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>);$/;"	p	namespace:std	signature:(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>)
std::__copy_aux	stl/stl_algobase.h	/^    __copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, _CharT*)
std::__copy_backward	stl/stl_algobase.h	/^    struct __copy_backward$/;"	s	namespace:std
std::__copy_backward	stl/stl_algobase.h	/^    struct __copy_backward<_BoolType, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_backward	stl/stl_algobase.h	/^    struct __copy_backward<true, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_backward::__copy_b	stl/stl_algobase.h	/^        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
std::__copy_backward::__copy_b	stl/stl_algobase.h	/^        __copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_backward	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
std::__copy_backward_aux	stl/stl_algobase.h	/^    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
std::__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal$/;"	s	namespace:std
std::__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal<false, true>$/;"	s	namespace:std
std::__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal<true, false>$/;"	s	namespace:std
std::__copy_backward_normal	stl/stl_algobase.h	/^    struct __copy_backward_normal<true, true>$/;"	s	namespace:std
std::__copy_backward_normal::__copy_b_n	stl/stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_backward_normal	access:public	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
std::__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal$/;"	s	namespace:std
std::__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal<false, true>$/;"	s	namespace:std
std::__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal<true, false>$/;"	s	namespace:std
std::__copy_normal	stl/stl_algobase.h	/^    struct __copy_normal<true, true>$/;"	s	namespace:std
std::__copy_normal::__copy_n	stl/stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_normal	access:public	signature:(_II __first, _II __last, _OI __result)
std::__deque_buf_size	stl/stl_deque.h	/^  __deque_buf_size(size_t __size)$/;"	f	namespace:std	signature:(size_t __size)
std::__destroy_aux	stl/stl_construct.h	/^    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, __false_type)
std::__destroy_aux	stl/stl_construct.h	/^    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)$/;"	f	namespace:std	signature:(_ForwardIterator, _ForwardIterator, __true_type)
std::__distance	stl/stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::__distance	stl/stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
std::__fill	stl/stl_algobase.h	/^    struct __fill$/;"	s	namespace:std
std::__fill	stl/stl_algobase.h	/^    struct __fill<true>$/;"	s	namespace:std
std::__fill::fill	stl/stl_algobase.h	/^        fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	struct:std::__fill	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
std::__fill_bvector	stl/stl_bvector.h	/^  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)$/;"	f	namespace:std	signature:(_Bit_iterator __first, _Bit_iterator __last, bool __x)
std::__fill_n	stl/stl_algobase.h	/^    struct __fill_n$/;"	s	namespace:std
std::__fill_n	stl/stl_algobase.h	/^    struct __fill_n<true>$/;"	s	namespace:std
std::__fill_n::fill_n	stl/stl_algobase.h	/^        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	struct:std::__fill_n	access:public	signature:(_OutputIterator __first, _Size __n, const _Tp& __value)
std::__final_insertion_sort	stl/stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::__final_insertion_sort	stl/stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::__find	stl/stl_algo.h	/^    __find(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __val, input_iterator_tag)
std::__find	stl/stl_algo.h	/^    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __val, random_access_iterator_tag)
std::__find_end	stl/stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag)
std::__find_end	stl/stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate __comp)
std::__find_end	stl/stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag)
std::__find_end	stl/stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate __comp)
std::__find_if	stl/stl_algo.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred, input_iterator_tag)
std::__find_if	stl/stl_algo.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate __pred, random_access_iterator_tag)
std::__gcd	stl/stl_algo.h	/^    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)$/;"	f	namespace:std	signature:(_EuclideanRingElement __m, _EuclideanRingElement __n)
std::__heap_select	stl/stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)
std::__heap_select	stl/stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
std::__inplace_stable_partition	stl/stl_algo.h	/^    __inplace_stable_partition(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len)
std::__inplace_stable_sort	stl/stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::__inplace_stable_sort	stl/stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::__insertion_sort	stl/stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::__insertion_sort	stl/stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::__introselect	stl/stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit)
std::__introselect	stl/stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)
std::__introsort_loop	stl/stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit)
std::__introsort_loop	stl/stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)
std::__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _Distance __n)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __n)
std::__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _StrictWeakOrdering __comp)
std::__is_heap	stl/stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _StrictWeakOrdering __comp, _Distance __n)
std::__iter_swap	stl/stl_algobase.h	/^    struct __iter_swap$/;"	s	namespace:std
std::__iter_swap	stl/stl_algobase.h	/^    struct __iter_swap<true>$/;"	s	namespace:std
std::__iter_swap::iter_swap	stl/stl_algobase.h	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	access:public	signature:(_ForwardIterator1 __a, _ForwardIterator2 __b)
std::__iterator_category	stl/stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
std::__lg	stl/stl_algo.h	/^    __lg(_Size __n)$/;"	f	namespace:std	signature:(_Size __n)
std::__median	stl/stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c)
std::__median	stl/stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
std::__merge_adaptive	stl/stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)
std::__merge_adaptive	stl/stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
std::__merge_backward	stl/stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result)
std::__merge_backward	stl/stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first1, _BidirectionalIterator1 __last1, _BidirectionalIterator2 __first2, _BidirectionalIterator2 __last2, _BidirectionalIterator3 __result, _Compare __comp)
std::__merge_sort_loop	stl/stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size)
std::__merge_sort_loop	stl/stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator2 __result, _Distance __step_size, _Compare __comp)
std::__merge_sort_with_buffer	stl/stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer)
std::__merge_sort_with_buffer	stl/stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Compare __comp)
std::__merge_without_buffer	stl/stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2)
std::__merge_without_buffer	stl/stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Distance __len1, _Distance __len2, _Compare __comp)
std::__partition	stl/stl_algo.h	/^    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag)
std::__partition	stl/stl_algo.h	/^    __partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag)
std::__pop_heap	stl/stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value)
std::__pop_heap	stl/stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp)
std::__push_heap	stl/stl_heap.h	/^    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)
std::__push_heap	stl/stl_heap.h	/^    __push_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)
std::__reverse	stl/stl_algo.h	/^    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)
std::__reverse	stl/stl_algo.h	/^    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
std::__rotate	stl/stl_algo.h	/^    __rotate(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, bidirectional_iterator_tag)
std::__rotate	stl/stl_algo.h	/^    __rotate(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, forward_iterator_tag)
std::__rotate	stl/stl_algo.h	/^    __rotate(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, random_access_iterator_tag)
std::__rotate_adaptive	stl/stl_algo.h	/^    __rotate_adaptive(_BidirectionalIterator1 __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator1 __first, _BidirectionalIterator1 __middle, _BidirectionalIterator1 __last, _Distance __len1, _Distance __len2, _BidirectionalIterator2 __buffer, _Distance __buffer_size)
std::__search_n	stl/stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred, std::forward_iterator_tag)
std::__search_n	stl/stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, std::forward_iterator_tag)
std::__search_n	stl/stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
std::__search_n	stl/stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Integer __count, const _Tp& __val, std::random_access_iterator_tag)
std::__stable_partition_adaptive	stl/stl_algo.h	/^    __stable_partition_adaptive(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)
std::__stable_sort_adaptive	stl/stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size)
std::__stable_sort_adaptive	stl/stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
std::__unguarded_insertion_sort	stl/stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::__unguarded_insertion_sort	stl/stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::__unguarded_linear_insert	stl/stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)$/;"	f	namespace:std	signature:(_RandomAccessIterator __last, _Tp __val)
std::__unguarded_linear_insert	stl/stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,$/;"	f	namespace:std	signature:(_RandomAccessIterator __last, _Tp __val, _Compare __comp)
std::__unguarded_partition	stl/stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot)
std::__unguarded_partition	stl/stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp __pivot, _Compare __comp)
std::__uninitialized_copy_a	stl/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator __alloc)
std::__uninitialized_copy_a	stl/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator<_Tp>)
std::__uninitialized_copy_aux	stl/stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, __false_type)
std::__uninitialized_copy_aux	stl/stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, __true_type)
std::__uninitialized_copy_copy	stl/stl_uninitialized.h	/^    __uninitialized_copy_copy(_InputIterator1 __first1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator __alloc)
std::__uninitialized_copy_fill	stl/stl_uninitialized.h	/^    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp& __x, _Allocator __alloc)
std::__uninitialized_fill_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, _Allocator __alloc)
std::__uninitialized_fill_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, allocator<_Tp2>)
std::__uninitialized_fill_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, __false_type)
std::__uninitialized_fill_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, __true_type)
std::__uninitialized_fill_copy	stl/stl_uninitialized.h	/^    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,$/;"	f	namespace:std	signature:(_ForwardIterator __result, _ForwardIterator __mid, const _Tp& __x, _InputIterator __first, _InputIterator __last, _Allocator __alloc)
std::__uninitialized_fill_n_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, _Allocator __alloc)
std::__uninitialized_fill_n_a	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, allocator<_Tp2>)
std::__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, __false_type)
std::__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x, __true_type)
std::__unique_copy	stl/stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, forward_iterator_tag, output_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, input_iterator_tag, forward_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, input_iterator_tag, output_iterator_tag)
std::accumulate	stl/stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init)
std::accumulate	stl/stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)
std::adjacent_difference	stl/stl_numeric.h	/^    adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
std::adjacent_difference	stl/stl_numeric.h	/^    adjacent_difference(_InputIterator __first,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
std::adjacent_find	stl/stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::adjacent_find	stl/stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
std::advance	stl/stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n)
std::back_insert_iterator	stl/stl_iterator.h	/^    class back_insert_iterator$/;"	c	namespace:std	inherits:iterator
std::back_insert_iterator::back_insert_iterator	stl/stl_iterator.h	/^      back_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::back_insert_iterator	access:public	signature:(_Container& __x)
std::back_insert_iterator::container	stl/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	access:protected
std::back_insert_iterator::container_type	stl/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	access:public
std::back_insert_iterator::operator *	stl/stl_iterator.h	/^      operator*()$/;"	f	class:std::back_insert_iterator	access:public	signature:()
std::back_insert_iterator::operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::back_insert_iterator	access:public	signature:()
std::back_insert_iterator::operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::back_insert_iterator	access:public	signature:(int)
std::back_insert_iterator::operator =	stl/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator	access:public	signature:(typename _Container::const_reference __value)
std::back_inserter	stl/stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	f	namespace:std	signature:(_Container& __x)
std::bidirectional_iterator_tag	stl/stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	s	namespace:std	inherits:forward_iterator_tag
std::binary_function	stl/stl_function.h	/^    struct binary_function$/;"	s	namespace:std
std::binary_function::first_argument_type	stl/stl_function.h	/^      typedef _Arg1 first_argument_type;   \/\/\/< the type of the first argument$/;"	t	struct:std::binary_function	access:public
std::binary_function::result_type	stl/stl_function.h	/^      typedef _Result result_type;         \/\/\/< type of the return type$/;"	t	struct:std::binary_function	access:public
std::binary_function::second_argument_type	stl/stl_function.h	/^      typedef _Arg2 second_argument_type;  \/\/\/< the type of the second argument$/;"	t	struct:std::binary_function	access:public
std::binary_negate	stl/stl_function.h	/^    class binary_negate$/;"	c	namespace:std	inherits:binary_function
std::binary_negate::_M_pred	stl/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	access:protected
std::binary_negate::binary_negate	stl/stl_function.h	/^      binary_negate(const _Predicate& __x)$/;"	f	class:std::binary_negate	access:public	signature:(const _Predicate& __x)
std::binary_negate::operator ()	stl/stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate	access:public	signature:(const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const
std::binary_search	stl/stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
std::binary_search	stl/stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
std::bind1st	stl/stl_function.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
std::bind2nd	stl/stl_function.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
std::binder1st	stl/stl_function.h	/^    class binder1st$/;"	c	namespace:std	inherits:unary_function
std::binder1st::binder1st	stl/stl_function.h	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation& __x, const typename _Operation::first_argument_type& __y)
std::binder1st::op	stl/stl_function.h	/^      _Operation op;$/;"	m	class:std::binder1st	access:protected
std::binder1st::operator ()	stl/stl_function.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	access:public	signature:(const typename _Operation::second_argument_type& __x) const
std::binder1st::operator ()	stl/stl_function.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	access:public	signature:(typename _Operation::second_argument_type& __x) const
std::binder1st::value	stl/stl_function.h	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	access:protected
std::binder2nd	stl/stl_function.h	/^    class binder2nd$/;"	c	namespace:std	inherits:unary_function
std::binder2nd::binder2nd	stl/stl_function.h	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation& __x, const typename _Operation::second_argument_type& __y)
std::binder2nd::op	stl/stl_function.h	/^      _Operation op;$/;"	m	class:std::binder2nd	access:protected
std::binder2nd::operator ()	stl/stl_function.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	access:public	signature:(const typename _Operation::first_argument_type& __x) const
std::binder2nd::operator ()	stl/stl_function.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	access:public	signature:(typename _Operation::first_argument_type& __x) const
std::binder2nd::value	stl/stl_function.h	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	access:protected
std::const_mem_fun1_ref_t	stl/stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
std::const_mem_fun1_ref_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	access:private
std::const_mem_fun1_ref_t::_Ret	stl/stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun1_ref_t::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
std::const_mem_fun1_t	stl/stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
std::const_mem_fun1_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	access:private
std::const_mem_fun1_t::_Ret	stl/stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun1_t::operator ()	stl/stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
std::const_mem_fun_ref_t	stl/stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function
std::const_mem_fun_ref_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	access:private
std::const_mem_fun_ref_t::_Ret	stl/stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun_ref_t::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
std::const_mem_fun_t	stl/stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function
std::const_mem_fun_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	access:private
std::const_mem_fun_t::_Ret	stl/stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun_t::operator ()	stl/stl_function.h	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t	access:public	signature:(const _Tp* __p) const
std::copy	stl/stl_algobase.h	/^    copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
std::copy	stl/stl_algobase.h	/^    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, ostreambuf_iterator<_CharT>)
std::copy_backward	stl/stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
std::count	stl/stl_algo.h	/^    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __value)
std::count_if	stl/stl_algo.h	/^    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred)
std::deque	stl/stl_deque.h	/^    class deque : protected _Deque_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_Deque_base
std::deque::_Alloc_value_type	stl/stl_deque.h	/^      typedef typename _Alloc::value_type        _Alloc_value_type;$/;"	t	class:std::deque	access:private
std::deque::_Base	stl/stl_deque.h	/^      typedef _Deque_base<_Tp, _Alloc>           _Base;$/;"	t	class:std::deque	access:private
std::deque::_M_assign_aux	stl/stl_deque.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::deque::_M_assign_aux	stl/stl_deque.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::deque::_M_assign_dispatch	stl/stl_deque.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::deque::_M_assign_dispatch	stl/stl_deque.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::deque	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
std::deque::_M_destroy_data	stl/stl_deque.h	/^        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, const _Alloc1&)
std::deque::_M_destroy_data	stl/stl_deque.h	/^      _M_destroy_data(iterator __first, iterator __last,$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, const std::allocator<_Tp>&)
std::deque::_M_destroy_data_aux	stl/stl_deque.h	/^      _M_destroy_data_aux(iterator __first, iterator __last);$/;"	p	class:std::deque	access:protected	signature:(iterator __first, iterator __last)
std::deque::_M_destroy_data_dispatch	stl/stl_deque.h	/^      _M_destroy_data_dispatch(iterator __first, iterator __last, __false_type)$/;"	f	class:std::deque	access:protected	signature:(iterator __first, iterator __last, __false_type)
std::deque::_M_destroy_data_dispatch	stl/stl_deque.h	/^      _M_destroy_data_dispatch(iterator, iterator, __true_type) { }$/;"	f	class:std::deque	access:protected	signature:(iterator, iterator, __true_type)
std::deque::_M_erase_at_begin	stl/stl_deque.h	/^      _M_erase_at_begin(iterator __pos)$/;"	f	class:std::deque	access:protected	signature:(iterator __pos)
std::deque::_M_erase_at_end	stl/stl_deque.h	/^      _M_erase_at_end(iterator __pos)$/;"	f	class:std::deque	access:protected	signature:(iterator __pos)
std::deque::_M_fill_assign	stl/stl_deque.h	/^      _M_fill_assign(size_type __n, const value_type& __val)$/;"	f	class:std::deque	access:protected	signature:(size_type __n, const value_type& __val)
std::deque::_M_fill_initialize	stl/stl_deque.h	/^      _M_fill_initialize(const value_type& __value);$/;"	p	class:std::deque	access:protected	signature:(const value_type& __value)
std::deque::_M_fill_insert	stl/stl_deque.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
std::deque::_M_initialize_dispatch	stl/stl_deque.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::deque::_M_initialize_dispatch	stl/stl_deque.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::deque	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
std::deque::_M_insert_aux	stl/stl_deque.h	/^        _M_insert_aux(iterator __pos,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
std::deque::_M_insert_aux	stl/stl_deque.h	/^      _M_insert_aux(iterator __pos, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const value_type& __x)
std::deque::_M_insert_aux	stl/stl_deque.h	/^      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
std::deque::_M_insert_dispatch	stl/stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
std::deque::_M_insert_dispatch	stl/stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:protected	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
std::deque::_M_new_elements_at_back	stl/stl_deque.h	/^      _M_new_elements_at_back(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
std::deque::_M_new_elements_at_front	stl/stl_deque.h	/^      _M_new_elements_at_front(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
std::deque::_M_pop_back_aux	stl/stl_deque.h	/^      void _M_pop_back_aux();$/;"	p	class:std::deque	access:protected	signature:()
std::deque::_M_pop_front_aux	stl/stl_deque.h	/^      void _M_pop_front_aux();$/;"	p	class:std::deque	access:protected	signature:()
std::deque::_M_push_back_aux	stl/stl_deque.h	/^      void _M_push_back_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
std::deque::_M_push_front_aux	stl/stl_deque.h	/^      void _M_push_front_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
std::deque::_M_range_check	stl/stl_deque.h	/^      _M_range_check(size_type __n) const$/;"	f	class:std::deque	access:protected	signature:(size_type __n) const
std::deque::_M_range_initialize	stl/stl_deque.h	/^        _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::deque::_M_range_initialize	stl/stl_deque.h	/^        _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::deque::_M_range_insert_aux	stl/stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _ForwardIterator __first,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::deque::_M_range_insert_aux	stl/stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _InputIterator __first,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::deque::_M_reallocate_map	stl/stl_deque.h	/^      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	p	class:std::deque	access:protected	signature:(size_type __nodes_to_add, bool __add_at_front)
std::deque::_M_reserve_elements_at_back	stl/stl_deque.h	/^      _M_reserve_elements_at_back(size_type __n)$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
std::deque::_M_reserve_elements_at_front	stl/stl_deque.h	/^      _M_reserve_elements_at_front(size_type __n)$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
std::deque::_M_reserve_map_at_back	stl/stl_deque.h	/^      _M_reserve_map_at_back(size_type __nodes_to_add = 1)$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
std::deque::_M_reserve_map_at_front	stl/stl_deque.h	/^      _M_reserve_map_at_front(size_type __nodes_to_add = 1)$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
std::deque::_Map_pointer	stl/stl_deque.h	/^      typedef pointer*                           _Map_pointer;$/;"	t	class:std::deque	access:protected
std::deque::_S_buffer_size	stl/stl_deque.h	/^      static size_t _S_buffer_size()$/;"	f	class:std::deque	access:protected	signature:()
std::deque::_Tp_alloc_type	stl/stl_deque.h	/^      typedef typename _Base::_Tp_alloc_type	 _Tp_alloc_type;$/;"	t	class:std::deque	access:private
std::deque::allocator_type	stl/stl_deque.h	/^      typedef _Alloc                             allocator_type;$/;"	t	class:std::deque	access:public
std::deque::assign	stl/stl_deque.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::deque::assign	stl/stl_deque.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __val)
std::deque::at	stl/stl_deque.h	/^      at(size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
std::deque::at	stl/stl_deque.h	/^      at(size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
std::deque::back	stl/stl_deque.h	/^      back() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::back	stl/stl_deque.h	/^      back()$/;"	f	class:std::deque	access:public	signature:()
std::deque::begin	stl/stl_deque.h	/^      begin() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::begin	stl/stl_deque.h	/^      begin()$/;"	f	class:std::deque	access:public	signature:()
std::deque::clear	stl/stl_deque.h	/^      clear()$/;"	f	class:std::deque	access:public	signature:()
std::deque::const_iterator	stl/stl_deque.h	/^      typedef typename _Base::const_iterator             const_iterator;$/;"	t	class:std::deque	access:public
std::deque::const_pointer	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::deque	access:public
std::deque::const_reference	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::deque	access:public
std::deque::const_reverse_iterator	stl/stl_deque.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:std::deque	access:public
std::deque::deque	stl/stl_deque.h	/^        deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::deque::deque	stl/stl_deque.h	/^      deque(const allocator_type& __a = allocator_type())$/;"	f	class:std::deque	access:public	signature:(const allocator_type& __a = allocator_type())
std::deque::deque	stl/stl_deque.h	/^      deque(const deque& __x)$/;"	f	class:std::deque	access:public	signature:(const deque& __x)
std::deque::deque	stl/stl_deque.h	/^      deque(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
std::deque::difference_type	stl/stl_deque.h	/^      typedef ptrdiff_t                          difference_type;$/;"	t	class:std::deque	access:public
std::deque::empty	stl/stl_deque.h	/^      empty() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::end	stl/stl_deque.h	/^      end() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::end	stl/stl_deque.h	/^      end()$/;"	f	class:std::deque	access:public	signature:()
std::deque::erase	stl/stl_deque.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::deque	access:public	signature:(iterator __first, iterator __last)
std::deque::erase	stl/stl_deque.h	/^      erase(iterator __position);$/;"	p	class:std::deque	access:public	signature:(iterator __position)
std::deque::front	stl/stl_deque.h	/^      front() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::front	stl/stl_deque.h	/^      front()$/;"	f	class:std::deque	access:public	signature:()
std::deque::get_allocator	stl/stl_deque.h	/^      get_allocator() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::insert	stl/stl_deque.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::deque	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
std::deque::insert	stl/stl_deque.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::deque	access:public	signature:(iterator __position, const value_type& __x)
std::deque::insert	stl/stl_deque.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
std::deque::iterator	stl/stl_deque.h	/^      typedef typename _Base::iterator                   iterator;$/;"	t	class:std::deque	access:public
std::deque::max_size	stl/stl_deque.h	/^      max_size() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::operator =	stl/stl_deque.h	/^      operator=(const deque& __x);$/;"	p	class:std::deque	access:public	signature:(const deque& __x)
std::deque::operator []	stl/stl_deque.h	/^      operator[](size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
std::deque::operator []	stl/stl_deque.h	/^      operator[](size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
std::deque::pointer	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::deque	access:public
std::deque::pop_back	stl/stl_deque.h	/^      pop_back()$/;"	f	class:std::deque	access:public	signature:()
std::deque::pop_front	stl/stl_deque.h	/^      pop_front()$/;"	f	class:std::deque	access:public	signature:()
std::deque::push_back	stl/stl_deque.h	/^      push_back(const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(const value_type& __x)
std::deque::push_front	stl/stl_deque.h	/^      push_front(const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(const value_type& __x)
std::deque::rbegin	stl/stl_deque.h	/^      rbegin() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::rbegin	stl/stl_deque.h	/^      rbegin()$/;"	f	class:std::deque	access:public	signature:()
std::deque::reference	stl/stl_deque.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::deque	access:public
std::deque::rend	stl/stl_deque.h	/^      rend() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::rend	stl/stl_deque.h	/^      rend()$/;"	f	class:std::deque	access:public	signature:()
std::deque::resize	stl/stl_deque.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	f	class:std::deque	access:public	signature:(size_type __new_size, value_type __x = value_type())
std::deque::reverse_iterator	stl/stl_deque.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:std::deque	access:public
std::deque::size	stl/stl_deque.h	/^      size() const$/;"	f	class:std::deque	access:public	signature:() const
std::deque::size_type	stl/stl_deque.h	/^      typedef size_t                             size_type;$/;"	t	class:std::deque	access:public
std::deque::swap	stl/stl_deque.h	/^      swap(deque& __x)$/;"	f	class:std::deque	access:public	signature:(deque& __x)
std::deque::value_type	stl/stl_deque.h	/^      typedef _Tp                                        value_type;$/;"	t	class:std::deque	access:public
std::deque::~deque	stl/stl_deque.h	/^      ~deque()$/;"	f	class:std::deque	access:public	signature:()
std::distance	stl/stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last)
std::divides	stl/stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
std::divides::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::equal	stl/stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
std::equal	stl/stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
std::equal_range	stl/stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
std::equal_range	stl/stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
std::equal_to	stl/stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::equal_to::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::fill	stl/stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
std::fill	stl/stl_algobase.h	/^  fill(char* __first, char* __last, const char& __c)$/;"	f	namespace:std	signature:(char* __first, char* __last, const char& __c)
std::fill	stl/stl_algobase.h	/^  fill(signed char* __first, signed char* __last, const signed char& __c)$/;"	f	namespace:std	signature:(signed char* __first, signed char* __last, const signed char& __c)
std::fill	stl/stl_algobase.h	/^  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)$/;"	f	namespace:std	signature:(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
std::fill	stl/stl_bvector.h	/^  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)$/;"	f	namespace:std	signature:(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
std::fill	stl/stl_deque.h	/^    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,$/;"	p	namespace:std	signature:(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first, const _Deque_iterator<_Tp, _Tp&, _Tp*>& __last, const _Tp& __value)
std::fill_n	stl/stl_algobase.h	/^    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	signature:(_OutputIterator __first, _Size __n, const _Tp& __value)
std::fill_n	stl/stl_algobase.h	/^    fill_n(char* __first, _Size __n, const char& __c)$/;"	f	namespace:std	signature:(char* __first, _Size __n, const char& __c)
std::fill_n	stl/stl_algobase.h	/^    fill_n(signed char* __first, _Size __n, const signed char& __c)$/;"	f	namespace:std	signature:(signed char* __first, _Size __n, const signed char& __c)
std::fill_n	stl/stl_algobase.h	/^    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)$/;"	f	namespace:std	signature:(unsigned char* __first, _Size __n, const unsigned char& __c)
std::find	stl/stl_algo.h	/^    find(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, const _Tp& __val)
std::find	stl/stl_algo.h	/^    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	p	namespace:std	signature:(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>, const _CharT&)
std::find_end	stl/stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
std::find_end	stl/stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __comp)
std::find_first_of	stl/stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)
std::find_first_of	stl/stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	signature:(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, _BinaryPredicate __comp)
std::find_if	stl/stl_algo.h	/^    find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Predicate __pred)
std::for_each	stl/stl_algo.h	/^    for_each(_InputIterator __first, _InputIterator __last, _Function __f)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Function __f)
std::forward_iterator_tag	stl/stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag {};$/;"	s	namespace:std	inherits:input_iterator_tag
std::front_insert_iterator	stl/stl_iterator.h	/^    class front_insert_iterator$/;"	c	namespace:std	inherits:iterator
std::front_insert_iterator::container	stl/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	access:protected
std::front_insert_iterator::container_type	stl/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	access:public
std::front_insert_iterator::front_insert_iterator	stl/stl_iterator.h	/^      explicit front_insert_iterator(_Container& __x) : container(&__x) { }$/;"	f	class:std::front_insert_iterator	access:public	signature:(_Container& __x)
std::front_insert_iterator::operator *	stl/stl_iterator.h	/^      operator*()$/;"	f	class:std::front_insert_iterator	access:public	signature:()
std::front_insert_iterator::operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::front_insert_iterator	access:public	signature:()
std::front_insert_iterator::operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::front_insert_iterator	access:public	signature:(int)
std::front_insert_iterator::operator =	stl/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator	access:public	signature:(typename _Container::const_reference __value)
std::front_inserter	stl/stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	f	namespace:std	signature:(_Container& __x)
std::generate	stl/stl_algo.h	/^    generate(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)
std::generate_n	stl/stl_algo.h	/^    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)$/;"	f	namespace:std	signature:(_OutputIterator __first, _Size __n, _Generator __gen)
std::greater	stl/stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::greater::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::greater_equal	stl/stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::greater_equal::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::includes	stl/stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
std::includes	stl/stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)
std::inner_product	stl/stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)
std::inner_product	stl/stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)
std::inplace_merge	stl/stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)
std::inplace_merge	stl/stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)
std::input_iterator_tag	stl/stl_iterator_base_types.h	/^  struct input_iterator_tag {};$/;"	s	namespace:std
std::insert_iterator	stl/stl_iterator.h	/^    class insert_iterator$/;"	c	namespace:std	inherits:iterator
std::insert_iterator::container	stl/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::container_type	stl/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::insert_iterator	stl/stl_iterator.h	/^      insert_iterator(_Container& __x, typename _Container::iterator __i)$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
std::insert_iterator::iter	stl/stl_iterator.h	/^      typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::operator *	stl/stl_iterator.h	/^      operator*()$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::insert_iterator	access:public	signature:(int)
std::insert_iterator::operator =	stl/stl_iterator.h	/^      operator=(const typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::const_reference __value)
std::inserter	stl/stl_iterator.h	/^    inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std	signature:(_Container& __x, _Iterator __i)
std::iter_swap	stl/stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std	signature:(_ForwardIterator1 __a, _ForwardIterator2 __b)
std::iterator	stl/stl_iterator_base_types.h	/^    struct iterator$/;"	s	namespace:std
std::iterator::difference_type	stl/stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	t	struct:std::iterator	access:public
std::iterator::iterator_category	stl/stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	t	struct:std::iterator	access:public
std::iterator::pointer	stl/stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	t	struct:std::iterator	access:public
std::iterator::reference	stl/stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	access:public
std::iterator::value_type	stl/stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::iterator	access:public
std::iterator_traits	stl/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std
std::iterator_traits	stl/stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std
std::iterator_traits	stl/stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std
std::iterator_traits::difference_type	stl/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::difference_type	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::iterator_category	stl/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::iterator_category	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::pointer	stl/stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::pointer	stl/stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::pointer	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::reference	stl/stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::reference	stl/stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::reference	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::value_type	stl/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::value_type	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	access:public
std::less	stl/stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::less::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::less_equal	stl/stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::less_equal::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::lexicographical_compare	stl/stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
std::lexicographical_compare	stl/stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp)
std::lexicographical_compare	stl/stl_algobase.h	/^  lexicographical_compare(const char* __first1, const char* __last1,$/;"	f	namespace:std	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
std::lexicographical_compare	stl/stl_algobase.h	/^  lexicographical_compare(const unsigned char* __first1,$/;"	f	namespace:std	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
std::list	stl/stl_list.h	/^    class list : protected _List_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_List_base
std::list::_Alloc_value_type	stl/stl_list.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	t	class:std::list	access:private
std::list::_Base	stl/stl_list.h	/^      typedef _List_base<_Tp, _Alloc>                    _Base;$/;"	t	class:std::list	access:private
std::list::_M_assign_dispatch	stl/stl_list.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::list	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::list::_M_assign_dispatch	stl/stl_list.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::list	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
std::list::_M_check_equal_allocators	stl/stl_list.h	/^      _M_check_equal_allocators(list& __x)$/;"	f	class:std::list	access:protected	signature:(list& __x)
std::list::_M_create_node	stl/stl_list.h	/^      _M_create_node(const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(const value_type& __x)
std::list::_M_erase	stl/stl_list.h	/^      _M_erase(iterator __position)$/;"	f	class:std::list	access:protected	signature:(iterator __position)
std::list::_M_fill_assign	stl/stl_list.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	p	class:std::list	access:protected	signature:(size_type __n, const value_type& __val)
std::list::_M_fill_initialize	stl/stl_list.h	/^      _M_fill_initialize(size_type __n, const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(size_type __n, const value_type& __x)
std::list::_M_initialize_dispatch	stl/stl_list.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::list::_M_initialize_dispatch	stl/stl_list.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::list	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
std::list::_M_insert	stl/stl_list.h	/^      _M_insert(iterator __position, const value_type& __x)$/;"	f	class:std::list	access:protected	signature:(iterator __position, const value_type& __x)
std::list::_M_transfer	stl/stl_list.h	/^      _M_transfer(iterator __position, iterator __first, iterator __last)$/;"	f	class:std::list	access:protected	signature:(iterator __position, iterator __first, iterator __last)
std::list::_Node	stl/stl_list.h	/^      typedef _List_node<_Tp>				 _Node;$/;"	t	class:std::list	access:protected
std::list::_Tp_alloc_type	stl/stl_list.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	t	class:std::list	access:private
std::list::allocator_type	stl/stl_list.h	/^      typedef _Alloc                                     allocator_type;$/;"	t	class:std::list	access:public
std::list::assign	stl/stl_list.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::list::assign	stl/stl_list.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::list	access:public	signature:(size_type __n, const value_type& __val)
std::list::back	stl/stl_list.h	/^      back() const$/;"	f	class:std::list	access:public	signature:() const
std::list::back	stl/stl_list.h	/^      back()$/;"	f	class:std::list	access:public	signature:()
std::list::begin	stl/stl_list.h	/^      begin() const$/;"	f	class:std::list	access:public	signature:() const
std::list::begin	stl/stl_list.h	/^      begin()$/;"	f	class:std::list	access:public	signature:()
std::list::clear	stl/stl_list.h	/^      clear()$/;"	f	class:std::list	access:public	signature:()
std::list::const_iterator	stl/stl_list.h	/^      typedef _List_const_iterator<_Tp>                  const_iterator;$/;"	t	class:std::list	access:public
std::list::const_pointer	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::list	access:public
std::list::const_reference	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::list	access:public
std::list::const_reverse_iterator	stl/stl_list.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:std::list	access:public
std::list::difference_type	stl/stl_list.h	/^      typedef ptrdiff_t                                  difference_type;$/;"	t	class:std::list	access:public
std::list::empty	stl/stl_list.h	/^      empty() const$/;"	f	class:std::list	access:public	signature:() const
std::list::end	stl/stl_list.h	/^      end() const$/;"	f	class:std::list	access:public	signature:() const
std::list::end	stl/stl_list.h	/^      end()$/;"	f	class:std::list	access:public	signature:()
std::list::erase	stl/stl_list.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::list	access:public	signature:(iterator __first, iterator __last)
std::list::erase	stl/stl_list.h	/^      erase(iterator __position);$/;"	p	class:std::list	access:public	signature:(iterator __position)
std::list::front	stl/stl_list.h	/^      front() const$/;"	f	class:std::list	access:public	signature:() const
std::list::front	stl/stl_list.h	/^      front()$/;"	f	class:std::list	access:public	signature:()
std::list::get_allocator	stl/stl_list.h	/^      get_allocator() const$/;"	f	class:std::list	access:public	signature:() const
std::list::insert	stl/stl_list.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::list	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
std::list::insert	stl/stl_list.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::list	access:public	signature:(iterator __position, const value_type& __x)
std::list::insert	stl/stl_list.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::list	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
std::list::iterator	stl/stl_list.h	/^      typedef _List_iterator<_Tp>                        iterator;$/;"	t	class:std::list	access:public
std::list::list	stl/stl_list.h	/^        list(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::list::list	stl/stl_list.h	/^      list(const allocator_type& __a = allocator_type())$/;"	f	class:std::list	access:public	signature:(const allocator_type& __a = allocator_type())
std::list::list	stl/stl_list.h	/^      list(const list& __x)$/;"	f	class:std::list	access:public	signature:(const list& __x)
std::list::list	stl/stl_list.h	/^      list(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::list	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
std::list::max_size	stl/stl_list.h	/^      max_size() const$/;"	f	class:std::list	access:public	signature:() const
std::list::merge	stl/stl_list.h	/^        merge(list&, _StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(list&, _StrictWeakOrdering)
std::list::merge	stl/stl_list.h	/^      merge(list& __x);$/;"	p	class:std::list	access:public	signature:(list& __x)
std::list::operator =	stl/stl_list.h	/^      operator=(const list& __x);$/;"	p	class:std::list	access:public	signature:(const list& __x)
std::list::pointer	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::list	access:public
std::list::pop_back	stl/stl_list.h	/^      pop_back()$/;"	f	class:std::list	access:public	signature:()
std::list::pop_front	stl/stl_list.h	/^      pop_front()$/;"	f	class:std::list	access:public	signature:()
std::list::push_back	stl/stl_list.h	/^      push_back(const value_type& __x)$/;"	f	class:std::list	access:public	signature:(const value_type& __x)
std::list::push_front	stl/stl_list.h	/^      push_front(const value_type& __x)$/;"	f	class:std::list	access:public	signature:(const value_type& __x)
std::list::rbegin	stl/stl_list.h	/^      rbegin() const$/;"	f	class:std::list	access:public	signature:() const
std::list::rbegin	stl/stl_list.h	/^      rbegin()$/;"	f	class:std::list	access:public	signature:()
std::list::reference	stl/stl_list.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::list	access:public
std::list::remove	stl/stl_list.h	/^      remove(const _Tp& __value);$/;"	p	class:std::list	access:public	signature:(const _Tp& __value)
std::list::remove_if	stl/stl_list.h	/^        remove_if(_Predicate);$/;"	p	class:std::list	access:public	signature:(_Predicate)
std::list::rend	stl/stl_list.h	/^      rend() const$/;"	f	class:std::list	access:public	signature:() const
std::list::rend	stl/stl_list.h	/^      rend()$/;"	f	class:std::list	access:public	signature:()
std::list::resize	stl/stl_list.h	/^      resize(size_type __new_size, value_type __x = value_type());$/;"	p	class:std::list	access:public	signature:(size_type __new_size, value_type __x = value_type())
std::list::reverse	stl/stl_list.h	/^      reverse()$/;"	f	class:std::list	access:public	signature:()
std::list::reverse_iterator	stl/stl_list.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:std::list	access:public
std::list::size	stl/stl_list.h	/^      size() const$/;"	f	class:std::list	access:public	signature:() const
std::list::size_type	stl/stl_list.h	/^      typedef size_t                                     size_type;$/;"	t	class:std::list	access:public
std::list::sort	stl/stl_list.h	/^        sort(_StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(_StrictWeakOrdering)
std::list::sort	stl/stl_list.h	/^      sort();$/;"	p	class:std::list	access:public	signature:()
std::list::splice	stl/stl_list.h	/^      splice(iterator __position, list& __x)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x)
std::list::splice	stl/stl_list.h	/^      splice(iterator __position, list& __x, iterator __first, iterator __last)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x, iterator __first, iterator __last)
std::list::splice	stl/stl_list.h	/^      splice(iterator __position, list& __x, iterator __i)$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x, iterator __i)
std::list::swap	stl/stl_list.h	/^      swap(list& __x)$/;"	f	class:std::list	access:public	signature:(list& __x)
std::list::unique	stl/stl_list.h	/^        unique(_BinaryPredicate);$/;"	p	class:std::list	access:public	signature:(_BinaryPredicate)
std::list::unique	stl/stl_list.h	/^      unique();$/;"	p	class:std::list	access:public	signature:()
std::list::value_type	stl/stl_list.h	/^      typedef _Tp                                        value_type;$/;"	t	class:std::list	access:public
std::logical_and	stl/stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::logical_and::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::logical_not	stl/stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	inherits:unary_function
std::logical_not::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not	access:public	signature:(const _Tp& __x) const
std::logical_or	stl/stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::logical_or::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::lower_bound	stl/stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
std::lower_bound	stl/stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
std::make_heap	stl/stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::make_heap	stl/stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::make_pair	stl/stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std	signature:(_T1 __x, _T2 __y)
std::map	stl/stl_map.h	/^    class map$/;"	c	namespace:std
std::map::_Alloc_value_type	stl/stl_map.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::map	access:private
std::map::_M_t	stl/stl_map.h	/^      _Rep_type _M_t;$/;"	m	class:std::map	access:private
std::map::_Pair_alloc_type	stl/stl_map.h	/^        _Pair_alloc_type;$/;"	t	class:std::map	access:private
std::map::_Rep_type	stl/stl_map.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	t	class:std::map	access:private
std::map::allocator_type	stl/stl_map.h	/^      typedef _Alloc                                        allocator_type;$/;"	t	class:std::map	access:public
std::map::at	stl/stl_map.h	/^      at(const key_type& __k) const$/;"	f	class:std::map	access:public	signature:(const key_type& __k) const
std::map::at	stl/stl_map.h	/^      at(const key_type& __k)$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
std::map::begin	stl/stl_map.h	/^      begin() const$/;"	f	class:std::map	access:public	signature:() const
std::map::begin	stl/stl_map.h	/^      begin()$/;"	f	class:std::map	access:public	signature:()
std::map::clear	stl/stl_map.h	/^      clear()$/;"	f	class:std::map	access:public	signature:()
std::map::const_iterator	stl/stl_map.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	t	class:std::map	access:public
std::map::const_pointer	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	t	class:std::map	access:public
std::map::const_reference	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	t	class:std::map	access:public
std::map::const_reverse_iterator	stl/stl_map.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::map	access:public
std::map::count	stl/stl_map.h	/^      count(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::difference_type	stl/stl_map.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	t	class:std::map	access:public
std::map::empty	stl/stl_map.h	/^      empty() const$/;"	f	class:std::map	access:public	signature:() const
std::map::end	stl/stl_map.h	/^      end() const$/;"	f	class:std::map	access:public	signature:() const
std::map::end	stl/stl_map.h	/^      end()$/;"	f	class:std::map	access:public	signature:()
std::map::equal_range	stl/stl_map.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::equal_range	stl/stl_map.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::erase	stl/stl_map.h	/^      erase(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::erase	stl/stl_map.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::map	access:public	signature:(iterator __first, iterator __last)
std::map::erase	stl/stl_map.h	/^      erase(iterator __position)$/;"	f	class:std::map	access:public	signature:(iterator __position)
std::map::find	stl/stl_map.h	/^      find(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::find	stl/stl_map.h	/^      find(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::get_allocator	stl/stl_map.h	/^      get_allocator() const$/;"	f	class:std::map	access:public	signature:() const
std::map::insert	stl/stl_map.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::map::insert	stl/stl_map.h	/^      insert(const value_type& __x)$/;"	f	class:std::map	access:public	signature:(const value_type& __x)
std::map::insert	stl/stl_map.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::map	access:public	signature:(iterator __position, const value_type& __x)
std::map::iterator	stl/stl_map.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	t	class:std::map	access:public
std::map::key_comp	stl/stl_map.h	/^      key_comp() const$/;"	f	class:std::map	access:public	signature:() const
std::map::key_compare	stl/stl_map.h	/^      typedef _Compare                                      key_compare;$/;"	t	class:std::map	access:public
std::map::key_type	stl/stl_map.h	/^      typedef _Key                                          key_type;$/;"	t	class:std::map	access:public
std::map::lower_bound	stl/stl_map.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::lower_bound	stl/stl_map.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::map	stl/stl_map.h	/^        map(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::map::map	stl/stl_map.h	/^        map(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::map::map	stl/stl_map.h	/^      map()$/;"	f	class:std::map	access:public	signature:()
std::map::map	stl/stl_map.h	/^      map(const _Compare& __comp, const allocator_type& __a = allocator_type())$/;"	f	class:std::map	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::map::map	stl/stl_map.h	/^      map(const map& __x)$/;"	f	class:std::map	access:public	signature:(const map& __x)
std::map::mapped_type	stl/stl_map.h	/^      typedef _Tp                                           mapped_type;$/;"	t	class:std::map	access:public
std::map::max_size	stl/stl_map.h	/^      max_size() const$/;"	f	class:std::map	access:public	signature:() const
std::map::operator <	stl/stl_map.h	/^        operator< (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
std::map::operator =	stl/stl_map.h	/^      operator=(const map& __x)$/;"	f	class:std::map	access:public	signature:(const map& __x)
std::map::operator ==	stl/stl_map.h	/^        operator== (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
std::map::operator []	stl/stl_map.h	/^      operator[](const key_type& __k)$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
std::map::pointer	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	t	class:std::map	access:public
std::map::rbegin	stl/stl_map.h	/^      rbegin() const$/;"	f	class:std::map	access:public	signature:() const
std::map::rbegin	stl/stl_map.h	/^      rbegin()$/;"	f	class:std::map	access:public	signature:()
std::map::reference	stl/stl_map.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	t	class:std::map	access:public
std::map::rend	stl/stl_map.h	/^      rend() const$/;"	f	class:std::map	access:public	signature:() const
std::map::rend	stl/stl_map.h	/^      rend()$/;"	f	class:std::map	access:public	signature:()
std::map::reverse_iterator	stl/stl_map.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	t	class:std::map	access:public
std::map::size	stl/stl_map.h	/^      size() const$/;"	f	class:std::map	access:public	signature:() const
std::map::size_type	stl/stl_map.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	t	class:std::map	access:public
std::map::swap	stl/stl_map.h	/^      swap(map& __x)$/;"	f	class:std::map	access:public	signature:(map& __x)
std::map::upper_bound	stl/stl_map.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::upper_bound	stl/stl_map.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::value_comp	stl/stl_map.h	/^      value_comp() const$/;"	f	class:std::map	access:public	signature:() const
std::map::value_compare	stl/stl_map.h	/^      class value_compare$/;"	c	class:std::map	inherits:std::binary_function	access:public
std::map::value_compare::comp	stl/stl_map.h	/^	_Compare comp;$/;"	m	class:std::map::value_compare	access:protected
std::map::value_compare::operator ()	stl/stl_map.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	f	class:std::map::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
std::map::value_compare::value_compare	stl/stl_map.h	/^	value_compare(_Compare __c)$/;"	f	class:std::map::value_compare	access:protected	signature:(_Compare __c)
std::map::value_type	stl/stl_map.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	t	class:std::map	access:public
std::max	stl/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
std::max	stl/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
std::max_element	stl/stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::max_element	stl/stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
std::mem_fun1_ref_t	stl/stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
std::mem_fun1_ref_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	access:private
std::mem_fun1_ref_t::_Ret	stl/stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp::*__pf)
std::mem_fun1_ref_t::operator ()	stl/stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
std::mem_fun1_t	stl/stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function
std::mem_fun1_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	access:private
std::mem_fun1_t::_Ret	stl/stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp::*__pf)
std::mem_fun1_t::operator ()	stl/stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
std::mem_fun_ref_t	stl/stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function
std::mem_fun_ref_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	access:private
std::mem_fun_ref_t::_Ret	stl/stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp::*__pf)
std::mem_fun_ref_t::operator ()	stl/stl_function.h	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp& __r) const
std::mem_fun_t	stl/stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function
std::mem_fun_t::_M_f	stl/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	access:private
std::mem_fun_t::_Ret	stl/stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp::*__pf)
std::mem_fun_t::operator ()	stl/stl_function.h	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp* __p) const
std::merge	stl/stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
std::merge	stl/stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
std::min	stl/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
std::min	stl/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
std::min_element	stl/stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::min_element	stl/stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
std::minus	stl/stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
std::minus::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::mismatch	stl/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
std::mismatch	stl/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
std::modulus	stl/stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
std::modulus::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::multimap	stl/stl_multimap.h	/^    class multimap$/;"	c	namespace:std
std::multimap::_Alloc_value_type	stl/stl_multimap.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::multimap	access:private
std::multimap::_M_t	stl/stl_multimap.h	/^      _Rep_type _M_t;$/;"	m	class:std::multimap	access:private
std::multimap::_Pair_alloc_type	stl/stl_multimap.h	/^        _Pair_alloc_type;$/;"	t	class:std::multimap	access:private
std::multimap::_Rep_type	stl/stl_multimap.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	t	class:std::multimap	access:private
std::multimap::allocator_type	stl/stl_multimap.h	/^      typedef _Alloc                                        allocator_type;$/;"	t	class:std::multimap	access:public
std::multimap::begin	stl/stl_multimap.h	/^      begin() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::begin	stl/stl_multimap.h	/^      begin()$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::clear	stl/stl_multimap.h	/^      clear()$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::const_iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	t	class:std::multimap	access:public
std::multimap::const_pointer	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	t	class:std::multimap	access:public
std::multimap::const_reference	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	t	class:std::multimap	access:public
std::multimap::const_reverse_iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::multimap	access:public
std::multimap::count	stl/stl_multimap.h	/^      count(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::difference_type	stl/stl_multimap.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	t	class:std::multimap	access:public
std::multimap::empty	stl/stl_multimap.h	/^      empty() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::end	stl/stl_multimap.h	/^      end() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::end	stl/stl_multimap.h	/^      end()$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::equal_range	stl/stl_multimap.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::equal_range	stl/stl_multimap.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::erase	stl/stl_multimap.h	/^      erase(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::erase	stl/stl_multimap.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::multimap	access:public	signature:(iterator __first, iterator __last)
std::multimap::erase	stl/stl_multimap.h	/^      erase(iterator __position)$/;"	f	class:std::multimap	access:public	signature:(iterator __position)
std::multimap::find	stl/stl_multimap.h	/^      find(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::find	stl/stl_multimap.h	/^      find(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::get_allocator	stl/stl_multimap.h	/^      get_allocator() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::insert	stl/stl_multimap.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multimap::insert	stl/stl_multimap.h	/^      insert(const value_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const value_type& __x)
std::multimap::insert	stl/stl_multimap.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::multimap	access:public	signature:(iterator __position, const value_type& __x)
std::multimap::iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	t	class:std::multimap	access:public
std::multimap::key_comp	stl/stl_multimap.h	/^      key_comp() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::key_compare	stl/stl_multimap.h	/^      typedef _Compare                                      key_compare;$/;"	t	class:std::multimap	access:public
std::multimap::key_type	stl/stl_multimap.h	/^      typedef _Key                                          key_type;$/;"	t	class:std::multimap	access:public
std::multimap::lower_bound	stl/stl_multimap.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::lower_bound	stl/stl_multimap.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::mapped_type	stl/stl_multimap.h	/^      typedef _Tp                                           mapped_type;$/;"	t	class:std::multimap	access:public
std::multimap::max_size	stl/stl_multimap.h	/^      max_size() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::multimap	stl/stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multimap::multimap	stl/stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multimap::multimap	stl/stl_multimap.h	/^      multimap()$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::multimap	stl/stl_multimap.h	/^      multimap(const _Compare& __comp,$/;"	f	class:std::multimap	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multimap::multimap	stl/stl_multimap.h	/^      multimap(const multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(const multimap& __x)
std::multimap::operator <	stl/stl_multimap.h	/^        operator< (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
std::multimap::operator =	stl/stl_multimap.h	/^      operator=(const multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(const multimap& __x)
std::multimap::operator ==	stl/stl_multimap.h	/^        operator== (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
std::multimap::pointer	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	t	class:std::multimap	access:public
std::multimap::rbegin	stl/stl_multimap.h	/^      rbegin() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::rbegin	stl/stl_multimap.h	/^      rbegin()$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::reference	stl/stl_multimap.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	t	class:std::multimap	access:public
std::multimap::rend	stl/stl_multimap.h	/^      rend() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::rend	stl/stl_multimap.h	/^      rend()$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::reverse_iterator	stl/stl_multimap.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	t	class:std::multimap	access:public
std::multimap::size	stl/stl_multimap.h	/^      size() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::size_type	stl/stl_multimap.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	t	class:std::multimap	access:public
std::multimap::swap	stl/stl_multimap.h	/^      swap(multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(multimap& __x)
std::multimap::upper_bound	stl/stl_multimap.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::upper_bound	stl/stl_multimap.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::value_comp	stl/stl_multimap.h	/^      value_comp() const$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::value_compare	stl/stl_multimap.h	/^      class value_compare$/;"	c	class:std::multimap	inherits:std::binary_function	access:public
std::multimap::value_compare::comp	stl/stl_multimap.h	/^	_Compare comp;$/;"	m	class:std::multimap::value_compare	access:protected
std::multimap::value_compare::operator ()	stl/stl_multimap.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	f	class:std::multimap::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
std::multimap::value_compare::value_compare	stl/stl_multimap.h	/^	value_compare(_Compare __c)$/;"	f	class:std::multimap::value_compare	access:protected	signature:(_Compare __c)
std::multimap::value_type	stl/stl_multimap.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	t	class:std::multimap	access:public
std::multiplies	stl/stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
std::multiplies::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::multiset	stl/stl_multiset.h	/^    class multiset$/;"	c	namespace:std
std::multiset::_Alloc_value_type	stl/stl_multiset.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::multiset	access:private
std::multiset::_Key_alloc_type	stl/stl_multiset.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	t	class:std::multiset	access:private
std::multiset::_M_t	stl/stl_multiset.h	/^      _Rep_type _M_t;$/;"	m	class:std::multiset	access:private
std::multiset::_Rep_type	stl/stl_multiset.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	t	class:std::multiset	access:private
std::multiset::allocator_type	stl/stl_multiset.h	/^      typedef _Alloc   allocator_type;$/;"	t	class:std::multiset	access:public
std::multiset::begin	stl/stl_multiset.h	/^      begin() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::clear	stl/stl_multiset.h	/^      clear()$/;"	f	class:std::multiset	access:public	signature:()
std::multiset::const_iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	t	class:std::multiset	access:public
std::multiset::const_pointer	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	t	class:std::multiset	access:public
std::multiset::const_reference	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	t	class:std::multiset	access:public
std::multiset::const_reverse_iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	t	class:std::multiset	access:public
std::multiset::count	stl/stl_multiset.h	/^      count(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::difference_type	stl/stl_multiset.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	t	class:std::multiset	access:public
std::multiset::empty	stl/stl_multiset.h	/^      empty() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::end	stl/stl_multiset.h	/^      end() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::equal_range	stl/stl_multiset.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::equal_range	stl/stl_multiset.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
std::multiset::erase	stl/stl_multiset.h	/^      erase(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
std::multiset::erase	stl/stl_multiset.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::multiset	access:public	signature:(iterator __first, iterator __last)
std::multiset::erase	stl/stl_multiset.h	/^      erase(iterator __position)$/;"	f	class:std::multiset	access:public	signature:(iterator __position)
std::multiset::find	stl/stl_multiset.h	/^      find(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::find	stl/stl_multiset.h	/^      find(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
std::multiset::get_allocator	stl/stl_multiset.h	/^      get_allocator() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::insert	stl/stl_multiset.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multiset::insert	stl/stl_multiset.h	/^      insert(const value_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const value_type& __x)
std::multiset::insert	stl/stl_multiset.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::multiset	access:public	signature:(iterator __position, const value_type& __x)
std::multiset::iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	t	class:std::multiset	access:public
std::multiset::key_comp	stl/stl_multiset.h	/^      key_comp() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::key_compare	stl/stl_multiset.h	/^      typedef _Compare key_compare;$/;"	t	class:std::multiset	access:public
std::multiset::key_type	stl/stl_multiset.h	/^      typedef _Key     key_type;$/;"	t	class:std::multiset	access:public
std::multiset::lower_bound	stl/stl_multiset.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::lower_bound	stl/stl_multiset.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
std::multiset::max_size	stl/stl_multiset.h	/^      max_size() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::multiset	stl/stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multiset::multiset	stl/stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multiset::multiset	stl/stl_multiset.h	/^      multiset()$/;"	f	class:std::multiset	access:public	signature:()
std::multiset::multiset	stl/stl_multiset.h	/^      multiset(const _Compare& __comp,$/;"	f	class:std::multiset	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multiset::multiset	stl/stl_multiset.h	/^      multiset(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
std::multiset::operator <	stl/stl_multiset.h	/^        operator< (const multiset<_K1, _C1, _A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1, _C1, _A1>&, const multiset<_K1, _C1, _A1>&)
std::multiset::operator =	stl/stl_multiset.h	/^      operator=(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
std::multiset::operator ==	stl/stl_multiset.h	/^        operator== (const multiset<_K1, _C1, _A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1, _C1, _A1>&, const multiset<_K1, _C1, _A1>&)
std::multiset::pointer	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	t	class:std::multiset	access:public
std::multiset::rbegin	stl/stl_multiset.h	/^      rbegin() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::reference	stl/stl_multiset.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	t	class:std::multiset	access:public
std::multiset::rend	stl/stl_multiset.h	/^      rend() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::reverse_iterator	stl/stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	t	class:std::multiset	access:public
std::multiset::size	stl/stl_multiset.h	/^      size() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::size_type	stl/stl_multiset.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	t	class:std::multiset	access:public
std::multiset::swap	stl/stl_multiset.h	/^      swap(multiset<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(multiset<_Key, _Compare, _Alloc>& __x)
std::multiset::upper_bound	stl/stl_multiset.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::upper_bound	stl/stl_multiset.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
std::multiset::value_comp	stl/stl_multiset.h	/^      value_comp() const$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::value_compare	stl/stl_multiset.h	/^      typedef _Compare value_compare;$/;"	t	class:std::multiset	access:public
std::multiset::value_type	stl/stl_multiset.h	/^      typedef _Key     value_type;$/;"	t	class:std::multiset	access:public
std::negate	stl/stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function
std::negate::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate	access:public	signature:(const _Tp& __x) const
std::next_permutation	stl/stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
std::next_permutation	stl/stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
std::not1	stl/stl_function.h	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
std::not2	stl/stl_function.h	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
std::not_equal_to	stl/stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function
std::not_equal_to::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::nth_element	stl/stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)
std::nth_element	stl/stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)
std::operator !=	stl/stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
std::operator !=	stl/stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
std::operator !=	stl/stl_deque.h	/^    operator!=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator !=	stl/stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator !=	stl/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
std::operator !=	stl/stl_list.h	/^    operator!=(const _List_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _List_iterator<_Val>& __x, const _List_const_iterator<_Val>& __y)
std::operator !=	stl/stl_list.h	/^    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
std::operator !=	stl/stl_map.h	/^    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator !=	stl/stl_multimap.h	/^    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator !=	stl/stl_multiset.h	/^    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
std::operator !=	stl/stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator !=	stl/stl_queue.h	/^    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
std::operator !=	stl/stl_set.h	/^    operator!=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
std::operator !=	stl/stl_stack.h	/^    operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
std::operator !=	stl/stl_tree.h	/^    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
std::operator !=	stl/stl_tree.h	/^    operator!=(const _Rb_tree_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Val>& __x, const _Rb_tree_const_iterator<_Val>& __y)
std::operator !=	stl/stl_vector.h	/^    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator +	stl/stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_const_iterator& __x)
std::operator +	stl/stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_iterator& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_iterator& __x)
std::operator +	stl/stl_deque.h	/^    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
std::operator +	stl/stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	signature:(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator>& __x)
std::operator -	stl/stl_bvector.h	/^  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)$/;"	f	namespace:std	signature:(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
std::operator -	stl/stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
std::operator -	stl/stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
std::operator -	stl/stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator -	stl/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
std::operator <	stl/stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
std::operator <	stl/stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
std::operator <	stl/stl_deque.h	/^    operator<(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator <	stl/stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator <	stl/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
std::operator <	stl/stl_list.h	/^    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
std::operator <	stl/stl_map.h	/^    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator <	stl/stl_multimap.h	/^    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator <	stl/stl_multiset.h	/^    operator<(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
std::operator <	stl/stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator <	stl/stl_queue.h	/^    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
std::operator <	stl/stl_set.h	/^    operator<(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
std::operator <	stl/stl_stack.h	/^    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
std::operator <	stl/stl_tree.h	/^    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
std::operator <	stl/stl_vector.h	/^    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator <=	stl/stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
std::operator <=	stl/stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
std::operator <=	stl/stl_deque.h	/^    operator<=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator <=	stl/stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator <=	stl/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
std::operator <=	stl/stl_list.h	/^    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
std::operator <=	stl/stl_map.h	/^    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator <=	stl/stl_multimap.h	/^    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator <=	stl/stl_multiset.h	/^    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
std::operator <=	stl/stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator <=	stl/stl_queue.h	/^    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
std::operator <=	stl/stl_set.h	/^    operator<=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
std::operator <=	stl/stl_stack.h	/^    operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
std::operator <=	stl/stl_tree.h	/^    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
std::operator <=	stl/stl_vector.h	/^    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator ==	stl/stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
std::operator ==	stl/stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
std::operator ==	stl/stl_deque.h	/^    operator==(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator ==	stl/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator ==	stl/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
std::operator ==	stl/stl_list.h	/^    operator==(const _List_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _List_iterator<_Val>& __x, const _List_const_iterator<_Val>& __y)
std::operator ==	stl/stl_list.h	/^    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
std::operator ==	stl/stl_map.h	/^    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator ==	stl/stl_multimap.h	/^    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator ==	stl/stl_multiset.h	/^    operator==(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
std::operator ==	stl/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator ==	stl/stl_queue.h	/^    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
std::operator ==	stl/stl_set.h	/^    operator==(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
std::operator ==	stl/stl_stack.h	/^    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
std::operator ==	stl/stl_tree.h	/^    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
std::operator ==	stl/stl_tree.h	/^    operator==(const _Rb_tree_iterator<_Val>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Val>& __x, const _Rb_tree_const_iterator<_Val>& __y)
std::operator ==	stl/stl_vector.h	/^    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator >	stl/stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
std::operator >	stl/stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
std::operator >	stl/stl_deque.h	/^    operator>(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator >	stl/stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator >	stl/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
std::operator >	stl/stl_list.h	/^    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
std::operator >	stl/stl_map.h	/^    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator >	stl/stl_multimap.h	/^    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator >	stl/stl_multiset.h	/^    operator>(const multiset<_Key,_Compare,_Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator >	stl/stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator >	stl/stl_queue.h	/^    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
std::operator >	stl/stl_set.h	/^    operator>(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
std::operator >	stl/stl_stack.h	/^    operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
std::operator >	stl/stl_tree.h	/^    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
std::operator >	stl/stl_vector.h	/^    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator >=	stl/stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x, const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
std::operator >=	stl/stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x, const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
std::operator >=	stl/stl_deque.h	/^    operator>=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator >=	stl/stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator >=	stl/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	signature:(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
std::operator >=	stl/stl_list.h	/^    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
std::operator >=	stl/stl_map.h	/^    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x, const map<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator >=	stl/stl_multimap.h	/^    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multimap<_Key, _Tp, _Compare, _Alloc>& __x, const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
std::operator >=	stl/stl_multiset.h	/^    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const multiset<_Key, _Compare, _Alloc>& __x, const multiset<_Key, _Compare, _Alloc>& __y)
std::operator >=	stl/stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator >=	stl/stl_queue.h	/^    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
std::operator >=	stl/stl_set.h	/^    operator>=(const set<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const set<_Key, _Compare, _Alloc>& __x, const set<_Key, _Compare, _Alloc>& __y)
std::operator >=	stl/stl_stack.h	/^    operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
std::operator >=	stl/stl_tree.h	/^    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
std::operator >=	stl/stl_vector.h	/^    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::output_iterator_tag	stl/stl_iterator_base_types.h	/^  struct output_iterator_tag {};$/;"	s	namespace:std
std::pair	stl/stl_pair.h	/^    struct pair$/;"	s	namespace:std
std::pair::first	stl/stl_pair.h	/^      _T1 first;                 \/\/\/< @c first is a copy of the first object$/;"	m	struct:std::pair	access:public
std::pair::first_type	stl/stl_pair.h	/^      typedef _T1 first_type;    \/\/\/<  @c first_type is the first bound type$/;"	t	struct:std::pair	access:public
std::pair::pair	stl/stl_pair.h	/^        pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1, _U2>& __p)
std::pair::pair	stl/stl_pair.h	/^      pair()$/;"	f	struct:std::pair	access:public	signature:()
std::pair::pair	stl/stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1& __a, const _T2& __b)
std::pair::second	stl/stl_pair.h	/^      _T2 second;                \/\/\/< @c second is a copy of the second object$/;"	m	struct:std::pair	access:public
std::pair::second_type	stl/stl_pair.h	/^      typedef _T2 second_type;   \/\/\/<  @c second_type is the second bound type$/;"	t	struct:std::pair	access:public
std::partial_sort	stl/stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)
std::partial_sort	stl/stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
std::partial_sort_copy	stl/stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last)
std::partial_sort_copy	stl/stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _RandomAccessIterator __result_first, _RandomAccessIterator __result_last, _Compare __comp)
std::partial_sum	stl/stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
std::partial_sum	stl/stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
std::partition	stl/stl_algo.h	/^    partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
std::plus	stl/stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function
std::plus::operator ()	stl/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::pointer_to_binary_function	stl/stl_function.h	/^    class pointer_to_binary_function$/;"	c	namespace:std	inherits:binary_function
std::pointer_to_binary_function::_M_ptr	stl/stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	access:protected
std::pointer_to_binary_function::operator ()	stl/stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Arg1 __x, _Arg2 __y) const
std::pointer_to_binary_function::pointer_to_binary_function	stl/stl_function.h	/^      pointer_to_binary_function() {}$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
std::pointer_to_binary_function::pointer_to_binary_function	stl/stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (__x)_Arg1, _Arg2))
std::pointer_to_unary_function	stl/stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	inherits:unary_function
std::pointer_to_unary_function::_M_ptr	stl/stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	access:protected
std::pointer_to_unary_function::operator ()	stl/stl_function.h	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Arg __x) const
std::pointer_to_unary_function::pointer_to_unary_function	stl/stl_function.h	/^      pointer_to_unary_function() {}$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
std::pointer_to_unary_function::pointer_to_unary_function	stl/stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (__x)_Arg))
std::pop_heap	stl/stl_heap.h	/^    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::pop_heap	stl/stl_heap.h	/^    pop_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::prev_permutation	stl/stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
std::prev_permutation	stl/stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
std::priority_queue	stl/stl_queue.h	/^    class priority_queue$/;"	c	namespace:std
std::priority_queue::_Sequence_value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::priority_queue	access:private
std::priority_queue::c	stl/stl_queue.h	/^      _Sequence  c;$/;"	m	class:std::priority_queue	access:protected
std::priority_queue::comp	stl/stl_queue.h	/^      _Compare   comp;$/;"	m	class:std::priority_queue	access:protected
std::priority_queue::const_reference	stl/stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::container_type	stl/stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::empty	stl/stl_queue.h	/^      empty() const$/;"	f	class:std::priority_queue	access:public	signature:() const
std::priority_queue::pop	stl/stl_queue.h	/^      pop()$/;"	f	class:std::priority_queue	access:public	signature:()
std::priority_queue::priority_queue	stl/stl_queue.h	/^        priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x = _Compare(), const _Sequence& __s = _Sequence())
std::priority_queue::priority_queue	stl/stl_queue.h	/^      priority_queue(const _Compare& __x = _Compare(),$/;"	f	class:std::priority_queue	access:public	signature:(const _Compare& __x = _Compare(), const _Sequence& __s = _Sequence())
std::priority_queue::push	stl/stl_queue.h	/^      push(const value_type& __x)$/;"	f	class:std::priority_queue	access:public	signature:(const value_type& __x)
std::priority_queue::reference	stl/stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::size	stl/stl_queue.h	/^      size() const$/;"	f	class:std::priority_queue	access:public	signature:() const
std::priority_queue::size_type	stl/stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::top	stl/stl_queue.h	/^      top() const$/;"	f	class:std::priority_queue	access:public	signature:() const
std::priority_queue::value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::priority_queue	access:public
std::ptr_fun	stl/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	signature:(_Result (__x)_Arg))
std::ptr_fun	stl/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std	signature:(_Result (__x)_Arg1, _Arg2))
std::push_heap	stl/stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::push_heap	stl/stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::queue	stl/stl_queue.h	/^    class queue$/;"	c	namespace:std
std::queue::_Sequence_value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::queue	access:private
std::queue::back	stl/stl_queue.h	/^      back() const$/;"	f	class:std::queue	access:public	signature:() const
std::queue::back	stl/stl_queue.h	/^      back()$/;"	f	class:std::queue	access:public	signature:()
std::queue::c	stl/stl_queue.h	/^      _Sequence c;$/;"	m	class:std::queue	access:protected
std::queue::const_reference	stl/stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::queue	access:public
std::queue::container_type	stl/stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::queue	access:public
std::queue::empty	stl/stl_queue.h	/^      empty() const$/;"	f	class:std::queue	access:public	signature:() const
std::queue::front	stl/stl_queue.h	/^      front() const$/;"	f	class:std::queue	access:public	signature:() const
std::queue::front	stl/stl_queue.h	/^      front()$/;"	f	class:std::queue	access:public	signature:()
std::queue::operator <	stl/stl_queue.h	/^        operator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
std::queue::operator ==	stl/stl_queue.h	/^        operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
std::queue::pop	stl/stl_queue.h	/^      pop()$/;"	f	class:std::queue	access:public	signature:()
std::queue::push	stl/stl_queue.h	/^      push(const value_type& __x)$/;"	f	class:std::queue	access:public	signature:(const value_type& __x)
std::queue::queue	stl/stl_queue.h	/^      queue(const _Sequence& __c = _Sequence()) : c(__c) {}$/;"	f	class:std::queue	access:public	signature:(const _Sequence& __c = _Sequence())
std::queue::reference	stl/stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::queue	access:public
std::queue::size	stl/stl_queue.h	/^      size() const$/;"	f	class:std::queue	access:public	signature:() const
std::queue::size_type	stl/stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::queue	access:public
std::queue::value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::queue	access:public
std::random_access_iterator_tag	stl/stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
std::random_shuffle	stl/stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::random_shuffle	stl/stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator& __rand)
std::raw_storage_iterator	stl/stl_raw_storage_iter.h	/^    class raw_storage_iterator$/;"	c	namespace:std	inherits:iterator
std::raw_storage_iterator::_M_iter	stl/stl_raw_storage_iter.h	/^      _ForwardIterator _M_iter;$/;"	m	class:std::raw_storage_iterator	access:protected
std::raw_storage_iterator::operator *	stl/stl_raw_storage_iter.h	/^      operator*() { return *this; }$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
std::raw_storage_iterator::operator ++	stl/stl_raw_storage_iter.h	/^      operator++()$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
std::raw_storage_iterator::operator ++	stl/stl_raw_storage_iter.h	/^      operator++(int)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(int)
std::raw_storage_iterator::operator =	stl/stl_raw_storage_iter.h	/^      operator=(const _Tp& __element)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(const _Tp& __element)
std::raw_storage_iterator::raw_storage_iterator	stl/stl_raw_storage_iter.h	/^      raw_storage_iterator(_ForwardIterator __x)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
std::rel_ops	stl/stl_relops.h	/^  namespace rel_ops$/;"	n	namespace:std
std::rel_ops::operator !=	stl/stl_relops.h	/^      operator!=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
std::rel_ops::operator <=	stl/stl_relops.h	/^      operator<=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
std::rel_ops::operator >	stl/stl_relops.h	/^      operator>(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
std::rel_ops::operator >=	stl/stl_relops.h	/^      operator>=(const _Tp& __x, const _Tp& __y)$/;"	f	namespace:std::rel_ops	signature:(const _Tp& __x, const _Tp& __y)
std::remove	stl/stl_algo.h	/^    remove(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
std::remove_copy	stl/stl_algo.h	/^    remove_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __value)
std::remove_copy_if	stl/stl_algo.h	/^    remove_copy_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)
std::remove_if	stl/stl_algo.h	/^    remove_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
std::replace	stl/stl_algo.h	/^    replace(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value, const _Tp& __new_value)
std::replace_copy	stl/stl_algo.h	/^    replace_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __old_value, const _Tp& __new_value)
std::replace_copy_if	stl/stl_algo.h	/^    replace_copy_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred, const _Tp& __new_value)
std::replace_if	stl/stl_algo.h	/^    replace_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp& __new_value)
std::reverse	stl/stl_algo.h	/^    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last)
std::reverse_copy	stl/stl_algo.h	/^    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	f	namespace:std	signature:(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)
std::reverse_iterator	stl/stl_iterator.h	/^    class reverse_iterator$/;"	c	namespace:std	inherits:iterator
std::reverse_iterator::base	stl/stl_iterator.h	/^      base() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::current	stl/stl_iterator.h	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	access:protected
std::reverse_iterator::difference_type	stl/stl_iterator.h	/^							       difference_type;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::iterator_type	stl/stl_iterator.h	/^      typedef _Iterator					       iterator_type;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::operator *	stl/stl_iterator.h	/^      operator*() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::operator +	stl/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator ++	stl/stl_iterator.h	/^      operator++()$/;"	f	class:std::reverse_iterator	access:public	signature:()
std::reverse_iterator::operator ++	stl/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator +=	stl/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
std::reverse_iterator::operator -	stl/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator --	stl/stl_iterator.h	/^      operator--()$/;"	f	class:std::reverse_iterator	access:public	signature:()
std::reverse_iterator::operator --	stl/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator -=	stl/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
std::reverse_iterator::operator ->	stl/stl_iterator.h	/^      operator->() const$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::operator []	stl/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::pointer	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer     pointer;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::reference	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference   reference;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator<_Iter>& __x)
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^      reverse_iterator() : current() { }$/;"	f	class:std::reverse_iterator	access:public	signature:()
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator& __x)
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	f	class:std::reverse_iterator	access:public	signature:(iterator_type __x)
std::rotate	stl/stl_algo.h	/^    rotate(_ForwardIterator __first, _ForwardIterator __middle,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)
std::rotate_copy	stl/stl_algo.h	/^    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)
std::search	stl/stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
std::search	stl/stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __predicate)
std::search_n	stl/stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val)
std::search_n	stl/stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val, _BinaryPredicate __binary_pred)
std::set	stl/stl_set.h	/^    class set$/;"	c	namespace:std
std::set::_Alloc_value_type	stl/stl_set.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	t	class:std::set	access:private
std::set::_Key_alloc_type	stl/stl_set.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	t	class:std::set	access:private
std::set::_M_t	stl/stl_set.h	/^      _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:std::set	access:private
std::set::_Rep_type	stl/stl_set.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	t	class:std::set	access:private
std::set::allocator_type	stl/stl_set.h	/^      typedef _Alloc   allocator_type;$/;"	t	class:std::set	access:public
std::set::begin	stl/stl_set.h	/^      begin() const$/;"	f	class:std::set	access:public	signature:() const
std::set::clear	stl/stl_set.h	/^      clear()$/;"	f	class:std::set	access:public	signature:()
std::set::const_iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	t	class:std::set	access:public
std::set::const_pointer	stl/stl_set.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	t	class:std::set	access:public
std::set::const_reference	stl/stl_set.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	t	class:std::set	access:public
std::set::const_reverse_iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	t	class:std::set	access:public
std::set::count	stl/stl_set.h	/^      count(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::difference_type	stl/stl_set.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	t	class:std::set	access:public
std::set::empty	stl/stl_set.h	/^      empty() const$/;"	f	class:std::set	access:public	signature:() const
std::set::end	stl/stl_set.h	/^      end() const$/;"	f	class:std::set	access:public	signature:() const
std::set::equal_range	stl/stl_set.h	/^      equal_range(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::equal_range	stl/stl_set.h	/^      equal_range(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
std::set::erase	stl/stl_set.h	/^      erase(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
std::set::erase	stl/stl_set.h	/^      erase(iterator __first, iterator __last)$/;"	f	class:std::set	access:public	signature:(iterator __first, iterator __last)
std::set::erase	stl/stl_set.h	/^      erase(iterator __position)$/;"	f	class:std::set	access:public	signature:(iterator __position)
std::set::find	stl/stl_set.h	/^      find(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::find	stl/stl_set.h	/^      find(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
std::set::get_allocator	stl/stl_set.h	/^      get_allocator() const$/;"	f	class:std::set	access:public	signature:() const
std::set::insert	stl/stl_set.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::set::insert	stl/stl_set.h	/^      insert(const value_type& __x)$/;"	f	class:std::set	access:public	signature:(const value_type& __x)
std::set::insert	stl/stl_set.h	/^      insert(iterator __position, const value_type& __x)$/;"	f	class:std::set	access:public	signature:(iterator __position, const value_type& __x)
std::set::iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	t	class:std::set	access:public
std::set::key_comp	stl/stl_set.h	/^      key_comp() const$/;"	f	class:std::set	access:public	signature:() const
std::set::key_compare	stl/stl_set.h	/^      typedef _Compare key_compare;$/;"	t	class:std::set	access:public
std::set::key_type	stl/stl_set.h	/^      typedef _Key     key_type;$/;"	t	class:std::set	access:public
std::set::lower_bound	stl/stl_set.h	/^      lower_bound(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::lower_bound	stl/stl_set.h	/^      lower_bound(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
std::set::max_size	stl/stl_set.h	/^      max_size() const$/;"	f	class:std::set	access:public	signature:() const
std::set::operator <	stl/stl_set.h	/^        operator< (const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&)
std::set::operator =	stl/stl_set.h	/^      operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key, _Compare, _Alloc>& __x)
std::set::operator ==	stl/stl_set.h	/^        operator== (const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&)
std::set::pointer	stl/stl_set.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	t	class:std::set	access:public
std::set::rbegin	stl/stl_set.h	/^      rbegin() const$/;"	f	class:std::set	access:public	signature:() const
std::set::reference	stl/stl_set.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	t	class:std::set	access:public
std::set::rend	stl/stl_set.h	/^      rend() const$/;"	f	class:std::set	access:public	signature:() const
std::set::reverse_iterator	stl/stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	t	class:std::set	access:public
std::set::set	stl/stl_set.h	/^        set(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::set::set	stl/stl_set.h	/^        set(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::set::set	stl/stl_set.h	/^      set()$/;"	f	class:std::set	access:public	signature:()
std::set::set	stl/stl_set.h	/^      set(const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::set::set	stl/stl_set.h	/^      set(const set<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key,_Compare,_Alloc>& __x)
std::set::size	stl/stl_set.h	/^      size() const$/;"	f	class:std::set	access:public	signature:() const
std::set::size_type	stl/stl_set.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	t	class:std::set	access:public
std::set::swap	stl/stl_set.h	/^      swap(set<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(set<_Key,_Compare,_Alloc>& __x)
std::set::upper_bound	stl/stl_set.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::upper_bound	stl/stl_set.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
std::set::value_comp	stl/stl_set.h	/^      value_comp() const$/;"	f	class:std::set	access:public	signature:() const
std::set::value_compare	stl/stl_set.h	/^      typedef _Compare value_compare;$/;"	t	class:std::set	access:public
std::set::value_type	stl/stl_set.h	/^      typedef _Key     value_type;$/;"	t	class:std::set	access:public
std::set_difference	stl/stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
std::set_difference	stl/stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
std::set_intersection	stl/stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
std::set_intersection	stl/stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
std::set_symmetric_difference	stl/stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
std::set_symmetric_difference	stl/stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
std::set_union	stl/stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result)
std::set_union	stl/stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _OutputIterator __result, _Compare __comp)
std::sort	stl/stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::sort	stl/stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::sort_heap	stl/stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::sort_heap	stl/stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::stable_partition	stl/stl_algo.h	/^    stable_partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
std::stable_sort	stl/stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::stable_sort	stl/stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::stack	stl/stl_stack.h	/^    class stack$/;"	c	namespace:std
std::stack::_Sequence_value_type	stl/stl_stack.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::stack	access:private
std::stack::c	stl/stl_stack.h	/^      _Sequence c;$/;"	m	class:std::stack	access:protected
std::stack::const_reference	stl/stl_stack.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	t	class:std::stack	access:public
std::stack::container_type	stl/stl_stack.h	/^      typedef          _Sequence                            container_type;$/;"	t	class:std::stack	access:public
std::stack::empty	stl/stl_stack.h	/^      empty() const$/;"	f	class:std::stack	access:public	signature:() const
std::stack::operator <	stl/stl_stack.h	/^        operator<(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
std::stack::operator ==	stl/stl_stack.h	/^        operator==(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
std::stack::pop	stl/stl_stack.h	/^      pop()$/;"	f	class:std::stack	access:public	signature:()
std::stack::push	stl/stl_stack.h	/^      push(const value_type& __x)$/;"	f	class:std::stack	access:public	signature:(const value_type& __x)
std::stack::reference	stl/stl_stack.h	/^      typedef typename _Sequence::reference                 reference;$/;"	t	class:std::stack	access:public
std::stack::size	stl/stl_stack.h	/^      size() const$/;"	f	class:std::stack	access:public	signature:() const
std::stack::size_type	stl/stl_stack.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	t	class:std::stack	access:public
std::stack::stack	stl/stl_stack.h	/^      stack(const _Sequence& __c = _Sequence())$/;"	f	class:std::stack	access:public	signature:(const _Sequence& __c = _Sequence())
std::stack::top	stl/stl_stack.h	/^      top() const$/;"	f	class:std::stack	access:public	signature:() const
std::stack::top	stl/stl_stack.h	/^      top()$/;"	f	class:std::stack	access:public	signature:()
std::stack::value_type	stl/stl_stack.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::stack	access:public
std::swap	stl/stl_algobase.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std	signature:(_Tp& __a, _Tp& __b)
std::swap	stl/stl_deque.h	/^    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)$/;"	f	namespace:std	signature:(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
std::swap	stl/stl_list.h	/^    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
std::swap	stl/stl_map.h	/^    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(map<_Key, _Tp, _Compare, _Alloc>& __x, map<_Key, _Tp, _Compare, _Alloc>& __y)
std::swap	stl/stl_multimap.h	/^    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(multimap<_Key, _Tp, _Compare, _Alloc>& __x, multimap<_Key, _Tp, _Compare, _Alloc>& __y)
std::swap	stl/stl_multiset.h	/^    swap(multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(multiset<_Key, _Compare, _Alloc>& __x, multiset<_Key, _Compare, _Alloc>& __y)
std::swap	stl/stl_set.h	/^    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)$/;"	f	namespace:std	signature:(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
std::swap	stl/stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
std::swap	stl/stl_vector.h	/^    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
std::swap_ranges	stl/stl_algo.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
std::transform	stl/stl_algo.h	/^    transform(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)
std::transform	stl/stl_algo.h	/^    transform(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)
std::unary_function	stl/stl_function.h	/^    struct unary_function$/;"	s	namespace:std
std::unary_function::argument_type	stl/stl_function.h	/^      typedef _Arg argument_type;   \/\/\/< @c argument_type is the type of the$/;"	t	struct:std::unary_function	access:public
std::unary_function::result_type	stl/stl_function.h	/^      typedef _Result result_type;  \/\/\/< @c result_type is the return type$/;"	t	struct:std::unary_function	access:public
std::unary_negate	stl/stl_function.h	/^    class unary_negate$/;"	c	namespace:std	inherits:unary_function
std::unary_negate::_M_pred	stl/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	access:protected
std::unary_negate::operator ()	stl/stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate	access:public	signature:(const typename _Predicate::argument_type& __x) const
std::unary_negate::unary_negate	stl/stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:std::unary_negate	access:public	signature:(const _Predicate& __x)
std::uninitialized_copy	stl/stl_uninitialized.h	/^    uninitialized_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)
std::uninitialized_copy	stl/stl_uninitialized.h	/^  uninitialized_copy(const char* __first, const char* __last, char* __result)$/;"	f	namespace:std	signature:(const char* __first, const char* __last, char* __result)
std::uninitialized_copy	stl/stl_uninitialized.h	/^  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	f	namespace:std	signature:(const wchar_t* __first, const wchar_t* __last, wchar_t* __result)
std::uninitialized_fill	stl/stl_uninitialized.h	/^    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)
std::uninitialized_fill_n	stl/stl_uninitialized.h	/^    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x)
std::unique	stl/stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::unique	stl/stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
std::unique_copy	stl/stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
std::unique_copy	stl/stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)
std::upper_bound	stl/stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
std::upper_bound	stl/stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
std::vector	stl/stl_bvector.h	/^  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>$/;"	c	namespace:std	inherits:_Bvector_base
std::vector	stl/stl_vector.h	/^    class vector : protected _Vector_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_Vector_base
std::vector::_Alloc_value_type	stl/stl_vector.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	t	class:std::vector	access:private
std::vector::_Base	stl/stl_bvector.h	/^    typedef _Bvector_base<_Alloc>			 _Base;$/;"	t	class:std::vector	access:private
std::vector::_Base	stl/stl_vector.h	/^      typedef _Vector_base<_Tp, _Alloc>			 _Base;$/;"	t	class:std::vector	access:private
std::vector::_M_allocate_and_copy	stl/stl_vector.h	/^        _M_allocate_and_copy(size_type __n,$/;"	f	class:std::vector	access:protected	signature:(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
std::vector::_M_assign_aux	stl/stl_bvector.h	/^      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::vector::_M_assign_aux	stl/stl_bvector.h	/^      _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::vector::_M_assign_aux	stl/stl_vector.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::vector::_M_assign_aux	stl/stl_vector.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::vector::_M_assign_dispatch	stl/stl_bvector.h	/^      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_assign_dispatch	stl/stl_bvector.h	/^      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
std::vector::_M_assign_dispatch	stl/stl_vector.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_assign_dispatch	stl/stl_vector.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __val, __true_type)
std::vector::_M_copy_aligned	stl/stl_bvector.h	/^    _M_copy_aligned(const_iterator __first, const_iterator __last,$/;"	f	class:std::vector	access:protected	signature:(const_iterator __first, const_iterator __last, iterator __result)
std::vector::_M_erase_at_end	stl/stl_bvector.h	/^    _M_erase_at_end(iterator __pos)$/;"	f	class:std::vector	access:protected	signature:(iterator __pos)
std::vector::_M_erase_at_end	stl/stl_vector.h	/^      _M_erase_at_end(pointer __pos)$/;"	f	class:std::vector	access:protected	signature:(pointer __pos)
std::vector::_M_fill_assign	stl/stl_bvector.h	/^    _M_fill_assign(size_t __n, bool __x)$/;"	f	class:std::vector	access:protected	signature:(size_t __n, bool __x)
std::vector::_M_fill_assign	stl/stl_vector.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	p	class:std::vector	access:protected	signature:(size_type __n, const value_type& __val)
std::vector::_M_fill_insert	stl/stl_bvector.h	/^    _M_fill_insert(iterator __position, size_type __n, bool __x)$/;"	f	class:std::vector	access:protected	signature:(iterator __position, size_type __n, bool __x)
std::vector::_M_fill_insert	stl/stl_vector.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
std::vector::_M_initialize	stl/stl_bvector.h	/^    _M_initialize(size_type __n)$/;"	f	class:std::vector	access:protected	signature:(size_type __n)
std::vector::_M_initialize_dispatch	stl/stl_bvector.h	/^      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_initialize_dispatch	stl/stl_bvector.h	/^      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __x, __true_type)
std::vector::_M_initialize_dispatch	stl/stl_vector.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_initialize_dispatch	stl/stl_vector.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)$/;"	f	class:std::vector	access:protected	signature:(_Integer __n, _Integer __value, __true_type)
std::vector::_M_initialize_range	stl/stl_bvector.h	/^      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::vector::_M_initialize_range	stl/stl_bvector.h	/^      _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::vector::_M_insert_aux	stl/stl_bvector.h	/^    _M_insert_aux(iterator __position, bool __x)$/;"	f	class:std::vector	access:protected	signature:(iterator __position, bool __x)
std::vector::_M_insert_aux	stl/stl_vector.h	/^      _M_insert_aux(iterator __position, const value_type& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __position, const value_type& __x)
std::vector::_M_insert_dispatch	stl/stl_bvector.h	/^      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
std::vector::_M_insert_dispatch	stl/stl_bvector.h	/^      _M_insert_dispatch(iterator __pos,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_insert_dispatch	stl/stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _InputIterator __first,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_insert_dispatch	stl/stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _Integer __n, _Integer __val, __true_type)
std::vector::_M_insert_range	stl/stl_bvector.h	/^      _M_insert_range(iterator __pos, _InputIterator __first, $/;"	f	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::vector::_M_insert_range	stl/stl_bvector.h	/^      _M_insert_range(iterator __position, _ForwardIterator __first, $/;"	f	class:std::vector	access:protected	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::vector::_M_range_check	stl/stl_bvector.h	/^    _M_range_check(size_type __n) const$/;"	f	class:std::vector	access:protected	signature:(size_type __n) const
std::vector::_M_range_check	stl/stl_vector.h	/^      _M_range_check(size_type __n) const$/;"	f	class:std::vector	access:protected	signature:(size_type __n) const
std::vector::_M_range_initialize	stl/stl_vector.h	/^        _M_range_initialize(_ForwardIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::vector::_M_range_initialize	stl/stl_vector.h	/^        _M_range_initialize(_InputIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::vector::_M_range_insert	stl/stl_vector.h	/^        _M_range_insert(iterator __pos, _ForwardIterator __first,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
std::vector::_M_range_insert	stl/stl_vector.h	/^        _M_range_insert(iterator __pos, _InputIterator __first,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
std::vector::_Tp_alloc_type	stl/stl_vector.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	t	class:std::vector	access:private
std::vector::allocator_type	stl/stl_bvector.h	/^    typedef _Alloc                        		 allocator_type;$/;"	t	class:std::vector	access:public
std::vector::allocator_type	stl/stl_vector.h	/^      typedef _Alloc                        		 allocator_type;$/;"	t	class:std::vector	access:public
std::vector::assign	stl/stl_bvector.h	/^      assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::vector::assign	stl/stl_bvector.h	/^    assign(size_type __n, const bool& __x)$/;"	f	class:std::vector	access:public	signature:(size_type __n, const bool& __x)
std::vector::assign	stl/stl_vector.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::vector::assign	stl/stl_vector.h	/^      assign(size_type __n, const value_type& __val)$/;"	f	class:std::vector	access:public	signature:(size_type __n, const value_type& __val)
std::vector::at	stl/stl_bvector.h	/^    at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
std::vector::at	stl/stl_bvector.h	/^    at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::at	stl/stl_vector.h	/^      at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
std::vector::at	stl/stl_vector.h	/^      at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::back	stl/stl_bvector.h	/^    back() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::back	stl/stl_bvector.h	/^    back()$/;"	f	class:std::vector	access:public	signature:()
std::vector::back	stl/stl_vector.h	/^      back() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::back	stl/stl_vector.h	/^      back()$/;"	f	class:std::vector	access:public	signature:()
std::vector::begin	stl/stl_bvector.h	/^    begin() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::begin	stl/stl_bvector.h	/^    begin()$/;"	f	class:std::vector	access:public	signature:()
std::vector::begin	stl/stl_vector.h	/^      begin() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::begin	stl/stl_vector.h	/^      begin()$/;"	f	class:std::vector	access:public	signature:()
std::vector::capacity	stl/stl_bvector.h	/^    capacity() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::capacity	stl/stl_vector.h	/^      capacity() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::clear	stl/stl_bvector.h	/^    clear()$/;"	f	class:std::vector	access:public	signature:()
std::vector::clear	stl/stl_vector.h	/^      clear()$/;"	f	class:std::vector	access:public	signature:()
std::vector::const_iterator	stl/stl_bvector.h	/^    typedef _Bit_const_iterator                          const_iterator;$/;"	t	class:std::vector	access:public
std::vector::const_iterator	stl/stl_vector.h	/^      const_iterator;$/;"	t	class:std::vector	access:public
std::vector::const_pointer	stl/stl_bvector.h	/^    typedef const bool*                                  const_pointer;$/;"	t	class:std::vector	access:public
std::vector::const_pointer	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	t	class:std::vector	access:public
std::vector::const_reference	stl/stl_bvector.h	/^    typedef bool                                         const_reference;$/;"	t	class:std::vector	access:public
std::vector::const_reference	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	t	class:std::vector	access:public
std::vector::const_reverse_iterator	stl/stl_bvector.h	/^    typedef std::reverse_iterator<const_iterator>        const_reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::const_reverse_iterator	stl/stl_vector.h	/^      typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::data	stl/stl_bvector.h	/^    data() { }$/;"	f	class:std::vector	access:public	signature:()
std::vector::data	stl/stl_vector.h	/^      data() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::data	stl/stl_vector.h	/^      data()$/;"	f	class:std::vector	access:public	signature:()
std::vector::difference_type	stl/stl_bvector.h	/^    typedef ptrdiff_t                                    difference_type;$/;"	t	class:std::vector	access:public
std::vector::difference_type	stl/stl_vector.h	/^      typedef ptrdiff_t					 difference_type;$/;"	t	class:std::vector	access:public
std::vector::empty	stl/stl_bvector.h	/^    empty() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::empty	stl/stl_vector.h	/^      empty() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::end	stl/stl_bvector.h	/^    end() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::end	stl/stl_bvector.h	/^    end()$/;"	f	class:std::vector	access:public	signature:()
std::vector::end	stl/stl_vector.h	/^      end() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::end	stl/stl_vector.h	/^      end()$/;"	f	class:std::vector	access:public	signature:()
std::vector::erase	stl/stl_bvector.h	/^    erase(iterator __first, iterator __last)$/;"	f	class:std::vector	access:public	signature:(iterator __first, iterator __last)
std::vector::erase	stl/stl_bvector.h	/^    erase(iterator __position)$/;"	f	class:std::vector	access:public	signature:(iterator __position)
std::vector::erase	stl/stl_vector.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::vector	access:public	signature:(iterator __first, iterator __last)
std::vector::erase	stl/stl_vector.h	/^      erase(iterator __position);$/;"	p	class:std::vector	access:public	signature:(iterator __position)
std::vector::flip	stl/stl_bvector.h	/^    flip()$/;"	f	class:std::vector	access:public	signature:()
std::vector::front	stl/stl_bvector.h	/^    front() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::front	stl/stl_bvector.h	/^    front()$/;"	f	class:std::vector	access:public	signature:()
std::vector::front	stl/stl_vector.h	/^      front() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::front	stl/stl_vector.h	/^      front()$/;"	f	class:std::vector	access:public	signature:()
std::vector::get_allocator	stl/stl_bvector.h	/^    allocator_type get_allocator() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::insert	stl/stl_bvector.h	/^      insert(iterator __position,$/;"	f	class:std::vector	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
std::vector::insert	stl/stl_bvector.h	/^    insert(iterator __position, const bool& __x = bool())$/;"	f	class:std::vector	access:public	signature:(iterator __position, const bool& __x = bool())
std::vector::insert	stl/stl_bvector.h	/^    insert(iterator __position, size_type __n, const bool& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __position, size_type __n, const bool& __x)
std::vector::insert	stl/stl_vector.h	/^        insert(iterator __position, _InputIterator __first,$/;"	f	class:std::vector	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
std::vector::insert	stl/stl_vector.h	/^      insert(iterator __position, const value_type& __x);$/;"	p	class:std::vector	access:public	signature:(iterator __position, const value_type& __x)
std::vector::insert	stl/stl_vector.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __position, size_type __n, const value_type& __x)
std::vector::iterator	stl/stl_bvector.h	/^    typedef _Bit_iterator                                iterator;$/;"	t	class:std::vector	access:public
std::vector::iterator	stl/stl_vector.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;$/;"	t	class:std::vector	access:public
std::vector::max_size	stl/stl_bvector.h	/^    max_size() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::max_size	stl/stl_vector.h	/^      max_size() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::operator =	stl/stl_bvector.h	/^    operator=(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
std::vector::operator =	stl/stl_vector.h	/^      operator=(const vector& __x);$/;"	p	class:std::vector	access:public	signature:(const vector& __x)
std::vector::operator []	stl/stl_bvector.h	/^    operator[](size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
std::vector::operator []	stl/stl_bvector.h	/^    operator[](size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::operator []	stl/stl_vector.h	/^      operator[](size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
std::vector::operator []	stl/stl_vector.h	/^      operator[](size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::pointer	stl/stl_bvector.h	/^    typedef _Bit_reference*                              pointer;$/;"	t	class:std::vector	access:public
std::vector::pointer	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	t	class:std::vector	access:public
std::vector::pop_back	stl/stl_bvector.h	/^    pop_back()$/;"	f	class:std::vector	access:public	signature:()
std::vector::pop_back	stl/stl_vector.h	/^      pop_back()$/;"	f	class:std::vector	access:public	signature:()
std::vector::push_back	stl/stl_bvector.h	/^    push_back(bool __x)$/;"	f	class:std::vector	access:public	signature:(bool __x)
std::vector::push_back	stl/stl_vector.h	/^      push_back(const value_type& __x)$/;"	f	class:std::vector	access:public	signature:(const value_type& __x)
std::vector::rbegin	stl/stl_bvector.h	/^    rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::rbegin	stl/stl_bvector.h	/^    rbegin()$/;"	f	class:std::vector	access:public	signature:()
std::vector::rbegin	stl/stl_vector.h	/^      rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::rbegin	stl/stl_vector.h	/^      rbegin()$/;"	f	class:std::vector	access:public	signature:()
std::vector::reference	stl/stl_bvector.h	/^    typedef _Bit_reference                               reference;$/;"	t	class:std::vector	access:public
std::vector::reference	stl/stl_vector.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	t	class:std::vector	access:public
std::vector::rend	stl/stl_bvector.h	/^    rend() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::rend	stl/stl_bvector.h	/^    rend()$/;"	f	class:std::vector	access:public	signature:()
std::vector::rend	stl/stl_vector.h	/^      rend() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::rend	stl/stl_vector.h	/^      rend()$/;"	f	class:std::vector	access:public	signature:()
std::vector::reserve	stl/stl_bvector.h	/^    reserve(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::reserve	stl/stl_vector.h	/^      reserve(size_type __n);$/;"	p	class:std::vector	access:public	signature:(size_type __n)
std::vector::resize	stl/stl_bvector.h	/^    resize(size_type __new_size, bool __x = bool())$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, bool __x = bool())
std::vector::resize	stl/stl_vector.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, value_type __x = value_type())
std::vector::reverse_iterator	stl/stl_bvector.h	/^    typedef std::reverse_iterator<iterator>              reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::reverse_iterator	stl/stl_vector.h	/^      typedef std::reverse_iterator<iterator>		 reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::size	stl/stl_bvector.h	/^    size() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::size	stl/stl_vector.h	/^      size() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::size_type	stl/stl_bvector.h	/^    typedef size_t                                       size_type;$/;"	t	class:std::vector	access:public
std::vector::size_type	stl/stl_vector.h	/^      typedef size_t					 size_type;$/;"	t	class:std::vector	access:public
std::vector::swap	stl/stl_bvector.h	/^    swap(reference __x, reference __y)$/;"	f	class:std::vector	access:public	signature:(reference __x, reference __y)
std::vector::swap	stl/stl_bvector.h	/^    swap(vector<bool, _Alloc>& __x)$/;"	f	class:std::vector	access:public	signature:(vector<bool, _Alloc>& __x)
std::vector::swap	stl/stl_vector.h	/^      swap(vector& __x)$/;"	f	class:std::vector	access:public	signature:(vector& __x)
std::vector::value_type	stl/stl_bvector.h	/^    typedef bool                                         value_type;$/;"	t	class:std::vector	access:public
std::vector::value_type	stl/stl_vector.h	/^      typedef _Tp					 value_type;$/;"	t	class:std::vector	access:public
std::vector::vector	stl/stl_bvector.h	/^      vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_bvector.h	/^    vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_bvector.h	/^    vector(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
std::vector::vector	stl/stl_bvector.h	/^    vector(size_type __n, const bool& __value = bool(), $/;"	f	class:std::vector	access:public	signature:(size_type __n, const bool& __value = bool(), const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_vector.h	/^        vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_vector.h	/^      vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_vector.h	/^      vector(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
std::vector::vector	stl/stl_vector.h	/^      vector(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::vector	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
std::vector::vector_type	stl/stl_vector.h	/^      typedef vector<_Tp, _Alloc>			 vector_type;$/;"	t	class:std::vector	access:private
std::vector::~vector	stl/stl_bvector.h	/^    ~vector() { }$/;"	f	class:std::vector	access:public	signature:()
std::vector::~vector	stl/stl_vector.h	/^      ~vector()$/;"	f	class:std::vector	access:public	signature:()
swap	stl/stl_algobase.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std	signature:(_Tp& __a, _Tp& __b)
swap	stl/stl_bvector.h	/^    swap(reference __x, reference __y)$/;"	f	class:std::vector	access:public	signature:(reference __x, reference __y)
swap	stl/stl_bvector.h	/^    swap(vector<bool, _Alloc>& __x)$/;"	f	class:std::vector	access:public	signature:(vector<bool, _Alloc>& __x)
swap	stl/stl_deque.h	/^      swap(deque& __x)$/;"	f	class:std::deque	access:public	signature:(deque& __x)
swap	stl/stl_deque.h	/^    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)$/;"	f	namespace:std	signature:(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
swap	stl/stl_list.h	/^      swap(list& __x)$/;"	f	class:std::list	access:public	signature:(list& __x)
swap	stl/stl_list.h	/^    swap(_List_node_base& __x, _List_node_base& __y);$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base& __x, _List_node_base& __y)
swap	stl/stl_list.h	/^    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
swap	stl/stl_map.h	/^      swap(map& __x)$/;"	f	class:std::map	access:public	signature:(map& __x)
swap	stl/stl_map.h	/^    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(map<_Key, _Tp, _Compare, _Alloc>& __x, map<_Key, _Tp, _Compare, _Alloc>& __y)
swap	stl/stl_multimap.h	/^      swap(multimap& __x)$/;"	f	class:std::multimap	access:public	signature:(multimap& __x)
swap	stl/stl_multimap.h	/^    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(multimap<_Key, _Tp, _Compare, _Alloc>& __x, multimap<_Key, _Tp, _Compare, _Alloc>& __y)
swap	stl/stl_multiset.h	/^      swap(multiset<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::multiset	access:public	signature:(multiset<_Key, _Compare, _Alloc>& __x)
swap	stl/stl_multiset.h	/^    swap(multiset<_Key, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(multiset<_Key, _Compare, _Alloc>& __x, multiset<_Key, _Compare, _Alloc>& __y)
swap	stl/stl_set.h	/^      swap(set<_Key,_Compare,_Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(set<_Key,_Compare,_Alloc>& __x)
swap	stl/stl_set.h	/^    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)$/;"	f	namespace:std	signature:(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
swap	stl/stl_tree.h	/^      swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);$/;"	p	class:std::_Rb_tree	access:public	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
swap	stl/stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)$/;"	f	class:std::_Rb_tree	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
swap	stl/stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	f	namespace:std	signature:(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x, _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
swap	stl/stl_vector.h	/^      swap(vector& __x)$/;"	f	class:std::vector	access:public	signature:(vector& __x)
swap	stl/stl_vector.h	/^    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
swap_ranges	stl/stl_algo.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	signature:(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
top	stl/stl_queue.h	/^      top() const$/;"	f	class:std::priority_queue	access:public	signature:() const
top	stl/stl_stack.h	/^      top() const$/;"	f	class:std::stack	access:public	signature:() const
top	stl/stl_stack.h	/^      top()$/;"	f	class:std::stack	access:public	signature:()
transfer	stl/stl_list.h	/^    transfer(_List_node_base * const __first,$/;"	p	struct:std::_List_node_base	access:public	signature:(_List_node_base * const __first, _List_node_base * const __last)
transform	stl/stl_algo.h	/^    transform(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)
transform	stl/stl_algo.h	/^    transform(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _OutputIterator __result, _BinaryOperation __binary_op)
unary_function	stl/stl_function.h	/^    struct unary_function$/;"	s	namespace:std
unary_negate	stl/stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:std::unary_negate	access:public	signature:(const _Predicate& __x)
unary_negate	stl/stl_function.h	/^    class unary_negate$/;"	c	namespace:std	inherits:unary_function
unhook	stl/stl_list.h	/^    unhook();$/;"	p	struct:std::_List_node_base	access:public	signature:()
uninitialized_copy	stl/stl_uninitialized.h	/^    uninitialized_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)
uninitialized_copy	stl/stl_uninitialized.h	/^  uninitialized_copy(const char* __first, const char* __last, char* __result)$/;"	f	namespace:std	signature:(const char* __first, const char* __last, char* __result)
uninitialized_copy	stl/stl_uninitialized.h	/^  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	f	namespace:std	signature:(const wchar_t* __first, const wchar_t* __last, wchar_t* __result)
uninitialized_fill	stl/stl_uninitialized.h	/^    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)
uninitialized_fill_n	stl/stl_uninitialized.h	/^    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _Size __n, const _Tp& __x)
unique	stl/stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
unique	stl/stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
unique	stl/stl_list.h	/^        unique(_BinaryPredicate);$/;"	p	class:std::list	access:public	signature:(_BinaryPredicate)
unique	stl/stl_list.h	/^      unique();$/;"	p	class:std::list	access:public	signature:()
unique_copy	stl/stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
unique_copy	stl/stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)
upper_bound	stl/stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
upper_bound	stl/stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
upper_bound	stl/stl_map.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_map.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
upper_bound	stl/stl_multimap.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_multimap.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
upper_bound	stl/stl_multiset.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_multiset.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
upper_bound	stl/stl_set.h	/^      upper_bound(const key_type& __x) const$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_set.h	/^      upper_bound(const key_type& __x)$/;"	f	class:std::set	access:public	signature:(const key_type& __x)
upper_bound	stl/stl_tree.h	/^      upper_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_tree.h	/^      upper_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
upper_bound	stl/stl_tree.h	/^    upper_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
upper_bound	stl/stl_tree.h	/^    upper_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
value	stl/stl_function.h	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	access:protected
value	stl/stl_function.h	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	access:protected
value_comp	stl/stl_map.h	/^      value_comp() const$/;"	f	class:std::map	access:public	signature:() const
value_comp	stl/stl_multimap.h	/^      value_comp() const$/;"	f	class:std::multimap	access:public	signature:() const
value_comp	stl/stl_multiset.h	/^      value_comp() const$/;"	f	class:std::multiset	access:public	signature:() const
value_comp	stl/stl_set.h	/^      value_comp() const$/;"	f	class:std::set	access:public	signature:() const
value_compare	stl/stl_map.h	/^	value_compare(_Compare __c)$/;"	f	class:std::map::value_compare	access:protected	signature:(_Compare __c)
value_compare	stl/stl_map.h	/^      class value_compare$/;"	c	class:std::map	inherits:std::binary_function	access:public
value_compare	stl/stl_multimap.h	/^	value_compare(_Compare __c)$/;"	f	class:std::multimap::value_compare	access:protected	signature:(_Compare __c)
value_compare	stl/stl_multimap.h	/^      class value_compare$/;"	c	class:std::multimap	inherits:std::binary_function	access:public
value_compare	stl/stl_multiset.h	/^      typedef _Compare value_compare;$/;"	t	class:std::multiset	access:public
value_compare	stl/stl_set.h	/^      typedef _Compare value_compare;$/;"	t	class:std::set	access:public
value_type	stl/stl_bvector.h	/^    typedef bool                                         value_type;$/;"	t	class:std::vector	access:public
value_type	stl/stl_deque.h	/^      typedef _Tp                                        value_type;$/;"	t	class:std::deque	access:public
value_type	stl/stl_deque.h	/^      typedef _Tp                             value_type;$/;"	t	struct:std::_Deque_iterator	access:public
value_type	stl/stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::value_type  value_type;$/;"	t	class:__normal_iterator	access:public
value_type	stl/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	access:public
value_type	stl/stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::iterator	access:public
value_type	stl/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	access:public
value_type	stl/stl_list.h	/^      typedef _Tp                                        value_type;$/;"	t	class:std::list	access:public
value_type	stl/stl_list.h	/^      typedef _Tp                                value_type;$/;"	t	struct:std::_List_const_iterator	access:public
value_type	stl/stl_list.h	/^      typedef _Tp                                value_type;$/;"	t	struct:std::_List_iterator	access:public
value_type	stl/stl_map.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	t	class:std::map	access:public
value_type	stl/stl_multimap.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	t	class:std::multimap	access:public
value_type	stl/stl_multiset.h	/^      typedef _Key     value_type;$/;"	t	class:std::multiset	access:public
value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::priority_queue	access:public
value_type	stl/stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::queue	access:public
value_type	stl/stl_set.h	/^      typedef _Key     value_type;$/;"	t	class:std::set	access:public
value_type	stl/stl_stack.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	t	class:std::stack	access:public
value_type	stl/stl_tempbuf.h	/^      typedef _Tp         value_type;$/;"	t	class:std::_Temporary_buffer	access:public
value_type	stl/stl_tree.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::_Rb_tree_const_iterator	access:public
value_type	stl/stl_tree.h	/^      typedef _Tp  value_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
value_type	stl/stl_tree.h	/^      typedef _Val value_type;$/;"	t	class:std::_Rb_tree	access:public
value_type	stl/stl_vector.h	/^      typedef _Tp					 value_type;$/;"	t	class:std::vector	access:public
vector	stl/stl_bvector.h	/^      vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
vector	stl/stl_bvector.h	/^    vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
vector	stl/stl_bvector.h	/^    vector(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
vector	stl/stl_bvector.h	/^    vector(size_type __n, const bool& __value = bool(), $/;"	f	class:std::vector	access:public	signature:(size_type __n, const bool& __value = bool(), const allocator_type& __a = allocator_type())
vector	stl/stl_bvector.h	/^  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>$/;"	c	namespace:std	inherits:_Bvector_base
vector	stl/stl_vector.h	/^        vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
vector	stl/stl_vector.h	/^      vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
vector	stl/stl_vector.h	/^      vector(const vector& __x)$/;"	f	class:std::vector	access:public	signature:(const vector& __x)
vector	stl/stl_vector.h	/^      vector(size_type __n, const value_type& __value = value_type(),$/;"	f	class:std::vector	access:public	signature:(size_type __n, const value_type& __value = value_type(), const allocator_type& __a = allocator_type())
vector	stl/stl_vector.h	/^    class vector : protected _Vector_base<_Tp, _Alloc>$/;"	c	namespace:std	inherits:_Vector_base
vector_type	stl/stl_vector.h	/^      typedef vector<_Tp, _Alloc>			 vector_type;$/;"	t	class:std::vector	access:private
~_Bvector_base	stl/stl_bvector.h	/^      ~_Bvector_base()$/;"	f	struct:std::_Bvector_base	access:public	signature:()
~_Deque_base	stl/stl_deque.h	/^      ~_Deque_base();$/;"	p	class:std::_Deque_base	access:public	signature:()
~_Deque_base	stl/stl_deque.h	/^    ~_Deque_base()$/;"	f	class:std::_Deque_base	signature:()
~_List_base	stl/stl_list.h	/^      ~_List_base()$/;"	f	class:std::_List_base	access:public	signature:()
~_Rb_tree	stl/stl_tree.h	/^      ~_Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
~_Temporary_buffer	stl/stl_tempbuf.h	/^      ~_Temporary_buffer()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
~_Vector_base	stl/stl_vector.h	/^      ~_Vector_base()$/;"	f	struct:std::_Vector_base	access:public	signature:()
~deque	stl/stl_deque.h	/^      ~deque()$/;"	f	class:std::deque	access:public	signature:()
~vector	stl/stl_bvector.h	/^    ~vector() { }$/;"	f	class:std::vector	access:public	signature:()
~vector	stl/stl_vector.h	/^      ~vector()$/;"	f	class:std::vector	access:public	signature:()
